{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolOwner",
          "type": "address"
        },
        {
          "internalType": "contract IPoolCreator",
          "name": "_poolCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governanceMothership",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decayPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultDecayPeriodVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultSlippageFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Swap",
          "name": "swap",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governanceShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governanceWallet",
          "type": "address"
        }
      ],
      "name": "GovernanceWalletUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "contract Swap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultVoteDecayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultVoteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultVoteSlippageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Swap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultDecayPeriodVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardGovernanceShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardReferralShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "contract Swap[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultDecayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDefaultDecayPeriodVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDefaultFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDefaultSlippageFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernanceShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getGovernanceShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getReferralShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualDefaultDecayPeriod",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualDefaultFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualDefaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualGovernanceShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualReferralShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeeCollector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mothership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCreator",
      "outputs": [
        {
          "internalType": "contract IPoolCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract Swap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceWallet",
          "type": "address"
        }
      ],
      "name": "setGovernanceWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "updateStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBalances",
          "type": "uint256[]"
        }
      ],
      "name": "updateStakesChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "voteGovernanceShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "voteReferralShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c8b517cae0b9f11aa698be95c2e8e30c4cd2657b1dc6be76701584137007297",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "2593598",
    "logsBloom": "0x
    "blockHash": "0x58a0be9d965a79384e2e9fa8f96572069d79f3b14b3725cb0627cb0e4a54ef9b",
    "transactionHash": "0x1c8b517cae0b9f11aa698be95c2e8e30c4cd2657b1dc6be76701584137007297",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0x1c8b517cae0b9f11aa698be95c2e8e30c4cd2657b1dc6be76701584137007297",
        "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x58a0be9d965a79384e2e9fa8f96572069d79f3b14b3725cb0627cb0e4a54ef9b"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "2593598",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "5c2e1cb50205ed71a0daeb9fe0a0c667",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IPoolCreator\",\"name\":\"_poolCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceMothership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decayPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultDecayPeriodVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultSlippageFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Swap\",\"name\":\"swap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governanceShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceWallet\",\"type\":\"address\"}],\"name\":\"GovernanceWalletUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultVoteDecayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultVoteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultVoteSlippageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultDecayPeriodVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardGovernanceShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardReferralShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"contract Swap[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultDecayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDefaultDecayPeriodVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDefaultFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDefaultSlippageFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getGovernanceShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferralShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualDefaultDecayPeriod\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualDefaultFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualDefaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualGovernanceShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualReferralShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Swap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mothership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreator\",\"outputs\":[{\"internalType\":\"contract IPoolCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceWallet\",\"type\":\"address\"}],\"name\":\"setGovernanceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updateStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"updateStakesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"voteGovernanceShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"voteReferralShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"defaultVoteDecayPeriod(uint256)\":{\"notice\":\"Records `msg.senders`'s vote for decay period \"},\"defaultVoteFee(uint256)\":{\"notice\":\"Records `msg.senders`'s vote for fee \"},\"defaultVoteSlippageFee(uint256)\":{\"notice\":\"Records `msg.senders`'s vote for slippage fee \"},\"defaults()\":{\"notice\":\"Initial settings that contract was created \"},\"discardDefaultDecayPeriodVote()\":{\"notice\":\"Retracts `msg.senders`'s vote for decay period \"},\"discardDefaultFeeVote()\":{\"notice\":\"Retracts `msg.senders`'s vote for fee \"},\"discardDefaultSlippageFeeVote()\":{\"notice\":\"Retracts `msg.senders`'s vote for slippage fee \"},\"discardGovernanceShareVote()\":{\"notice\":\"Retracts `msg.senders`'s vote for governance share \"},\"discardReferralShareVote()\":{\"notice\":\"Retracts `msg.senders`'s vote for referral share \"},\"feeCollector()\":{\"notice\":\"Returns the value of fee collector wallet address \"},\"getDefaultDecayPeriod()\":{\"notice\":\"Returns the value of default decay period \"},\"getDefaultFee()\":{\"notice\":\"Returns the value of default fee \"},\"getDefaultSlippageFee()\":{\"notice\":\"Returns the value of default slippage fee \"},\"getGovernanceShare()\":{\"notice\":\"Returns the value of governance share \"},\"getReferralShare()\":{\"notice\":\"Returns the value of referral share \"},\"getShareParameters()\":{\"notice\":\"Returns information about mooniswap shares \"},\"getVirtualDefaultDecayPeriod()\":{\"notice\":\"Returns previous default decay period that had place,  current one and time on which this changed \"},\"getVirtualDefaultFee()\":{\"notice\":\"Returns previous default fee that had place,  current one and time on which this changed \"},\"getVirtualDefaultSlippageFee()\":{\"notice\":\"Returns previous default slippage fee that had place,  current one and time on which this changed \"},\"governanceWallet()\":{\"notice\":\"Returns the value of governance wallet address \"},\"isActive()\":{\"notice\":\"Whether the contract is currently working and wasn't stopped. \"},\"isFeeCollector(address)\":{\"notice\":\"Whether the address is current fee collector or was in the past. \"},\"isPool(address)\":{\"notice\":\"If address is currently listed as a swap pool. Otherwise, false \"},\"pools(address,address)\":{\"notice\":\"Returns a pool for tokens pair.  Zero address result means that pool doesn't exist yet \"},\"voteGovernanceShare(uint256)\":{\"notice\":\"Records `msg.senders`'s vote for governance share \"},\"voteReferralShare(uint256)\":{\"notice\":\"Records `msg.senders`'s vote for referral share \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapFactory.sol\":\"SwapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\r\\nimport \\\"./lib/FADERC20.sol\\\";\\r\\nimport \\\"./lib/SQRT.sol\\\";\\r\\nimport \\\"./lib/VirtualBalance.sol\\\";\\r\\nimport \\\"./governance/Governance.sol\\\";\\r\\n\\r\\ncontract Swap is Governance {\\r\\n  using SQRT for uint256;\\r\\n  using SafeMath for uint256;\\r\\n  using FADERC20 for IERC20;\\r\\n  using VirtualBalance for VirtualBalance.Data;\\r\\n\\r\\n  struct Balances {\\r\\n    uint256 src;\\r\\n    uint256 dst;\\r\\n  }\\r\\n\\r\\n  struct Volumes {\\r\\n    uint128 confirmed;\\r\\n    uint128 result;\\r\\n  }\\r\\n  \\r\\n  struct Fees {\\r\\n    uint256 fee;\\r\\n    uint256 slippageFee;\\r\\n  }\\r\\n\\r\\n  event Error(string reason);\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Withdrawn(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Swapped(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    address indexed srcToken,\\r\\n    address dstToken,\\r\\n    uint256 amount,\\r\\n    uint256 result,\\r\\n    uint256 srcBalanceAdded,\\r\\n    uint256 dstBalanceRemoved,\\r\\n    address referral\\r\\n  );\\r\\n\\r\\n  event Sync(\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee,\\r\\n    uint256 referralShare,\\r\\n    uint256 governanceShare\\r\\n  );\\r\\n\\r\\n  uint256 private constant _BASE_SUPPLY = 1000; // Total supply on first deposit\\r\\n\\r\\n  IERC20 public immutable token0;\\r\\n  IERC20 public immutable token1;\\r\\n  mapping(IERC20 => Volumes) public volumes;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToAdd;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToRemove;\\r\\n\\r\\n  modifier whenNotShutdown {\\r\\n    require(governanceFactory.isActive(), \\\"Swap: Factory Is Shutdown\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    IERC20 _token0,\\r\\n    IERC20 _token1,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    IGovernanceFactory _governanceFactory\\r\\n  ) \\r\\n    ERC20(name, symbol)\\r\\n    Governance(_governanceFactory)\\r\\n  {\\r\\n    require(bytes(name).length > 0, \\\"Swap: Name Is Empty\\\");\\r\\n    require(bytes(symbol).length > 0, \\\"Swap: Symbol Is Empty\\\");\\r\\n    require(_token0 != _token1, \\\"Swap: Two Tokens Is Same\\\");\\r\\n    token0 = _token0;\\r\\n    token1 = _token1;\\r\\n  }\\r\\n\\r\\n  /** Returns pair of tokens as [token0, token1] */\\r\\n  function getTokens()\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20[] memory tokens)\\r\\n  {\\r\\n    tokens = new IERC20[](2);\\r\\n    tokens[0] = token0;\\r\\n    tokens[1] = token1;\\r\\n  }\\r\\n\\r\\n  function getToken(uint256 position)\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20)\\r\\n  {\\r\\n    if(position == 0 ) {\\r\\n      return token0;\\r\\n    } else if(position == 1){\\r\\n      return token1;\\r\\n    } else {\\r\\n      revert(\\\"Swap: Pool Have Only Two Tokens\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getBalanceToAdd(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.max(virtualBalanceToAdd[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  function getBalanceToRemove(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.min(virtualBalanceToRemove[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  /** Returns how many `dst` tokens will be returned for `amount` of `src` tokens */\\r\\n  function getQuote(IERC20 src, IERC20 dst, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _getQuote(src, dst, amount, getBalanceToAdd(src), getBalanceToRemove(dst), getFee(), getSlippageFee());\\r\\n  }\\r\\n\\r\\n  function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    return depositFor(maxAmounts, minAmounts, msg.sender);\\r\\n  }\\r\\n\\r\\n  function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    require(msg.value == (_tokens[0].isBNB() ? maxAmounts[0] : (_tokens[1].isBNB() ? maxAmounts[1] : 0)), \\\"Swap: Wrong Value Usage\\\");\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    if(totalSupply == 0) {\\r\\n      fairSupply = _BASE_SUPPLY.mul(99);\\r\\n      _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\r\\n\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.max(fairSupply, maxAmounts[i]);\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        require(maxAmounts[i] >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), maxAmounts[i]);\\r\\n        receivedAmounts[i] = maxAmounts[i];\\r\\n      }\\r\\n    } else {\\r\\n      uint256[2] memory realBalances;\\r\\n      for(uint i = 0; i < realBalances.length; i++) {\\r\\n        realBalances[i] = _tokens[i].getBalanceOf(address(this)).sub(_tokens[i].isBNB() ? msg.value : 0);\\r\\n      }\\r\\n\\r\\n      fairSupply = type(uint256).max;\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 fairSupplyCached = fairSupply; \\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\r\\n        require(amount >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n        receivedAmounts[i] = _tokens[i].getBalanceOf(address(this)).sub(realBalances[i]);\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        virtualBalanceToRemove[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n        virtualBalanceToAdd[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n      }\\r\\n    }\\r\\n      \\r\\n    require(fairSupply > 0, \\\"Swap: Result Is Not Enough\\\");\\r\\n    _mint(target, fairSupply);\\r\\n\\r\\n    emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount, uint256[] memory minReturns)\\r\\n    external\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    return withdrawFor(amount, minReturns, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /** Withdraws funds from the liquidity pool */\\r\\n  function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target)\\r\\n    public\\r\\n    nonReentrant\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n    _burn(msg.sender, amount);\\r\\n\\r\\n    for(uint i = 0; i < _tokens.length; i++) {\\r\\n      IERC20 token = _tokens[i];\\r\\n      uint256 preBalance = token.getBalanceOf(address(this));\\r\\n      uint256 value = preBalance.mul(amount).div(totalSupply);\\r\\n      token.fadTransfer(target, value);\\r\\n      withdrawnAmounts[i] = value;\\r\\n      require(i >= minReturns.length || value >= minReturns[i], \\\"Swap: Result Is Not Enough\\\");\\r\\n      virtualBalanceToRemove[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n      virtualBalanceToAdd[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n    }\\r\\n\\r\\n    emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    return swapFor(src, dst, amount, minReturn, referral, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    whenNotShutdown\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    require(msg.value == (src.isBNB() ? amount : 0), \\\"Swap: Wrong Value\\\");\\r\\n    Balances memory balances = Balances({\\r\\n      src: src.getBalanceOf(address(this)).sub(src.isBNB() ? msg.value : 0),\\r\\n      dst: dst.getBalanceOf(address(this))\\r\\n    });\\r\\n\\r\\n    uint256 confirmed;\\r\\n    Balances memory virtualBalances;\\r\\n    Fees memory fees = Fees({\\r\\n      fee: getFee(),\\r\\n      slippageFee: getSlippageFee()\\r\\n    });\\r\\n\\r\\n    (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\r\\n    emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\r\\n    \\r\\n    _mintRewards(confirmed, result, referral, balances, fees);\\r\\n\\r\\n    // Overflow of uint128 is desired\\r\\n    volumes[src].confirmed += uint128(confirmed);\\r\\n    volumes[src].result += uint128(result);\\r\\n  }\\r\\n\\r\\n  function _doTransfers(\\r\\n    IERC20 src, \\r\\n    IERC20 dst, \\r\\n    uint256 amount, \\r\\n    uint256 minReturn, \\r\\n    address payable receiver,\\r\\n    Balances memory balances,\\r\\n    Fees memory fees\\r\\n  )\\r\\n    private\\r\\n    returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\r\\n  {\\r\\n    uint256 _decayPeriod = getDecayPeriod();\\r\\n    virtualBalances.src = virtualBalanceToAdd[src].current(_decayPeriod, balances.src);\\r\\n    virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\r\\n    virtualBalances.dst = virtualBalanceToRemove[dst].current(_decayPeriod, balances.dst);\\r\\n    virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\r\\n    src.fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n    confirmed = src.getBalanceOf(address(this)).sub(balances.src);\\r\\n    result = _getQuote(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\r\\n    require(result > 0 && result >= minReturn, \\\"Swap: Return Is Not Enough\\\");\\r\\n    dst.fadTransfer(receiver, result);\\r\\n\\r\\n    // Update virtual balances to the same direction only at imbalanced state\\r\\n    if(virtualBalances.src != balances.src) {\\r\\n      virtualBalanceToAdd[src].set(virtualBalances.src.add(confirmed));\\r\\n    }\\r\\n\\r\\n    if(virtualBalances.dst != balances.dst) {\\r\\n      virtualBalanceToRemove[dst].set(virtualBalances.dst.sub(result));\\r\\n    }\\r\\n\\r\\n    // Update virtual balances to the opposite direction\\r\\n    virtualBalanceToRemove[src].update(_decayPeriod, balances.src);\\r\\n    virtualBalanceToAdd[dst].update(_decayPeriod, balances.dst);\\r\\n  }\\r\\n\\r\\n  function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees)\\r\\n    private \\r\\n  {\\r\\n    (\\r\\n      uint256 referralShare, \\r\\n      uint256 governanceShare, \\r\\n      address governanceWallet, \\r\\n      address feeCollector\\r\\n    ) = governanceFactory.getShareParameters(); \\r\\n\\r\\n    uint256 referralReward;\\r\\n    uint256 governanceReward;\\r\\n    uint256 invariantRatio = uint256(1e36);\\r\\n    invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\r\\n    invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\r\\n\\r\\n    if(invariantRatio > 1e36){\\r\\n      // calculate share only if invariant increased\\r\\n      invariantRatio = invariantRatio.sqrt();\\r\\n      uint256 invariantIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\r\\n      \\r\\n      referralReward = (referral != address(0)) ? invariantIncrease.mul(referralShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n      governanceReward = (governanceWallet != address(0)) ? invariantIncrease.mul(governanceShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n\\r\\n      if(feeCollector == address(0)) {\\r\\n        if(referralReward > 0) {\\r\\n          _mint(referral, referralReward);\\r\\n        }\\r\\n\\r\\n        if(governanceReward > 0) {\\r\\n          _mint(governanceWallet, governanceReward);\\r\\n        }\\r\\n      } else if(referralReward > 0 || governanceReward > 0) {\\r\\n        uint256 length = (referralReward > 0 ? 1 : 0) + (governanceReward > 0 ? 1 : 0);\\r\\n        address[] memory wallets = new address[](length);\\r\\n        uint256[] memory rewards = new uint256[](length);\\r\\n\\r\\n        wallets[0] = referral;\\r\\n        rewards[0] = referralReward;\\r\\n        if(governanceReward > 0) {\\r\\n          wallets[length - 1] = governanceWallet;\\r\\n          rewards[length - 1] = governanceReward;\\r\\n        }\\r\\n\\r\\n        try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\r\\n          _mint(feeCollector, referralReward.add(governanceReward));\\r\\n        } catch {\\r\\n          emit Error(\\\"Update Rewards Failed\\\");\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, referralReward, governanceReward);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    spot_ret = dx * y / x\\r\\n    uni_ret = dx * y / (x + dx)\\r\\n    slippage = (spot_ret - uni_ret) / spot_ret\\r\\n    slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\r\\n    slippage = dx / (x + dx)\\r\\n    ret = uni_ret * (1 - slip_fee * slippage)\\r\\n    ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\r\\n    ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\r\\n\\r\\n    x = amount * denominator\\r\\n    dx = amount * (denominator - fee)\\r\\n   */\\r\\n  function _getQuote(\\r\\n    IERC20 src, \\r\\n    IERC20 dst,\\r\\n    uint256 amount,\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(src > dst){\\r\\n      (src, dst) = (dst, src);\\r\\n    }\\r\\n\\r\\n    if(amount > 0 && src == token0 && dst == token1) {\\r\\n      uint256 taxedAmount = amount.sub(amount.mul(fee).div(SwapConstants._FEE_DENOMINATOR));\\r\\n      uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\r\\n      uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\r\\n      uint256 feeNumerator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\r\\n      uint256 feeDenominator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\r\\n\\r\\n      return ret.mul(feeNumerator).div(feeDenominator);\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /** Allows contract owner to withdraw funds that was send to contract by mistake */\\r\\n  function rescueFunds(IERC20 token, uint256 amount)\\r\\n    external\\r\\n    nonReentrant\\r\\n    onlyOwner\\r\\n  {\\r\\n    uint256 balance0 = token0.getBalanceOf(address(this));\\r\\n    uint256 balance1 = token1.getBalanceOf(address(this));\\r\\n\\r\\n    token.fadTransfer(payable(msg.sender), amount);\\r\\n    require(token0.getBalanceOf(address(this)) >= balance0, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(token1.getBalanceOf(address(this)) >= balance1, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0x462612014e6755069fbea373af77255b4c5ad266274973aebbfff5c8d3b1114b\",\"license\":\"MIT\"},\"contracts/SwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IPoolCreator.sol\\\";\\r\\nimport \\\"./interfaces/ISwapFactory.sol\\\";\\r\\nimport \\\"./lib/FADERC20.sol\\\";\\r\\nimport \\\"./Swap.sol\\\";\\r\\nimport \\\"./governance/GovernanceFactory.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* contract for maintaining tokens whitelist\\r\\n*/\\r\\ncontract SwapFactory is ISwapFactory, GovernanceFactory {\\r\\n  using FADERC20 for IERC20;\\r\\n\\r\\n  event Deployed(\\r\\n    Swap indexed swap,\\r\\n    IERC20 indexed token1,\\r\\n    IERC20 indexed token2\\r\\n  );\\r\\n\\r\\n  IPoolCreator public immutable poolCreator;\\r\\n  address public immutable poolOwner;\\r\\n  Swap[] public allPools;\\r\\n  mapping(Swap => bool) public override isPool; \\r\\n  mapping(IERC20 => mapping(IERC20 => Swap)) private _pools; \\r\\n\\r\\n  constructor(address _poolOwner, IPoolCreator _poolCreator, address _governanceMothership)\\r\\n    GovernanceFactory(_governanceMothership)\\r\\n  {\\r\\n    poolOwner = _poolOwner;\\r\\n    poolCreator = _poolCreator;\\r\\n  }\\r\\n\\r\\n  function getAllPools() external view returns(Swap[] memory)\\r\\n  {\\r\\n    return allPools;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc ISwapFactory\\r\\n  function pools(IERC20 tokenA, IERC20 tokenB) external view override returns(Swap pool)\\r\\n  {\\r\\n    (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\r\\n    return _pools[token1][token2];\\r\\n  }\\r\\n\\r\\n  function deploy(\\r\\n    IERC20 tokenA,\\r\\n    IERC20 tokenB\\r\\n  )\\r\\n    public returns(Swap pool)\\r\\n  {\\r\\n    require(tokenA != tokenB, \\\"SwapFactory: Duplicate Tokens\\\");\\r\\n    (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\r\\n    require(_pools[token1][token2] == Swap(address(0)), \\\"SwapFactory: Pool Already Exists\\\");\\r\\n\\r\\n    string memory symbole1 = token1.getSymbol();\\r\\n    string memory symbole2 = token2.getSymbol();\\r\\n\\r\\n    pool = poolCreator.deploy(\\r\\n      token1, \\r\\n      token2, \\r\\n      string(abi.encodePacked(\\\"Liquidity Pool (\\\", symbole1, \\\"-\\\", symbole2, \\\")\\\")), \\r\\n      string(abi.encodePacked(symbole1, \\\"-\\\", symbole2, \\\"-LP\\\")), \\r\\n      poolOwner\\r\\n    );\\r\\n\\r\\n    _pools[token1][token2] = pool;\\r\\n    allPools.push(pool);\\r\\n    isPool[pool] = true;\\r\\n\\r\\n    emit Deployed(pool, token1, token2);\\r\\n  }\\r\\n\\r\\n  function sortTokens(IERC20 token1, IERC20 token2) public pure returns(IERC20, IERC20)\\r\\n  {\\r\\n    if(token1 < token2) {\\r\\n      return (token1, token2);\\r\\n    }\\r\\n\\r\\n    return (token2, token1);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6edc30932f3178d5af7ae14d5eb19a502bbc1f294dff97a3fbacde45cc008df5\",\"license\":\"MIT\"},\"contracts/governance/BaseGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../interfaces/IGovernance.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* Base governance contract with notification logics\\r\\n*/\\r\\nabstract contract BaseGovernance is IGovernance {\\r\\n  address public immutable mothership;\\r\\n\\r\\n  modifier onlyMothership {\\r\\n    require(msg.sender == mothership, \\\"Access Restricted To Mothership\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _mothership) {\\r\\n    mothership = _mothership;\\r\\n  }\\r\\n\\r\\n\\r\\n  function updateStakeChanged(address account, uint256 newBalance) external override onlyMothership\\r\\n  {\\r\\n    _updateStakeChanged(account, newBalance);\\r\\n  }\\r\\n\\r\\n  function updateStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) \\r\\n    external\\r\\n    override \\r\\n    onlyMothership\\r\\n  {\\r\\n    require(accounts.length == newBalances.length, \\\"Array Length Invalid\\\");\\r\\n    for(uint256 i = 0; i < accounts.length; i++) {\\r\\n      _updateStakeChanged(accounts[i], newBalances[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _updateStakeChanged(address account, uint256 newBalance) internal virtual; \\r\\n}\",\"keccak256\":\"0x9f1b7eb25e48e921614e15634bc888d34d2add67605458a532f3bf2fe5096490\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IGovernanceFactory.sol\\\";\\r\\nimport \\\"../lib/LiquidVoting.sol\\\";\\r\\nimport \\\"../lib/SwapConstants.sol\\\";\\r\\nimport \\\"../lib/SafeCast.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* Swap governance\\r\\n*/\\r\\nabstract contract Governance is ERC20, Ownable, ReentrancyGuard {\\r\\n  using Vote for Vote.Data;\\r\\n  using LiquidVoting for LiquidVoting.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event FeeVoteUpdated(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\r\\n  event SlippageFeeVoteUpdated(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\r\\n  event DecayPeriodUpdated(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\r\\n\\r\\n  IGovernanceFactory public governanceFactory; \\r\\n  LiquidVoting.Data private _fee;\\r\\n  LiquidVoting.Data private _slippageFee;\\r\\n  LiquidVoting.Data private _decayPeriod;\\r\\n\\r\\n  constructor(IGovernanceFactory _governanceFactory)\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    _fee.data.result = _governanceFactory.getDefaultFee().toUint104();\\r\\n    _slippageFee.data.result = _governanceFactory.getDefaultSlippageFee().toUint104();\\r\\n    _decayPeriod.data.result = _governanceFactory.getDefaultDecayPeriod().toUint104();\\r\\n  }\\r\\n\\r\\n  function setGovernanceFactory(IGovernanceFactory _governanceFactory)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    this.discardFeeVote();\\r\\n    this.discardSlippageFeeVote();\\r\\n    this.discardDecayPeriodVote();\\r\\n  }\\r\\n\\r\\n  /** Return the current fee */\\r\\n  function getFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current slippage fee */\\r\\n  function getSlippageFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current decay period */\\r\\n  function getDecayPeriod()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.data.result;\\r\\n  }\\r\\n\\r\\n  function getVirtualFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualSlippageFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualDecayPeriod()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred fee */\\r\\n  function getUserFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.votes[user].get(governanceFactory.getDefaultFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred slippage fee */\\r\\n  function getUserSlippageFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.votes[user].get(governanceFactory.getDefaultSlippageFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred decay period */\\r\\n  function getUserDecayPeriodVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.votes[user].get(governanceFactory.getDefaultDecayPeriod());\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for fee */\\r\\n  function voteFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_FEE, \\\"Fee Vote Is Too High\\\");\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for slippage fee */\\r\\n  function voteSlippageFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage Fee Vote Is Too High\\\");\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for decay period */\\r\\n  function voteDecayPeriod(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_DECAY_PERIOD, \\\"Decay Period Vote Is Too High\\\");\\r\\n    require(vote >= SwapConstants._MIN_DECAY_PERIOD, \\\"Decay Period Vote Is Too Low\\\");\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for fee */\\r\\n  function discardFeeVote() external\\r\\n  {\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for slippage fee */\\r\\n  function discardSlippageFeeVote() external\\r\\n  {\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for decay period */\\r\\n  function discardDecayPeriodVote() external\\r\\n  {\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _emitVoteFeeUpdate(address user, uint256 fee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit FeeVoteUpdated(user, fee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteSlippageFeeUpdate(address user, uint256 slippageFee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit SlippageFeeVoteUpdated(user, slippageFee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteDecayPeriodUpdate(address user, uint256 decayPeriod, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DecayPeriodUpdated(user, decayPeriod, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n  {\\r\\n    if(from == to) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    IGovernanceFactory _governanceFactory = governanceFactory;\\r\\n    bool updateFrom = !(from == address(0) || _governanceFactory.isFeeCollector(from));\\r\\n    bool updateTo = !(to == address(0) || _governanceFactory.isFeeCollector(to));\\r\\n\\r\\n    if(!updateFrom && !updateTo) {\\r\\n      // mint to feeReceiver or burn from feeReceiver\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\r\\n    uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\r\\n    uint256 newTotalSupply = totalSupply()\\r\\n                              .add(from == address(0) ? amount : 0)\\r\\n                              .sub(to == address(0) ? amount : 0);\\r\\n\\r\\n    ParamsHelper memory params = ParamsHelper({\\r\\n      from: from,\\r\\n      to: to,\\r\\n      updateFrom: updateFrom,\\r\\n      updateTo: updateTo,\\r\\n      amount: amount,\\r\\n      balanceFrom: balanceFrom,\\r\\n      balanceTo: balanceTo,\\r\\n      newTotalSupply: newTotalSupply\\r\\n    });\\r\\n\\r\\n    (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _governanceFactory.defaults();\\r\\n\\r\\n    _updateOntransfer(params, defaultFee, _emitVoteFeeUpdate, _fee);\\r\\n    _updateOntransfer(params, defaultSlippageFee, _emitVoteSlippageFeeUpdate, _slippageFee);\\r\\n    _updateOntransfer(params, defaultDecayPeriod, _emitVoteDecayPeriodUpdate, _decayPeriod);\\r\\n  }\\r\\n\\r\\n  struct ParamsHelper {\\r\\n    address from;\\r\\n    address to;\\r\\n    bool updateFrom;\\r\\n    bool updateTo;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFrom;\\r\\n    uint256 balanceTo;\\r\\n    uint256 newTotalSupply;\\r\\n  }\\r\\n\\r\\n  function _updateOntransfer(\\r\\n    ParamsHelper memory params, \\r\\n    uint256 defaultValue,\\r\\n    function(address, uint256, bool, uint256) internal emitEvent,\\r\\n    LiquidVoting.Data storage votingData\\r\\n  ) private\\r\\n  {\\r\\n    Vote.Data memory voteFrom = votingData.votes[params.from];\\r\\n    Vote.Data memory voteTo = votingData.votes[params.to];\\r\\n    if(voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\r\\n      emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\r\\n      emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if(params.updateFrom) {\\r\\n      votingData.updateBalance(\\r\\n        params.from, \\r\\n        voteFrom, \\r\\n        params.balanceFrom, \\r\\n        params.balanceFrom.sub(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(params.updateTo) {\\r\\n      votingData.updateBalance(\\r\\n        params.to, \\r\\n        voteTo, \\r\\n        params.balanceTo, \\r\\n        params.balanceTo.add(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x72bc135f490c84cd356503165038a42c829306eee41559c83fcab630ef592ade\",\"license\":\"MIT\"},\"contracts/governance/GovernanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"../interfaces/IGovernanceFactory.sol\\\";\\r\\nimport \\\"../lib/ExplicitLiquidVoting.sol\\\";\\r\\nimport \\\"../lib/SwapConstants.sol\\\";\\r\\nimport \\\"../lib/SafeCast.sol\\\";\\r\\nimport \\\"../helpers/BalanceHelper.sol\\\";\\r\\nimport \\\"./BaseGovernance.sol\\\";\\r\\n/*\\r\\n* Swap Governance Factory\\r\\n*/\\r\\ncontract GovernanceFactory is IGovernanceFactory, BaseGovernance, BalanceHelper, Ownable, Pausable {\\r\\n  using Vote for Vote.Data;\\r\\n  using ExplicitLiquidVoting for ExplicitLiquidVoting.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  event DefaultFeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\r\\n  event DefaultSlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\r\\n  event DefaultDecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\r\\n  event ReferralShareVoteUpdate(address indexed user, uint256 referralShare, bool isDefault, uint256 amount);\\r\\n  event GovernanceShareVoteUpdate(address indexed user, uint256 governanceShare, bool isDefault, uint256 amount);\\r\\n  event GovernanceWalletUpdate(address governanceWallet);\\r\\n  event FeeCollectorUpdate(address feeCollector);\\r\\n\\r\\n  ExplicitLiquidVoting.Data private _defaultFee;\\r\\n  ExplicitLiquidVoting.Data private _defaultSlippageFee;\\r\\n  ExplicitLiquidVoting.Data private _defaultDecayPeriod;\\r\\n  ExplicitLiquidVoting.Data private _referralShare;\\r\\n  ExplicitLiquidVoting.Data private _governanceShare;\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  address public override governanceWallet;\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  address public override feeCollector;\\r\\n\\r\\n  mapping(address => bool) public override isFeeCollector;\\r\\n\\r\\n  constructor(address _mothership) BaseGovernance(_mothership)\\r\\n  {\\r\\n    _defaultFee.data.result = SwapConstants._DEFAULT_FEE.toUint104();\\r\\n    _defaultSlippageFee.data.result = SwapConstants._DEFAULT_SLIPPAGE_FEE.toUint104();\\r\\n    _defaultDecayPeriod.data.result = SwapConstants._DEFAULT_DECAY_PERIOD.toUint104();\\r\\n    _referralShare.data.result = SwapConstants._DEFAULT_REFERRAL_SHARE.toUint104();\\r\\n    _governanceShare.data.result = SwapConstants._DEFAULT_GOVERNANCE_SHARE.toUint104();\\r\\n  }\\r\\n\\r\\n  function shutdown() external onlyOwner\\r\\n  {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function isActive()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(bool)\\r\\n  {\\r\\n    return !paused();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getShareParameters()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256, uint256, address, address)\\r\\n  {\\r\\n    return (_referralShare.data.current(), _governanceShare.data.current(), governanceWallet, feeCollector);\\r\\n  }  \\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function defaults()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256, uint256, uint256)\\r\\n  {\\r\\n    return (_defaultFee.data.current(), _defaultSlippageFee.data.current(), _defaultDecayPeriod.data.current());\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _defaultFee.data.current();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _defaultSlippageFee.data.current();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _defaultDecayPeriod.data.current();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getVirtualDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_defaultFee.data.oldResult, _defaultFee.data.result, _defaultFee.data.time);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getVirtualDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_defaultSlippageFee.data.oldResult, _defaultSlippageFee.data.result, _defaultSlippageFee.data.time);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getVirtualDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_defaultDecayPeriod.data.oldResult, _defaultDecayPeriod.data.result, _defaultDecayPeriod.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualReferralShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_referralShare.data.oldResult, _referralShare.data.result, _referralShare.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_governanceShare.data.oldResult, _governanceShare.data.result, _governanceShare.data.time);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getReferralShare()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _referralShare.data.current();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IGovernanceFactory\\r\\n  function getGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    override\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _governanceShare.data.current();\\r\\n  }\\r\\n\\r\\n  function getDefaultFeeVotes(address user) external view returns(uint256)\\r\\n  {\\r\\n    return _defaultFee.votes[user].get(SwapConstants._DEFAULT_FEE);\\r\\n  }\\r\\n\\r\\n  function getDefaultSlippageFeeVotes(address user) external view returns(uint256)\\r\\n  {\\r\\n    return _defaultSlippageFee.votes[user].get(SwapConstants._DEFAULT_SLIPPAGE_FEE);\\r\\n  }\\r\\n\\r\\n  function getDefaultDecayPeriodVotes(address user) external view returns(uint256)\\r\\n  {\\r\\n    return _defaultDecayPeriod.votes[user].get(SwapConstants._DEFAULT_DECAY_PERIOD);\\r\\n  }\\r\\n\\r\\n  function getReferralShareVotes(address user) external view returns(uint256)\\r\\n  {\\r\\n    return _referralShare.votes[user].get(SwapConstants._DEFAULT_REFERRAL_SHARE);\\r\\n  }\\r\\n\\r\\n  function getGovernanceShareVotes(address user) external view returns(uint256)\\r\\n  {\\r\\n    return _governanceShare.votes[user].get(SwapConstants._DEFAULT_GOVERNANCE_SHARE);\\r\\n  }\\r\\n\\r\\n  function setGovernanceWallet(address _governanceWallet) external onlyOwner\\r\\n  {\\r\\n    governanceWallet = _governanceWallet;\\r\\n    emit GovernanceWalletUpdate(_governanceWallet);\\r\\n  }\\r\\n\\r\\n  function setFeeCollector(address _feeCollector) external onlyOwner\\r\\n  {\\r\\n    feeCollector = _feeCollector;\\r\\n    isFeeCollector[_feeCollector] = true;\\r\\n    emit FeeCollectorUpdate(_feeCollector);\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for fee */\\r\\n  function defaultVoteFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_FEE, \\\"Fee Vote Is Too High\\\");\\r\\n    _defaultFee.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_FEE, \\r\\n      _emitDefaultVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for fee */\\r\\n  function discardDefaultFeeVote() external\\r\\n  {\\r\\n    _defaultFee.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_FEE,\\r\\n      _emitDefaultVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for slippage fee */\\r\\n  function defaultVoteSlippageFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage Fee Vote Is Too High\\\");\\r\\n    _defaultSlippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultSlippageFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_SLIPPAGE_FEE, \\r\\n      _emitDefaultVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for slippage fee */\\r\\n  function discardDefaultSlippageFeeVote() external\\r\\n  {\\r\\n    _defaultSlippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultSlippageFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_SLIPPAGE_FEE, \\r\\n      _emitDefaultVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for decay period */\\r\\n  function defaultVoteDecayPeriod(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_DECAY_PERIOD, \\\"Decay Period Vote Is Too High\\\");\\r\\n    require(vote >= SwapConstants._MIN_DECAY_PERIOD, \\\"Decay Period Vote Is Too Low\\\");\\r\\n    _defaultDecayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultDecayPeriod.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_DECAY_PERIOD, \\r\\n      _emitDefaultVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for decay period */\\r\\n  function discardDefaultDecayPeriodVote() external\\r\\n  {\\r\\n    _defaultDecayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _defaultDecayPeriod.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_DECAY_PERIOD, \\r\\n      _emitDefaultVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for referral share */\\r\\n  function voteReferralShare(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SHARE, \\\"Referral Share Vote Is Too High\\\");\\r\\n    require(vote >= SwapConstants._MIN_REFERRAL_SHARE, \\\"Referral Share Vote Is Too Low\\\");\\r\\n    _referralShare.updateVote(\\r\\n      msg.sender, \\r\\n      _referralShare.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_REFERRAL_SHARE,\\r\\n      _emitVoteReferralShareUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for referral share */\\r\\n  function discardReferralShareVote() external\\r\\n  {\\r\\n    _referralShare.updateVote(\\r\\n      msg.sender, \\r\\n      _referralShare.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_REFERRAL_SHARE,\\r\\n      _emitVoteReferralShareUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for governance share */\\r\\n  function voteGovernanceShare(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SHARE, \\\"Governance Share Vote Too High\\\");\\r\\n    _governanceShare.updateVote(\\r\\n      msg.sender, \\r\\n      _governanceShare.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_GOVERNANCE_SHARE,\\r\\n      _emitVoteGovernanceShareUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for governance share */\\r\\n  function discardGovernanceShareVote() external\\r\\n  {\\r\\n    _governanceShare.updateVote(\\r\\n      msg.sender, \\r\\n      _governanceShare.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      SwapConstants._DEFAULT_GOVERNANCE_SHARE,\\r\\n      _emitVoteGovernanceShareUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _updateStakeChanged(address account, uint256 newBalance) internal override\\r\\n  {\\r\\n    uint256 balance = _set(account, newBalance);\\r\\n    if(newBalance == balance){\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    _defaultFee.updateBalance(\\r\\n      account, \\r\\n      _defaultFee.votes[account], \\r\\n      balance, \\r\\n      newBalance, \\r\\n      SwapConstants._DEFAULT_FEE,\\r\\n      _emitDefaultVoteFeeUpdate\\r\\n    );\\r\\n\\r\\n    _defaultSlippageFee.updateBalance(\\r\\n      account, \\r\\n      _defaultSlippageFee.votes[account], \\r\\n      balance, \\r\\n      newBalance, \\r\\n      SwapConstants._DEFAULT_SLIPPAGE_FEE,\\r\\n      _emitDefaultVoteSlippageFeeUpdate\\r\\n    );\\r\\n\\r\\n    _defaultDecayPeriod.updateBalance(\\r\\n      account, \\r\\n      _defaultDecayPeriod.votes[account], \\r\\n      balance, \\r\\n      newBalance, \\r\\n      SwapConstants._DEFAULT_DECAY_PERIOD,\\r\\n      _emitDefaultVoteDecayPeriodUpdate\\r\\n    );\\r\\n\\r\\n    _referralShare.updateBalance(\\r\\n      account, \\r\\n      _referralShare.votes[account], \\r\\n      balance, \\r\\n      newBalance, \\r\\n      SwapConstants._DEFAULT_REFERRAL_SHARE,\\r\\n      _emitVoteReferralShareUpdate\\r\\n    );\\r\\n\\r\\n    _governanceShare.updateBalance(\\r\\n      account, \\r\\n      _governanceShare.votes[account], \\r\\n      balance, \\r\\n      newBalance, \\r\\n      SwapConstants._DEFAULT_GOVERNANCE_SHARE,\\r\\n      _emitVoteGovernanceShareUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _emitDefaultVoteFeeUpdate(address user, uint256 fee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DefaultFeeVoteUpdate(user, fee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitDefaultVoteSlippageFeeUpdate(address user, uint256 slippageFee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DefaultSlippageFeeVoteUpdate(user, slippageFee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitDefaultVoteDecayPeriodUpdate(address user, uint256 decayPeriod, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DefaultDecayPeriodVoteUpdate(user, decayPeriod, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteReferralShareUpdate(address user, uint256 referralShare, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit ReferralShareVoteUpdate(user, referralShare, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteGovernanceShareUpdate(address user, uint256 governanceShare, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit GovernanceShareVoteUpdate(user, governanceShare, isDefault, amount);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x0b0b3e5b350aaca472dfad29114bbcd757e7131e0ce21b3cab3db698df19364e\",\"license\":\"MIT\"},\"contracts/helpers/BalanceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/*\\r\\n* Provides helper methods for token-like contracts\\r\\n*/\\r\\ncontract BalanceHelper {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  function totalSupply()\\r\\n    public \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account)\\r\\n    public \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) \\r\\n    internal\\r\\n    virtual\\r\\n  {\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) \\r\\n    internal\\r\\n    virtual\\r\\n  {\\r\\n    _balances[account] = _balances[account].sub(amount , \\\"Burn amount exceeds balance\\\");\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n  }\\r\\n\\r\\n  function _set(address account, uint256 amount)\\r\\n    internal\\r\\n    virtual\\r\\n    returns(uint256 oldAmount)\\r\\n  {\\r\\n    oldAmount = _balances[account];\\r\\n    if(oldAmount != amount){\\r\\n      _balances[account] = amount;\\r\\n      _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x01e0059bad336f1bd68c51ec7597c5b8b0e9acf52851a6664832b6624aa45b43\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IFeeCollector {\\r\\n  \\r\\n  /** Adds specified `amount` as reward to `receiver` */\\r\\n  function updateReward(address receiver, uint256 amount) external;\\r\\n\\r\\n  function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\r\\n}\",\"keccak256\":\"0x8d092bc45bc47f16fa3a0a7bc0dd93039ed4cf5bc95008bc236f09236b2ccf9a\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IGovernance {\\r\\n  function updateStakeChanged(address account, uint256 newBalance) external;\\r\\n  function updateStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external;\\r\\n}\",\"keccak256\":\"0x4c9c35767de3566066e0ee14115b249abc05542401dce2d78f56c5895e4a1365\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/** Describes methods that provide all the information about current governance contract state */\\r\\ninterface IGovernanceFactory {\\r\\n  \\r\\n  /** Returns information about mooniswap shares */\\r\\n  function getShareParameters()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, address, address);\\r\\n\\r\\n    /** Initial settings that contract was created */\\r\\n    function defaults()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, uint256);\\r\\n\\r\\n    /** Returns the value of default fee */\\r\\n    function getDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default slippage fee */\\r\\n    function getDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default decay period */\\r\\n    function getDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns previous default fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default slippage fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default decay period that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns the value of referral share */\\r\\n    function getReferralShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance share */\\r\\n    function getGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance wallet address */\\r\\n    function governanceWallet()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Returns the value of fee collector wallet address */\\r\\n    function feeCollector()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Whether the address is current fee collector or was in the past. */\\r\\n    function isFeeCollector(address)\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n\\r\\n    /** Whether the contract is currently working and wasn't stopped. */\\r\\n    function isActive()\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n}\",\"keccak256\":\"0x6d1e8a8b87f0ee7cce4f297f20f5473247f5f3ee9dd5862d0205745f5121f276\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../Swap.sol\\\";\\r\\n\\r\\n/** deploying token pair pools */\\r\\ninterface IPoolCreator {\\r\\n\\r\\n  function deploy(\\r\\n    IERC20 token1,\\r\\n    IERC20 token2,\\r\\n    string calldata name,\\r\\n    string calldata symbol,\\r\\n    address poolOwner\\r\\n  )\\r\\n  external returns(Swap pool);\\r\\n}\",\"keccak256\":\"0x15a9114cae551c99bb7eab649521fede67bfbae8d13b450df6c19b64b5ce62cb\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../Swap.sol\\\";\\r\\n\\r\\ninterface ISwapFactory is IGovernanceFactory{\\r\\n  \\r\\n  /** Returns a pool for tokens pair. \\r\\n  * Zero address result means that pool doesn't exist yet \\r\\n  */\\r\\n  function pools(IERC20 token0, IERC20 token1) external view returns(Swap);\\r\\n\\r\\n  /** If address is currently listed as a swap pool. Otherwise, false */\\r\\n  function isPool(Swap swap) external view returns(bool);\\r\\n}\",\"keccak256\":\"0xdea88578a57de43db5edfdd552ad4e650c59d1f1b1a2668d6677470e307108e5\",\"license\":\"MIT\"},\"contracts/lib/ExplicitLiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\nimport \\\"./VirtualVote.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\n\\r\\nlibrary ExplicitLiquidVoting {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using Vote for Vote.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n\\r\\n  struct Data {\\r\\n    VirtualVote.Data data;\\r\\n    uint256 weightedSum;\\r\\n    uint256 votedSupply;\\r\\n    mapping(address => Vote.Data) votes;\\r\\n  }\\r\\n\\r\\n  function updateVote(\\r\\n    ExplicitLiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 balance,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newVote, balance, balance, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function updateBalance(\\r\\n    ExplicitLiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function _update(\\r\\n    ExplicitLiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    uint256 oldWeightedSum = self.weightedSum;\\r\\n    uint256 newWeightedSum = oldWeightedSum;\\r\\n    uint256 oldVotedSupply = self.votedSupply;\\r\\n    uint256 newVotedSupply = oldVotedSupply;\\r\\n\\r\\n    if(!oldVote.isDefault()) {\\r\\n      newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\r\\n      newVotedSupply = newVotedSupply.sub(oldBalance);\\r\\n    }\\r\\n\\r\\n    if(!newVote.isDefault()) {\\r\\n      newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\r\\n      newVotedSupply = newVotedSupply.add(newBalance);\\r\\n    }\\r\\n\\r\\n    if(newWeightedSum != oldWeightedSum){\\r\\n      self.weightedSum = newWeightedSum;\\r\\n    }\\r\\n\\r\\n    if(newVotedSupply != oldVotedSupply){\\r\\n      self.votedSupply = newVotedSupply;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint256 newResult = newVotedSupply == 0 ? defaultVote : newWeightedSum.div(newVotedSupply);\\r\\n      VirtualVote.Data memory data = self.data;\\r\\n      if(newResult != data.result){\\r\\n        VirtualVote.Data memory sdata = self.data;\\r\\n        (sdata.oldResult, sdata.result, sdata.time) = (\\r\\n          data.current().toUint104(),\\r\\n          newResult.toUint104(),\\r\\n          block.timestamp.toUint48()\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(!newVote.eq(oldVote)){\\r\\n      self.votes[user] = newVote;\\r\\n    }\\r\\n\\r\\n    emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf97507ca2c4ddeacf86a0403523c34c1afdb5066d270ff147b69b4f9646cb195\",\"license\":\"MIT\"},\"contracts/lib/FADERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary FADERC20 {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  function isBNB(IERC20 token)\\r\\n    internal\\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return address(token) == address(0);\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(IERC20 token, address account)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return account.balance;\\r\\n    } else {\\r\\n      return token.balanceOf(account);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransfer(IERC20 token, address payable to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        to.transfer(amount);\\r\\n      } else {\\r\\n        token.safeTransfer(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        require(msg.value >= amount, \\\"Value Is not Enough\\\");\\r\\n        require(from == msg.sender, \\\"From Is Not The Sender\\\");\\r\\n        require(to == address(this), \\\"To Is Not this\\\");\\r\\n        if(msg.value > amount) {\\r\\n          //Return the remaining to user\\r\\n          from.transfer(msg.value.sub(amount));\\r\\n        }\\r\\n      } else {\\r\\n        token.safeTransferFrom(from, to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSymbol(IERC20 token)\\r\\n    internal\\r\\n    view\\r\\n    returns(string memory)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return \\\"BNB\\\";\\r\\n    }\\r\\n\\r\\n    (bool success, bytes memory data) = address(token).staticcall{ gas: 20000}(\\r\\n      abi.encodeWithSignature(\\\"symbol()\\\")\\r\\n    );\\r\\n\\r\\n    if(!success){\\r\\n      (success, data) =  address(token).staticcall{ gas: 20000}(\\r\\n        abi.encodeWithSignature(\\\"SYMBOL()\\\")\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(success && data.length >= 96) {\\r\\n      (uint256 offset, uint256 length) = abi.decode(data, (uint256, uint256));\\r\\n      if(offset == 0x20 && length > 0 && length <= 256) {\\r\\n        return string(abi.decode(data, (bytes)));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(success && data.length == 32) {\\r\\n      uint length = 0;\\r\\n      while (length < data.length && data[length] >= 0x20 && data[length] <= 0x7E) {\\r\\n        length++;\\r\\n      }\\r\\n\\r\\n      if(length > 0) {\\r\\n        bytes memory result = new bytes(length);\\r\\n        for(uint i = 0; i < length; i++) {\\r\\n          result[i] = data[i];\\r\\n        }\\r\\n        return string(result);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _toHex(address(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(address token)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    return _toHex(abi.encodePacked(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(bytes memory data)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    bytes memory str = new bytes(2 + data.length * 2);\\r\\n    str[0] = \\\"0\\\";\\r\\n    str[1] = \\\"x\\\";\\r\\n    uint j = 2;\\r\\n    for(uint i = 0; i < data.length; i++) {\\r\\n      uint a = uint8(data[i]) >> 4;\\r\\n      uint b = uint8(data[i]) & 0x0f;\\r\\n      str[j++] = bytes1(uint8(a + 48 + (a/10) * 39));\\r\\n      str[j++] = bytes1(uint8(b + 48 + (b/10) * 39));\\r\\n    }\\r\\n\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x4968b4d5b8a96234d531300e80fc0113d3f9dc4c4ea21f58652eafcc62b08002\",\"license\":\"MIT\"},\"contracts/lib/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\nimport \\\"./VirtualVote.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LiquidVoting {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using Vote for Vote.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n\\r\\n  struct Data {\\r\\n    VirtualVote.Data data;\\r\\n    uint256 weightedSum;\\r\\n    uint256 defaultVote;\\r\\n    mapping(address => Vote.Data) votes;\\r\\n  }\\r\\n\\r\\n  function updateVote(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 balance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function updateBalance(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 newTotalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function _update(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    uint256 oldWeightedSum = self.weightedSum;\\r\\n    uint256 newWeightedSum = oldWeightedSum;\\r\\n    uint256 oldDefaultVote = self.defaultVote;\\r\\n    uint256 newDefaultVote = oldDefaultVote;\\r\\n\\r\\n    if(oldVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.sub(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.add(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newWeightedSum != oldWeightedSum){\\r\\n      self.weightedSum = newWeightedSum;\\r\\n    }\\r\\n\\r\\n    if(newDefaultVote != oldDefaultVote){\\r\\n      self.defaultVote = newDefaultVote;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint256 newResult = totalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVote.mul(defaultVote)).div(totalSupply);\\r\\n      VirtualVote.Data memory data = self.data;\\r\\n      if(newResult != data.result){\\r\\n        VirtualVote.Data memory sdata = self.data;\\r\\n        (sdata.oldResult, sdata.result, sdata.time) = (\\r\\n          data.current().toUint104(),\\r\\n          newResult.toUint104(),\\r\\n          block.timestamp.toUint48()\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(!newVote.eq(oldVote)){\\r\\n      self.votes[user] = newVote;\\r\\n    }\\r\\n\\r\\n    emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6c1e8033140a7fc304e5868ce3c04d79cb24a0e27ed5553f0223fa11805cb683\",\"license\":\"MIT\"},\"contracts/lib/SQRT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SQRT {\\r\\n  \\r\\n  /** https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method */\\r\\n  function sqrt(uint256 y) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(y > 3) {\\r\\n      uint256 z = y;\\r\\n      uint256 x = y / 2 + 1;\\r\\n      while(x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n      return z;\\r\\n    } else if (y != 0){\\r\\n      return 1;\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x37f51446a8f9a8bf3616717d0e8504c750ab43c9ea34a9e38ac66366959af49c\",\"license\":\"MIT\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeCast {\\r\\n  \\r\\n  function toUint216(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint216)\\r\\n  {\\r\\n    require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\r\\n    return uint216(value);\\r\\n  }\\r\\n\\r\\n  function toUint104(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint104)\\r\\n  {\\r\\n    require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\r\\n    return uint104(value);\\r\\n  }\\r\\n\\r\\n  function toUint48(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint48)\\r\\n  {\\r\\n    require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\r\\n    return uint48(value);\\r\\n  }\\r\\n\\r\\n  function toUint40(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint40)\\r\\n  {\\r\\n    require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\r\\n    return uint40(value);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x817ead41a088c9cbc8080e3345811c39c12936e487e5916f37f51a66bfe09ba9\",\"license\":\"MIT\"},\"contracts/lib/SwapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SwapConstants {\\r\\n  \\r\\n  uint256 internal constant _FEE_DENOMINATOR = 1e18;\\r\\n\\r\\n  uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\r\\n  uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n  uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\r\\n  uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\r\\n\\r\\n  uint256 internal constant _DEFAULT_FEE = 0;\\r\\n  uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\r\\n  uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n}\",\"keccak256\":\"0x816802904c9252c8881b9bba8a9003e9b8881a5b04b1f0a3c34e65c242285938\",\"license\":\"MIT\"},\"contracts/lib/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\n\\r\\nlibrary VirtualBalance {\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  struct Data {\\r\\n    uint216 balance;\\r\\n    uint40 time;\\r\\n  }\\r\\n\\r\\n  function set(VirtualBalance.Data storage self, uint256 balance) internal {\\r\\n    (self.balance, self.time) = (\\r\\n      balance.toUint216(),\\r\\n      block.timestamp.toUint40()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance));\\r\\n  }\\r\\n\\r\\n  function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\r\\n  }\\r\\n\\r\\n  function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = decayPeriod.sub(timePassed);\\r\\n    return uint256(self.balance).mul(timeRemain).add(\\r\\n      realBalance.mul(timePassed)\\r\\n    ).div(decayPeriod);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa56c85c352aad2400a9ff7074acace2bed5cada591801e9fd026020c6317556f\",\"license\":\"MIT\"},\"contracts/lib/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary VirtualVote {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint104 oldResult;\\r\\n    uint104 result;\\r\\n    uint48 time;\\r\\n  }\\r\\n\\r\\n  function current(VirtualVote.Data memory self) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\r\\n    return uint256(self.oldResult).mul(timeRemain).add(\\r\\n      uint256(self.result).mul(timePassed)\\r\\n    ).div(_VOTE_DECAY_PERIOD);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x17dfd686239b10ee0b2fec2086cdbaa2365b841bfde0498025c6d2970f76d48c\",\"license\":\"MIT\"},\"contracts/lib/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary Vote {\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  function eq(Vote.Data memory self, Vote.Data memory vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == vote.value;\\r\\n  }\\r\\n\\r\\n  function init() \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: 0\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function init(uint256 vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: vote + 1\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function isDefault(Data memory self) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == 0;\\r\\n  }\\r\\n\\r\\n  function get(Data memory self, uint256 defaultVote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVote; \\r\\n  }\\r\\n\\r\\n  function get(Data memory self, function () external view returns(uint256) defaultVoteFn) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVoteFn();\\r\\n    \\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x9aebbc5fa7099113f837929b5c8221c0c8c7370fc04bcb2ddb43b45fe65fffe7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002f5038038062002f5083398101604081905262000034916200028d565b606081901b6001600160601b031916608052806200005233620001dd565b6002805460ff60a01b191690556200007760006200022f602090811b620018b617901c565b6003600001600001600d6101000a8154816001600160681b0302191690836001600160681b03160217905550620000c1670de0b6b3a76400006200022f60201b620018b61760201c565b6007600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000104603c6200022f60201b620018b61760201c565b600b600001600001600d6101000a8154816001600160681b0302191690836001600160681b031602179055506200014e67016345785d8a00006200022f60201b620018b61760201c565b600f600001600001600d6101000a8154816001600160681b0302191690836001600160681b031602179055506200019160006200022f60201b620018b61760201c565b601380546001600160681b0392909216600160681b02600160681b600160d01b031990921691909117905550506001600160601b0319606092831b811660c052911b1660a052620002f9565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000600160681b8210620002895760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015260640160405180910390fd5b5090565b600080600060608486031215620002a2578283fd5b8351620002af81620002e0565b6020850151909350620002c281620002e0565b6040850151909250620002d581620002e0565b809150509250925092565b6001600160a01b0381168114620002f657600080fd5b50565b60805160601c60a05160601c60c05160601c612c026200034e600039600081816106fb0152610d240152600081816106d40152610caf01526000818161044d01528181610f6001526111f90152612c026000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c8063709893301161019d578063a42dce80116100e9578063d322d0f9116100a2578063e7ab4ac81161007c578063e7ab4ac814610773578063edb7a6fa146107a1578063f2fde38b146107c4578063fc0e74d1146107d757600080fd5b8063d322d0f91461071d578063d88ff1f414610730578063e1594b241461074557600080fd5b8063a42dce801461068e578063b975d0bb146106a1578063c16efeee146106a9578063c415b95c146106bc578063c6c1decd146106cf578063cf0b2270146106f657600080fd5b8063804d93fd116101565780638da5cb5b116101305780638da5cb5b1461064f5780638f53ecfe14610660578063901754d7146106735780639386e8b21461068657600080fd5b8063804d93fd1461062c578063855559341461063f5780638d4241271461064757600080fd5b8063709893301461059f57806370a08231146105b2578063715018a6146105db578063716d3ab9146105e357806375359a77146105eb5780637ac8c1c4146105fe57600080fd5b80634187b7d61161025c57806355727c4b116102155780635c975abb116101ef5780635c975abb1461055f5780635daac19214610571578063607c219f14610584578063612a9f761461059757600080fd5b806355727c4b146104fb57806358e90300146105295780635b16ebb71461053c57600080fd5b80634187b7d61461044857806341d1de9714610487578063442aa6c71461049a57806352feddde146104a2578063544caa56146104b5578063545e7c61146104e857600080fd5b806321bacf28116102ae57806321bacf28146103ac57806322f3e2d4146103b457806323a65ab6146103d357806324ea90341461040a5780633b90b9bf1461041d5780633eed75c31461044057600080fd5b80630462d658146102f65780630cbd9de9146103535780630d10085b146103745780630d3b4ea814610387578063151359b41461039a57806318160ddd146103a4575b600080fd5b6013546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060015b60405180910390f35b61036661036136600461271c565b6107df565b60405190815260200161034a565b61036661038236600461271c565b610815565b61036661039536600461271c565b610846565b6103a2610876565b005b600054610366565b6103666108cf565b600254600160a01b900460ff16155b604051901515815260200161034a565b6103db61091d565b6040805194855260208501939093526001600160a01b039182169284019290925216606082015260800161034a565b6103a26104183660046128c9565b6109d3565b6103c361042b36600461271c565b60196020526000908152604090205460ff1681565b6103a2610a56565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161034a565b61046f6104953660046128c9565b610ab6565b610366610ae0565b6103666104b036600461271c565b610b29565b6104c86104c3366004612875565b610b61565b604080516001600160a01b0393841681529290911660208301520161034a565b61046f6104f6366004612875565b610b95565b6003546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6103a26105373660046128c9565b610e79565b6103c361054a36600461271c565b601b6020526000908152604090205460ff1681565b600254600160a01b900460ff166103c3565b6103a261057f366004612763565b610f55565b6103a261059236600461271c565b61109b565b6103a261111a565b60175461046f906001600160a01b031681565b6103666105c036600461271c565b6001600160a01b031660009081526001602052604090205490565b6103a2611171565b6103666111a5565b6103a26105f9366004612738565b6111ee565b600b546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6103a261063a3660046128c9565b611274565b6103a2611364565b6103a26113a1565b6002546001600160a01b031661046f565b61036661066e36600461271c565b611401565b61046f610681366004612875565b611439565b610366611478565b6103a261069c36600461271c565b6114c1565b610366611553565b6103a26106b73660046128c9565b61159c565b60185461046f906001600160a01b031681565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6103a261072b3660046128c9565b611621565b6107386116a6565b60405161034a91906129fe565b600f546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6007546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6107a9611708565b6040805193845260208401929092529082015260600161034a565b6103a26107d236600461271c565b6117ec565b6103a2611884565b6001600160a01b0381166000908152600660209081526040808320815192830190915254815261080f908261190f565b92915050565b6001600160a01b0381166000908152600e60209081526040808320815192830190915254815261080f90603c61190f565b6001600160a01b0381166000908152601660209081526040808320815192830190915254815261080f908261190f565b33600081815260066020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040812054600394939291611934611988565b565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b905090565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009081908190819061096c906119a1565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff16918101919091526109b2906119a1565b60175460185492979196506001600160a01b03908116955090911692509050565b662386f26fc10000811115610a265760405162461bcd60e51b815260206004820152601460248201527308ccaca40acdee8ca4092e640a8dede4090d2ced60631b60448201526064015b60405180910390fd5b33600081815260066020908152604091829020825191820190925290548152610a5391906108af84611a35565b50565b33600081815260126020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040902054600f9392919067016345785d8a0000611a64611988565b601a8181548110610ac657600080fd5b6000918252602090912001546001600160a01b0316905081565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b6001600160a01b0381166000908152600a60209081526040808320815192830190915254815261080f90670de0b6b3a764000061190f565b600080826001600160a01b0316846001600160a01b03161015610b88575082905081610b8e565b50819050825b9250929050565b6000816001600160a01b0316836001600160a01b03161415610bf95760405162461bcd60e51b815260206004820152601d60248201527f53776170466163746f72793a204475706c696361746520546f6b656e730000006044820152606401610a1d565b600080610c068585610b61565b6001600160a01b038083166000908152601c6020908152604080832084861684529091529020549294509092501615610c815760405162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a20506f6f6c20416c7265616479204578697374736044820152606401610a1d565b6000610c95836001600160a01b0316611aae565b90506000610cab836001600160a01b0316611aae565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b92440b085858585604051602001610cf1929190612998565b6040516020818303038152906040528686604051602001610d1392919061294c565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401610d63959493929190612a4b565b602060405180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db591906128ad565b6001600160a01b038086166000818152601c6020908152604080832089861680855290835281842080549688166001600160a01b03199788168117909155601a805460018181019092557f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180549098168217909755808552601b909352818420805460ff19169096179095555194995092939192917fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b81780829190a45050505092915050565b67016345785d8a0000811115610ed15760405162461bcd60e51b815260206004820152601f60248201527f526566657272616c20536861726520566f746520497320546f6f2048696768006044820152606401610a1d565b66b1a2bc2ec50000811015610f285760405162461bcd60e51b815260206004820152601e60248201527f526566657272616c20536861726520566f746520497320546f6f204c6f7700006044820152606401610a1d565b33600081815260126020908152604091829020825191820190925290548152610a539190610a8f84611a35565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcd5760405162461bcd60e51b815260206004820152601f60248201527f416363657373205265737472696374656420546f204d6f7468657273686970006044820152606401610a1d565b8281146110135760405162461bcd60e51b8152602060048201526014602482015273105c9c985e4813195b99dd1a08125b9d985b1a5960621b6044820152606401610a1d565b60005b838110156110945761108285858381811061104157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611056919061271c565b84848481811061107657634e487b7160e01b600052603260045260246000fd5b90506020020135611e0b565b8061108c81612b70565b915050611016565b5050505050565b6002546001600160a01b031633146110c55760405162461bcd60e51b8152600401610a1d90612a9d565b601780546001600160a01b0319166001600160a01b0383169081179091556040519081527fe348b7d1d8572de16c7301317890112a52bd7f6c3b713bd7d70e4cffb489ed9f906020015b60405180910390a150565b33600081815260166020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040812054601394939291611f66611988565b6002546001600160a01b0316331461119b5760405162461bcd60e51b8152600401610a1d90612a9d565b6108cd6000611fb0565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112665760405162461bcd60e51b815260206004820152601f60248201527f416363657373205265737472696374656420546f204d6f7468657273686970006044820152606401610a1d565b6112708282611e0b565b5050565b61012c8111156112c65760405162461bcd60e51b815260206004820152601d60248201527f446563617920506572696f6420566f746520497320546f6f20486967680000006044820152606401610a1d565b603c8110156113175760405162461bcd60e51b815260206004820152601c60248201527f446563617920506572696f6420566f746520497320546f6f204c6f77000000006044820152606401610a1d565b336000818152600e6020908152604091829020825191820190925290548152610a53919061134484611a35565b33600090815260016020526040902054600b93929190603c612002611988565b336000818152600e6020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd929190611344565b336000818152600a6020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040902054600793929190670de0b6b3a764000061204c611988565b6001600160a01b0381166000908152601260209081526040808320815192830190915254815261080f9067016345785d8a000061190f565b60008060006114488585610b61565b6001600160a01b039182166000908152601c60209081526040808320938516835292905220541695945050505050565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b6002546001600160a01b031633146114eb5760405162461bcd60e51b8152600401610a1d90612a9d565b601880546001600160a01b0319166001600160a01b038316908117909155600081815260196020908152604091829020805460ff1916600117905590519182527ffa7dc4914c53d1cee4cf31f857b016d55f8c6d28d5f950e64c7258a4fa18de19910161110f565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b670de0b6b3a76400008111156115f45760405162461bcd60e51b815260206004820152601d60248201527f536c6970706167652046656520566f746520497320546f6f20486967680000006044820152606401610a1d565b336000818152600a6020908152604091829020825191820190925290548152610a5391906113da84611a35565b67016345785d8a00008111156116795760405162461bcd60e51b815260206004820152601e60248201527f476f7665726e616e636520536861726520566f746520546f6f204869676800006044820152606401610a1d565b33600081815260166020908152604091829020825191820190925290548152610a53919061115384611a35565b6060601a8054806020026020016040519081016040528092919081815260200182805480156116fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116e0575b5050505050905090565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009081908190611755906119a1565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915261179b906119a1565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff16918101919091526117e1906119a1565b925092509250909192565b6002546001600160a01b031633146118165760405162461bcd60e51b8152600401610a1d90612a9d565b6001600160a01b03811661187b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a1d565b610a5381611fb0565b6002546001600160a01b031633146118ae5760405162461bcd60e51b8152600401610a1d90612a9d565b6108cd612096565b6000600160681b821061190b5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610a1d565b5090565b81516000901561192e57825161192790600190612b29565b905061080f565b50919050565b6040805184815283151560208201529081018290526001600160a01b038516907f28eed64d01e23014333abef902958309592b3cf9ce9da390f224467cfcaaf5b2906060015b60405180910390a250505050565b611998878787878788888861213b565b50505050505050565b6000806119cf620151806119ca856040015165ffffffffffff164261230890919063ffffffff16565b61231b565b905060006119e06201518083612308565b9050611a2d62015180611a27611a0c8588602001516001600160681b031661233190919063ffffffff16565b8751611a21906001600160681b031686612331565b9061233d565b90612349565b949350505050565b6040805160208101909152600081526040518060200160405280836001611a5c9190612ad2565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907ffa67c3ef5d30b2838a61d783cb71a076e17984d05840f2dfa1521135df49557b9060600161197a565b60606001600160a01b038216611add57505060408051808201909152600381526221272160e91b602082015290565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160009182916001600160a01b03861691614e2091611b259190612930565b6000604051808303818686fa925050503d8060008114611b61576040519150601f19603f3d011682016040523d82523d6000602084013e611b66565b606091505b509150915081611bfb5760408051600481526024810182526020810180516001600160e01b0316631eedf1af60e31b17905290516001600160a01b03861691614e2091611bb39190612930565b6000604051808303818686fa925050503d8060008114611bef576040519150601f19603f3d011682016040523d82523d6000602084013e611bf4565b606091505b5090925090505b818015611c0a57506060815110155b15611c6e5760008082806020019051810190611c2691906128e1565b91509150816020148015611c3a5750600081115b8015611c4857506101008111155b15611c6b5782806020019051810190611c6191906127cc565b9695505050505050565b50505b818015611c7c575080516020145b15611e025760005b815181108015611cc65750602060f81b828281518110611cb457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191610155b8015611d045750607e60f81b828281518110611cf257634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191611155b15611d1b5780611d1381612b70565b915050611c84565b8015611e005760008167ffffffffffffffff811115611d4a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d74576020820181803683370190505b50905060005b82811015611df657838181518110611da257634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b828281518110611dcd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611dee81612b70565b915050611d7a565b5095945050505050565b505b611a2d84612355565b6000611e17838361238d565b905080821415611e2657505050565b6001600160a01b03831660009081526006602090815260408083208151928301909152548152611e61916003918691859087906119346123e8565b6001600160a01b0383166000908152600a6020908152604091829020825191820190925290548152611ea59060079085908486670de0b6b3a764000061204c6123e8565b6001600160a01b0383166000908152600e6020908152604091829020825191820190925290548152611ee290600b9085908486603c6120026123e8565b6001600160a01b038316600090815260126020908152604091829020825191820190925290548152611f2690600f908590848667016345785d8a0000611a646123e8565b6001600160a01b03831660009081526016602090815260408083208151928301909152548152611f6191601391869185908790611f666123e8565b505050565b6040805184815283151560208201529081018290526001600160a01b038516907f02540a8a88261967ef1c1a4ed50fde9f0a0a493922c069129e21961198e1b4399060600161197a565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805184815283151560208201529081018290526001600160a01b038516907f2d2d732aa884d37295a1b5995321d502ebc228d25e644eef0a435d4e5f245acd9060600161197a565b6040805184815283151560208201529081018290526001600160a01b038516907f214419d1bacc9564ca0fcf6552dad3ec0aa54c97de900de89dc202e6bbd9198a9060600161197a565b600254600160a01b900460ff16156120e35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a1d565b6002805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861211e3390565b6040516001600160a01b03909116815260200160405180910390a1565b600188015460028901548190806121518a511590565b6121825761217361216c6121658c8961190f565b8a90612331565b8490612308565b925061217f8189612308565b90505b8851156121b6576121a76121a06121998b8961190f565b8990612331565b849061233d565b92506121b3818861233d565b90505b8383146121c55760018c018390555b8181146121d45760028c018190555b600081156121eb576121e68483612349565b6121ed565b865b604080516060810182528f546001600160681b038082168352600160681b82041660208301819052600160d01b90910465ffffffffffff169282019290925291925082146122b557604080516060810182528f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915261228261227d836119a1565b6118b6565b61228b846118b6565b6122944261241f565b65ffffffffffff1660408401526001600160681b0390811660208401521690525b505089518951146122df576001600160a01b038b16600090815260038d0160205260409020895190555b6122fa8b6122ed8b8961190f565b8b51158a8963ffffffff16565b505050505050505050505050565b60006123148284612b29565b9392505050565b600081831061232a5781612314565b5090919050565b60006123148284612b0a565b60006123148284612ad2565b60006123148284612aea565b604051606082811b6bffffffffffffffffffffffff191660208301529061080f90603401604051602081830303815290604052612477565b6001600160a01b03821660009081526001602052604090205481811461080f576001600160a01b0383166000908152600160205260408120839055546123df9082906123d9908561233d565b90612308565b60005592915050565b61199887878786156123fa5788612416565b6040805160208082018352600091829052825190810190925281525b8888888861213b565b60006601000000000000821061190b5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610a1d565b60606000825160026124899190612b0a565b612494906002612ad2565b67ffffffffffffffff8111156124ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124e4576020820181803683370190505b509050600360fc1b8160008151811061250d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061254a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600260005b84518110156126d0576000600486838151811061259357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16901c60ff16905060008683815181106125cd57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c600f1690506125e6600a83612aea565b6125f1906027612b0a565b6125fc836030612ad2565b6126069190612ad2565b60f81b858561261481612b70565b96508151811061263457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612656600a82612aea565b612661906027612b0a565b61266c826030612ad2565b6126769190612ad2565b60f81b858561268481612b70565b9650815181106126a457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350505080806126c890612b70565b915050612566565b50909392505050565b60008083601f8401126126ea578081fd5b50813567ffffffffffffffff811115612701578182fd5b6020830191508360208260051b8501011115610b8e57600080fd5b60006020828403121561272d578081fd5b813561231481612bb7565b6000806040838503121561274a578081fd5b823561275581612bb7565b946020939093013593505050565b60008060008060408587031215612778578182fd5b843567ffffffffffffffff8082111561278f578384fd5b61279b888389016126d9565b909650945060208701359150808211156127b3578384fd5b506127c0878288016126d9565b95989497509550505050565b6000602082840312156127dd578081fd5b815167ffffffffffffffff808211156127f4578283fd5b818401915084601f830112612807578283fd5b81518181111561281957612819612ba1565b604051601f8201601f19908116603f0116810190838211818310171561284157612841612ba1565b81604052828152876020848701011115612859578586fd5b61286a836020830160208801612b40565b979650505050505050565b60008060408385031215612887578182fd5b823561289281612bb7565b915060208301356128a281612bb7565b809150509250929050565b6000602082840312156128be578081fd5b815161231481612bb7565b6000602082840312156128da578081fd5b5035919050565b600080604083850312156128f3578182fd5b505080516020909101519092909150565b6000815180845261291c816020860160208601612b40565b601f01601f19169290920160200192915050565b60008251612942818460208701612b40565b9190910192915050565b6000835161295e818460208801612b40565b602d60f81b908301908152835161297c816001840160208801612b40565b6202d4c560ec1b60019290910191820152600401949350505050565b6f098d2e2ead2c8d2e8f240a0deded840560831b8152600083516129c3816010850160208801612b40565b602d60f81b60109184019182015283516129e4816011840160208801612b40565b602960f81b60119290910191820152601201949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612a3f5783516001600160a01b031683529284019291840191600101612a1a565b50909695505050505050565b600060018060a01b038088168352808716602084015260a06040840152612a7560a0840187612904565b8381036060850152612a878187612904565b9250508084166080840152509695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612ae557612ae5612b8b565b500190565b600082612b0557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2457612b24612b8b565b500290565b600082821015612b3b57612b3b612b8b565b500390565b60005b83811015612b5b578181015183820152602001612b43565b83811115612b6a576000848401525b50505050565b6000600019821415612b8457612b84612b8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a5357600080fdfea26469706673582212205bd54d9e694c8c670fc5a394335a807ad0f8a83678899f3183f3459efdf5156464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c8063709893301161019d578063a42dce80116100e9578063d322d0f9116100a2578063e7ab4ac81161007c578063e7ab4ac814610773578063edb7a6fa146107a1578063f2fde38b146107c4578063fc0e74d1146107d757600080fd5b8063d322d0f91461071d578063d88ff1f414610730578063e1594b241461074557600080fd5b8063a42dce801461068e578063b975d0bb146106a1578063c16efeee146106a9578063c415b95c146106bc578063c6c1decd146106cf578063cf0b2270146106f657600080fd5b8063804d93fd116101565780638da5cb5b116101305780638da5cb5b1461064f5780638f53ecfe14610660578063901754d7146106735780639386e8b21461068657600080fd5b8063804d93fd1461062c578063855559341461063f5780638d4241271461064757600080fd5b8063709893301461059f57806370a08231146105b2578063715018a6146105db578063716d3ab9146105e357806375359a77146105eb5780637ac8c1c4146105fe57600080fd5b80634187b7d61161025c57806355727c4b116102155780635c975abb116101ef5780635c975abb1461055f5780635daac19214610571578063607c219f14610584578063612a9f761461059757600080fd5b806355727c4b146104fb57806358e90300146105295780635b16ebb71461053c57600080fd5b80634187b7d61461044857806341d1de9714610487578063442aa6c71461049a57806352feddde146104a2578063544caa56146104b5578063545e7c61146104e857600080fd5b806321bacf28116102ae57806321bacf28146103ac57806322f3e2d4146103b457806323a65ab6146103d357806324ea90341461040a5780633b90b9bf1461041d5780633eed75c31461044057600080fd5b80630462d658146102f65780630cbd9de9146103535780630d10085b146103745780630d3b4ea814610387578063151359b41461039a57806318160ddd146103a4575b600080fd5b6013546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060015b60405180910390f35b61036661036136600461271c565b6107df565b60405190815260200161034a565b61036661038236600461271c565b610815565b61036661039536600461271c565b610846565b6103a2610876565b005b600054610366565b6103666108cf565b600254600160a01b900460ff16155b604051901515815260200161034a565b6103db61091d565b6040805194855260208501939093526001600160a01b039182169284019290925216606082015260800161034a565b6103a26104183660046128c9565b6109d3565b6103c361042b36600461271c565b60196020526000908152604090205460ff1681565b6103a2610a56565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161034a565b61046f6104953660046128c9565b610ab6565b610366610ae0565b6103666104b036600461271c565b610b29565b6104c86104c3366004612875565b610b61565b604080516001600160a01b0393841681529290911660208301520161034a565b61046f6104f6366004612875565b610b95565b6003546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6103a26105373660046128c9565b610e79565b6103c361054a36600461271c565b601b6020526000908152604090205460ff1681565b600254600160a01b900460ff166103c3565b6103a261057f366004612763565b610f55565b6103a261059236600461271c565b61109b565b6103a261111a565b60175461046f906001600160a01b031681565b6103666105c036600461271c565b6001600160a01b031660009081526001602052604090205490565b6103a2611171565b6103666111a5565b6103a26105f9366004612738565b6111ee565b600b546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6103a261063a3660046128c9565b611274565b6103a2611364565b6103a26113a1565b6002546001600160a01b031661046f565b61036661066e36600461271c565b611401565b61046f610681366004612875565b611439565b610366611478565b6103a261069c36600461271c565b6114c1565b610366611553565b6103a26106b73660046128c9565b61159c565b60185461046f906001600160a01b031681565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6103a261072b3660046128c9565b611621565b6107386116a6565b60405161034a91906129fe565b600f546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6007546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610320565b6107a9611708565b6040805193845260208401929092529082015260600161034a565b6103a26107d236600461271c565b6117ec565b6103a2611884565b6001600160a01b0381166000908152600660209081526040808320815192830190915254815261080f908261190f565b92915050565b6001600160a01b0381166000908152600e60209081526040808320815192830190915254815261080f90603c61190f565b6001600160a01b0381166000908152601660209081526040808320815192830190915254815261080f908261190f565b33600081815260066020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040812054600394939291611934611988565b565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b905090565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009081908190819061096c906119a1565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff16918101919091526109b2906119a1565b60175460185492979196506001600160a01b03908116955090911692509050565b662386f26fc10000811115610a265760405162461bcd60e51b815260206004820152601460248201527308ccaca40acdee8ca4092e640a8dede4090d2ced60631b60448201526064015b60405180910390fd5b33600081815260066020908152604091829020825191820190925290548152610a5391906108af84611a35565b50565b33600081815260126020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040902054600f9392919067016345785d8a0000611a64611988565b601a8181548110610ac657600080fd5b6000918252602090912001546001600160a01b0316905081565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b6001600160a01b0381166000908152600a60209081526040808320815192830190915254815261080f90670de0b6b3a764000061190f565b600080826001600160a01b0316846001600160a01b03161015610b88575082905081610b8e565b50819050825b9250929050565b6000816001600160a01b0316836001600160a01b03161415610bf95760405162461bcd60e51b815260206004820152601d60248201527f53776170466163746f72793a204475706c696361746520546f6b656e730000006044820152606401610a1d565b600080610c068585610b61565b6001600160a01b038083166000908152601c6020908152604080832084861684529091529020549294509092501615610c815760405162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a20506f6f6c20416c7265616479204578697374736044820152606401610a1d565b6000610c95836001600160a01b0316611aae565b90506000610cab836001600160a01b0316611aae565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b92440b085858585604051602001610cf1929190612998565b6040516020818303038152906040528686604051602001610d1392919061294c565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401610d63959493929190612a4b565b602060405180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db591906128ad565b6001600160a01b038086166000818152601c6020908152604080832089861680855290835281842080549688166001600160a01b03199788168117909155601a805460018181019092557f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180549098168217909755808552601b909352818420805460ff19169096179095555194995092939192917fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b81780829190a45050505092915050565b67016345785d8a0000811115610ed15760405162461bcd60e51b815260206004820152601f60248201527f526566657272616c20536861726520566f746520497320546f6f2048696768006044820152606401610a1d565b66b1a2bc2ec50000811015610f285760405162461bcd60e51b815260206004820152601e60248201527f526566657272616c20536861726520566f746520497320546f6f204c6f7700006044820152606401610a1d565b33600081815260126020908152604091829020825191820190925290548152610a539190610a8f84611a35565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcd5760405162461bcd60e51b815260206004820152601f60248201527f416363657373205265737472696374656420546f204d6f7468657273686970006044820152606401610a1d565b8281146110135760405162461bcd60e51b8152602060048201526014602482015273105c9c985e4813195b99dd1a08125b9d985b1a5960621b6044820152606401610a1d565b60005b838110156110945761108285858381811061104157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611056919061271c565b84848481811061107657634e487b7160e01b600052603260045260246000fd5b90506020020135611e0b565b8061108c81612b70565b915050611016565b5050505050565b6002546001600160a01b031633146110c55760405162461bcd60e51b8152600401610a1d90612a9d565b601780546001600160a01b0319166001600160a01b0383169081179091556040519081527fe348b7d1d8572de16c7301317890112a52bd7f6c3b713bd7d70e4cffb489ed9f906020015b60405180910390a150565b33600081815260166020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040812054601394939291611f66611988565b6002546001600160a01b0316331461119b5760405162461bcd60e51b8152600401610a1d90612a9d565b6108cd6000611fb0565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112665760405162461bcd60e51b815260206004820152601f60248201527f416363657373205265737472696374656420546f204d6f7468657273686970006044820152606401610a1d565b6112708282611e0b565b5050565b61012c8111156112c65760405162461bcd60e51b815260206004820152601d60248201527f446563617920506572696f6420566f746520497320546f6f20486967680000006044820152606401610a1d565b603c8110156113175760405162461bcd60e51b815260206004820152601c60248201527f446563617920506572696f6420566f746520497320546f6f204c6f77000000006044820152606401610a1d565b336000818152600e6020908152604091829020825191820190925290548152610a53919061134484611a35565b33600090815260016020526040902054600b93929190603c612002611988565b336000818152600e6020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd929190611344565b336000818152600a6020908152604080832081518084018352905481528151808401835284905281519283019091529181526108cd9291905b33600090815260016020526040902054600793929190670de0b6b3a764000061204c611988565b6001600160a01b0381166000908152601260209081526040808320815192830190915254815261080f9067016345785d8a000061190f565b60008060006114488585610b61565b6001600160a01b039182166000908152601c60209081526040808320938516835292905220541695945050505050565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b6002546001600160a01b031633146114eb5760405162461bcd60e51b8152600401610a1d90612a9d565b601880546001600160a01b0319166001600160a01b038316908117909155600081815260196020908152604091829020805460ff1916600117905590519182527ffa7dc4914c53d1cee4cf31f857b016d55f8c6d28d5f950e64c7258a4fa18de19910161110f565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610918906119a1565b670de0b6b3a76400008111156115f45760405162461bcd60e51b815260206004820152601d60248201527f536c6970706167652046656520566f746520497320546f6f20486967680000006044820152606401610a1d565b336000818152600a6020908152604091829020825191820190925290548152610a5391906113da84611a35565b67016345785d8a00008111156116795760405162461bcd60e51b815260206004820152601e60248201527f476f7665726e616e636520536861726520566f746520546f6f204869676800006044820152606401610a1d565b33600081815260166020908152604091829020825191820190925290548152610a53919061115384611a35565b6060601a8054806020026020016040519081016040528092919081815260200182805480156116fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116e0575b5050505050905090565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009081908190611755906119a1565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915261179b906119a1565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff16918101919091526117e1906119a1565b925092509250909192565b6002546001600160a01b031633146118165760405162461bcd60e51b8152600401610a1d90612a9d565b6001600160a01b03811661187b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a1d565b610a5381611fb0565b6002546001600160a01b031633146118ae5760405162461bcd60e51b8152600401610a1d90612a9d565b6108cd612096565b6000600160681b821061190b5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610a1d565b5090565b81516000901561192e57825161192790600190612b29565b905061080f565b50919050565b6040805184815283151560208201529081018290526001600160a01b038516907f28eed64d01e23014333abef902958309592b3cf9ce9da390f224467cfcaaf5b2906060015b60405180910390a250505050565b611998878787878788888861213b565b50505050505050565b6000806119cf620151806119ca856040015165ffffffffffff164261230890919063ffffffff16565b61231b565b905060006119e06201518083612308565b9050611a2d62015180611a27611a0c8588602001516001600160681b031661233190919063ffffffff16565b8751611a21906001600160681b031686612331565b9061233d565b90612349565b949350505050565b6040805160208101909152600081526040518060200160405280836001611a5c9190612ad2565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907ffa67c3ef5d30b2838a61d783cb71a076e17984d05840f2dfa1521135df49557b9060600161197a565b60606001600160a01b038216611add57505060408051808201909152600381526221272160e91b602082015290565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160009182916001600160a01b03861691614e2091611b259190612930565b6000604051808303818686fa925050503d8060008114611b61576040519150601f19603f3d011682016040523d82523d6000602084013e611b66565b606091505b509150915081611bfb5760408051600481526024810182526020810180516001600160e01b0316631eedf1af60e31b17905290516001600160a01b03861691614e2091611bb39190612930565b6000604051808303818686fa925050503d8060008114611bef576040519150601f19603f3d011682016040523d82523d6000602084013e611bf4565b606091505b5090925090505b818015611c0a57506060815110155b15611c6e5760008082806020019051810190611c2691906128e1565b91509150816020148015611c3a5750600081115b8015611c4857506101008111155b15611c6b5782806020019051810190611c6191906127cc565b9695505050505050565b50505b818015611c7c575080516020145b15611e025760005b815181108015611cc65750602060f81b828281518110611cb457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191610155b8015611d045750607e60f81b828281518110611cf257634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191611155b15611d1b5780611d1381612b70565b915050611c84565b8015611e005760008167ffffffffffffffff811115611d4a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d74576020820181803683370190505b50905060005b82811015611df657838181518110611da257634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b828281518110611dcd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611dee81612b70565b915050611d7a565b5095945050505050565b505b611a2d84612355565b6000611e17838361238d565b905080821415611e2657505050565b6001600160a01b03831660009081526006602090815260408083208151928301909152548152611e61916003918691859087906119346123e8565b6001600160a01b0383166000908152600a6020908152604091829020825191820190925290548152611ea59060079085908486670de0b6b3a764000061204c6123e8565b6001600160a01b0383166000908152600e6020908152604091829020825191820190925290548152611ee290600b9085908486603c6120026123e8565b6001600160a01b038316600090815260126020908152604091829020825191820190925290548152611f2690600f908590848667016345785d8a0000611a646123e8565b6001600160a01b03831660009081526016602090815260408083208151928301909152548152611f6191601391869185908790611f666123e8565b505050565b6040805184815283151560208201529081018290526001600160a01b038516907f02540a8a88261967ef1c1a4ed50fde9f0a0a493922c069129e21961198e1b4399060600161197a565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805184815283151560208201529081018290526001600160a01b038516907f2d2d732aa884d37295a1b5995321d502ebc228d25e644eef0a435d4e5f245acd9060600161197a565b6040805184815283151560208201529081018290526001600160a01b038516907f214419d1bacc9564ca0fcf6552dad3ec0aa54c97de900de89dc202e6bbd9198a9060600161197a565b600254600160a01b900460ff16156120e35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a1d565b6002805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861211e3390565b6040516001600160a01b03909116815260200160405180910390a1565b600188015460028901548190806121518a511590565b6121825761217361216c6121658c8961190f565b8a90612331565b8490612308565b925061217f8189612308565b90505b8851156121b6576121a76121a06121998b8961190f565b8990612331565b849061233d565b92506121b3818861233d565b90505b8383146121c55760018c018390555b8181146121d45760028c018190555b600081156121eb576121e68483612349565b6121ed565b865b604080516060810182528f546001600160681b038082168352600160681b82041660208301819052600160d01b90910465ffffffffffff169282019290925291925082146122b557604080516060810182528f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915261228261227d836119a1565b6118b6565b61228b846118b6565b6122944261241f565b65ffffffffffff1660408401526001600160681b0390811660208401521690525b505089518951146122df576001600160a01b038b16600090815260038d0160205260409020895190555b6122fa8b6122ed8b8961190f565b8b51158a8963ffffffff16565b505050505050505050505050565b60006123148284612b29565b9392505050565b600081831061232a5781612314565b5090919050565b60006123148284612b0a565b60006123148284612ad2565b60006123148284612aea565b604051606082811b6bffffffffffffffffffffffff191660208301529061080f90603401604051602081830303815290604052612477565b6001600160a01b03821660009081526001602052604090205481811461080f576001600160a01b0383166000908152600160205260408120839055546123df9082906123d9908561233d565b90612308565b60005592915050565b61199887878786156123fa5788612416565b6040805160208082018352600091829052825190810190925281525b8888888861213b565b60006601000000000000821061190b5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610a1d565b60606000825160026124899190612b0a565b612494906002612ad2565b67ffffffffffffffff8111156124ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124e4576020820181803683370190505b509050600360fc1b8160008151811061250d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061254a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600260005b84518110156126d0576000600486838151811061259357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16901c60ff16905060008683815181106125cd57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c600f1690506125e6600a83612aea565b6125f1906027612b0a565b6125fc836030612ad2565b6126069190612ad2565b60f81b858561261481612b70565b96508151811061263457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612656600a82612aea565b612661906027612b0a565b61266c826030612ad2565b6126769190612ad2565b60f81b858561268481612b70565b9650815181106126a457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350505080806126c890612b70565b915050612566565b50909392505050565b60008083601f8401126126ea578081fd5b50813567ffffffffffffffff811115612701578182fd5b6020830191508360208260051b8501011115610b8e57600080fd5b60006020828403121561272d578081fd5b813561231481612bb7565b6000806040838503121561274a578081fd5b823561275581612bb7565b946020939093013593505050565b60008060008060408587031215612778578182fd5b843567ffffffffffffffff8082111561278f578384fd5b61279b888389016126d9565b909650945060208701359150808211156127b3578384fd5b506127c0878288016126d9565b95989497509550505050565b6000602082840312156127dd578081fd5b815167ffffffffffffffff808211156127f4578283fd5b818401915084601f830112612807578283fd5b81518181111561281957612819612ba1565b604051601f8201601f19908116603f0116810190838211818310171561284157612841612ba1565b81604052828152876020848701011115612859578586fd5b61286a836020830160208801612b40565b979650505050505050565b60008060408385031215612887578182fd5b823561289281612bb7565b915060208301356128a281612bb7565b809150509250929050565b6000602082840312156128be578081fd5b815161231481612bb7565b6000602082840312156128da578081fd5b5035919050565b600080604083850312156128f3578182fd5b505080516020909101519092909150565b6000815180845261291c816020860160208601612b40565b601f01601f19169290920160200192915050565b60008251612942818460208701612b40565b9190910192915050565b6000835161295e818460208801612b40565b602d60f81b908301908152835161297c816001840160208801612b40565b6202d4c560ec1b60019290910191820152600401949350505050565b6f098d2e2ead2c8d2e8f240a0deded840560831b8152600083516129c3816010850160208801612b40565b602d60f81b60109184019182015283516129e4816011840160208801612b40565b602960f81b60119290910191820152601201949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612a3f5783516001600160a01b031683529284019291840191600101612a1a565b50909695505050505050565b600060018060a01b038088168352808716602084015260a06040840152612a7560a0840187612904565b8381036060850152612a878187612904565b9250508084166080840152509695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612ae557612ae5612b8b565b500190565b600082612b0557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2457612b24612b8b565b500290565b600082821015612b3b57612b3b612b8b565b500390565b60005b83811015612b5b578181015183820152602001612b43565b83811115612b6a576000848401525b50505050565b6000600019821415612b8457612b84612b8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a5357600080fdfea26469706673582212205bd54d9e694c8c670fc5a394335a807ad0f8a83678899f3183f3459efdf5156464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "defaultVoteDecayPeriod(uint256)": {
        "notice": "Records `msg.senders`'s vote for decay period "
      },
      "defaultVoteFee(uint256)": {
        "notice": "Records `msg.senders`'s vote for fee "
      },
      "defaultVoteSlippageFee(uint256)": {
        "notice": "Records `msg.senders`'s vote for slippage fee "
      },
      "defaults()": {
        "notice": "Initial settings that contract was created "
      },
      "discardDefaultDecayPeriodVote()": {
        "notice": "Retracts `msg.senders`'s vote for decay period "
      },
      "discardDefaultFeeVote()": {
        "notice": "Retracts `msg.senders`'s vote for fee "
      },
      "discardDefaultSlippageFeeVote()": {
        "notice": "Retracts `msg.senders`'s vote for slippage fee "
      },
      "discardGovernanceShareVote()": {
        "notice": "Retracts `msg.senders`'s vote for governance share "
      },
      "discardReferralShareVote()": {
        "notice": "Retracts `msg.senders`'s vote for referral share "
      },
      "feeCollector()": {
        "notice": "Returns the value of fee collector wallet address "
      },
      "getDefaultDecayPeriod()": {
        "notice": "Returns the value of default decay period "
      },
      "getDefaultFee()": {
        "notice": "Returns the value of default fee "
      },
      "getDefaultSlippageFee()": {
        "notice": "Returns the value of default slippage fee "
      },
      "getGovernanceShare()": {
        "notice": "Returns the value of governance share "
      },
      "getReferralShare()": {
        "notice": "Returns the value of referral share "
      },
      "getShareParameters()": {
        "notice": "Returns information about mooniswap shares "
      },
      "getVirtualDefaultDecayPeriod()": {
        "notice": "Returns previous default decay period that had place,  current one and time on which this changed "
      },
      "getVirtualDefaultFee()": {
        "notice": "Returns previous default fee that had place,  current one and time on which this changed "
      },
      "getVirtualDefaultSlippageFee()": {
        "notice": "Returns previous default slippage fee that had place,  current one and time on which this changed "
      },
      "governanceWallet()": {
        "notice": "Returns the value of governance wallet address "
      },
      "isActive()": {
        "notice": "Whether the contract is currently working and wasn't stopped. "
      },
      "isFeeCollector(address)": {
        "notice": "Whether the address is current fee collector or was in the past. "
      },
      "isPool(address)": {
        "notice": "If address is currently listed as a swap pool. Otherwise, false "
      },
      "pools(address,address)": {
        "notice": "Returns a pool for tokens pair.  Zero address result means that pool doesn't exist yet "
      },
      "voteGovernanceShare(uint256)": {
        "notice": "Records `msg.senders`'s vote for governance share "
      },
      "voteReferralShare(uint256)": {
        "notice": "Records `msg.senders`'s vote for referral share "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8998,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9002,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7210,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_defaultFee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)9998_storage"
      },
      {
        "astId": 7213,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_defaultSlippageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Data)9998_storage"
      },
      {
        "astId": 7216,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_defaultDecayPeriod",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Data)9998_storage"
      },
      {
        "astId": 7219,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_referralShare",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Data)9998_storage"
      },
      {
        "astId": 7222,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_governanceShare",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Data)9998_storage"
      },
      {
        "astId": 7226,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "governanceWallet",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 7230,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "feeCollector",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 7235,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "isFeeCollector",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4977,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_contract(Swap)4941)dyn_storage"
      },
      {
        "astId": 4983,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_contract(Swap)4941,t_bool)"
      },
      {
        "astId": 4992,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "_pools",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_contract(IERC20)902,t_mapping(t_contract(IERC20)902,t_contract(Swap)4941))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Swap)4941)dyn_storage": {
        "base": "t_contract(Swap)4941",
        "encoding": "dynamic_array",
        "label": "contract Swap[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)902": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Swap)4941": {
        "encoding": "inplace",
        "label": "contract Swap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Data)11542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)11542_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)902,t_contract(Swap)4941)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => contract Swap)",
        "numberOfBytes": "32",
        "value": "t_contract(Swap)4941"
      },
      "t_mapping(t_contract(IERC20)902,t_mapping(t_contract(IERC20)902,t_contract(Swap)4941))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => contract Swap))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)902,t_contract(Swap)4941)"
      },
      "t_mapping(t_contract(Swap)4941,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(Swap)4941",
        "label": "mapping(contract Swap => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Data)11482_storage": {
        "encoding": "inplace",
        "label": "struct VirtualVote.Data",
        "members": [
          {
            "astId": 11477,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "oldResult",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 11479,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "result",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 11481,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "time",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)11542_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 11541,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)9998_storage": {
        "encoding": "inplace",
        "label": "struct ExplicitLiquidVoting.Data",
        "members": [
          {
            "astId": 9988,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)11482_storage"
          },
          {
            "astId": 9990,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9992,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "votedSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9997,
            "contract": "contracts/SwapFactory.sol:SwapFactory",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)11542_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}