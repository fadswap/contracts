{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Swap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d343f6140534eaa54b03e0b8fa74fc1c3b39af3b1da226d732b4281f4bbb134",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "5062789",
    "logsBloom": "0x
    "blockHash": "0x80a4562694ac53330eaa5a99dae681ee4ae3a9755b03733a000f10ad227e1f13",
    "transactionHash": "0x1d343f6140534eaa54b03e0b8fa74fc1c3b39af3b1da226d732b4281f4bbb134",
    "logs": [],
    "blockNumber": 19,
    "cumulativeGasUsed": "5062789",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5c2e1cb50205ed71a0daeb9fe0a0c667",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Helper contract to deploy pools \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolCreator.sol\":\"PoolCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Swap.sol\\\";\\r\\n\\r\\n/** Helper contract to deploy pools */\\r\\ncontract PoolCreator {\\r\\n  \\r\\n  function deploy(\\r\\n    IERC20 token1,\\r\\n    IERC20 token2,\\r\\n    string calldata name,\\r\\n    string calldata symbol,\\r\\n    address poolOwner\\r\\n  ) external returns(Swap pool)\\r\\n  {\\r\\n    pool = new Swap(token1, token2, name, symbol, IGovernanceFactory(msg.sender));\\r\\n    pool.transferOwnership(poolOwner);\\r\\n  } \\r\\n}\",\"keccak256\":\"0x3830c78de28bcdda276e4ca0fdc32e1d52f4a6dfbe555cf7ee737e9b010828ab\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\r\\nimport \\\"./lib/FADERC20.sol\\\";\\r\\nimport \\\"./lib/SQRT.sol\\\";\\r\\nimport \\\"./lib/VirtualBalance.sol\\\";\\r\\nimport \\\"./governance/Governance.sol\\\";\\r\\n\\r\\ncontract Swap is Governance {\\r\\n  using SQRT for uint256;\\r\\n  using SafeMath for uint256;\\r\\n  using FADERC20 for IERC20;\\r\\n  using VirtualBalance for VirtualBalance.Data;\\r\\n\\r\\n  struct Balances {\\r\\n    uint256 src;\\r\\n    uint256 dst;\\r\\n  }\\r\\n\\r\\n  struct Volumes {\\r\\n    uint128 confirmed;\\r\\n    uint128 result;\\r\\n  }\\r\\n  \\r\\n  struct Fees {\\r\\n    uint256 fee;\\r\\n    uint256 slippageFee;\\r\\n  }\\r\\n\\r\\n  event Error(string reason);\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Withdrawn(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Swapped(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    address indexed srcToken,\\r\\n    address dstToken,\\r\\n    uint256 amount,\\r\\n    uint256 result,\\r\\n    uint256 srcBalanceAdded,\\r\\n    uint256 dstBalanceRemoved,\\r\\n    address referral\\r\\n  );\\r\\n\\r\\n  event Sync(\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee,\\r\\n    uint256 referralShare,\\r\\n    uint256 governanceShare\\r\\n  );\\r\\n\\r\\n  uint256 private constant _BASE_SUPPLY = 1000; // Total supply on first deposit\\r\\n\\r\\n  IERC20 public immutable token0;\\r\\n  IERC20 public immutable token1;\\r\\n  mapping(IERC20 => Volumes) public volumes;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToAdd;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToRemove;\\r\\n\\r\\n  modifier whenNotShutdown {\\r\\n    require(governanceFactory.isActive(), \\\"Swap: Factory Is Shutdown\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    IERC20 _token0,\\r\\n    IERC20 _token1,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    IGovernanceFactory _governanceFactory\\r\\n  ) \\r\\n    ERC20(name, symbol)\\r\\n    Governance(_governanceFactory)\\r\\n  {\\r\\n    require(bytes(name).length > 0, \\\"Swap: Name Is Empty\\\");\\r\\n    require(bytes(symbol).length > 0, \\\"Swap: Symbol Is Empty\\\");\\r\\n    require(_token0 != _token1, \\\"Swap: Two Tokens Is Same\\\");\\r\\n    token0 = _token0;\\r\\n    token1 = _token1;\\r\\n  }\\r\\n\\r\\n  /** Returns pair of tokens as [token0, token1] */\\r\\n  function getTokens()\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20[] memory tokens)\\r\\n  {\\r\\n    tokens = new IERC20[](2);\\r\\n    tokens[0] = token0;\\r\\n    tokens[1] = token1;\\r\\n  }\\r\\n\\r\\n  function getToken(uint256 position)\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20)\\r\\n  {\\r\\n    if(position == 0 ) {\\r\\n      return token0;\\r\\n    } else if(position == 1){\\r\\n      return token1;\\r\\n    } else {\\r\\n      revert(\\\"Swap: Pool Have Only Two Tokens\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getBalanceToAdd(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.max(virtualBalanceToAdd[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  function getBalanceToRemove(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.min(virtualBalanceToRemove[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  /** Returns how many `dst` tokens will be returned for `amount` of `src` tokens */\\r\\n  function getQuote(IERC20 src, IERC20 dst, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _getQuote(src, dst, amount, getBalanceToAdd(src), getBalanceToRemove(dst), getFee(), getSlippageFee());\\r\\n  }\\r\\n\\r\\n  function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    return depositFor(maxAmounts, minAmounts, msg.sender);\\r\\n  }\\r\\n\\r\\n  function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    require(msg.value == (_tokens[0].isBNB() ? maxAmounts[0] : (_tokens[1].isBNB() ? maxAmounts[1] : 0)), \\\"Swap: Wrong Value Usage\\\");\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    if(totalSupply == 0) {\\r\\n      fairSupply = _BASE_SUPPLY.mul(99);\\r\\n      _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\r\\n\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.max(fairSupply, maxAmounts[i]);\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        require(maxAmounts[i] >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), maxAmounts[i]);\\r\\n        receivedAmounts[i] = maxAmounts[i];\\r\\n      }\\r\\n    } else {\\r\\n      uint256[2] memory realBalances;\\r\\n      for(uint i = 0; i < realBalances.length; i++) {\\r\\n        realBalances[i] = _tokens[i].getBalanceOf(address(this)).sub(_tokens[i].isBNB() ? msg.value : 0);\\r\\n      }\\r\\n\\r\\n      fairSupply = type(uint256).max;\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 fairSupplyCached = fairSupply; \\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\r\\n        require(amount >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n        receivedAmounts[i] = _tokens[i].getBalanceOf(address(this)).sub(realBalances[i]);\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        virtualBalanceToRemove[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n        virtualBalanceToAdd[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n      }\\r\\n    }\\r\\n      \\r\\n    require(fairSupply > 0, \\\"Swap: Result Is Not Enough\\\");\\r\\n    _mint(target, fairSupply);\\r\\n\\r\\n    emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount, uint256[] memory minReturns)\\r\\n    external\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    return withdrawFor(amount, minReturns, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /** Withdraws funds from the liquidity pool */\\r\\n  function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target)\\r\\n    public\\r\\n    nonReentrant\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n    _burn(msg.sender, amount);\\r\\n\\r\\n    for(uint i = 0; i < _tokens.length; i++) {\\r\\n      IERC20 token = _tokens[i];\\r\\n      uint256 preBalance = token.getBalanceOf(address(this));\\r\\n      uint256 value = preBalance.mul(amount).div(totalSupply);\\r\\n      token.fadTransfer(target, value);\\r\\n      withdrawnAmounts[i] = value;\\r\\n      require(i >= minReturns.length || value >= minReturns[i], \\\"Swap: Result Is Not Enough\\\");\\r\\n      virtualBalanceToRemove[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n      virtualBalanceToAdd[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n    }\\r\\n\\r\\n    emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    return swapFor(src, dst, amount, minReturn, referral, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    whenNotShutdown\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    require(msg.value == (src.isBNB() ? amount : 0), \\\"Swap: Wrong Value\\\");\\r\\n    Balances memory balances = Balances({\\r\\n      src: src.getBalanceOf(address(this)).sub(src.isBNB() ? msg.value : 0),\\r\\n      dst: dst.getBalanceOf(address(this))\\r\\n    });\\r\\n\\r\\n    uint256 confirmed;\\r\\n    Balances memory virtualBalances;\\r\\n    Fees memory fees = Fees({\\r\\n      fee: getFee(),\\r\\n      slippageFee: getSlippageFee()\\r\\n    });\\r\\n\\r\\n    (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\r\\n    emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\r\\n    \\r\\n    _mintRewards(confirmed, result, referral, balances, fees);\\r\\n\\r\\n    // Overflow of uint128 is desired\\r\\n    volumes[src].confirmed += uint128(confirmed);\\r\\n    volumes[src].result += uint128(result);\\r\\n  }\\r\\n\\r\\n  function _doTransfers(\\r\\n    IERC20 src, \\r\\n    IERC20 dst, \\r\\n    uint256 amount, \\r\\n    uint256 minReturn, \\r\\n    address payable receiver,\\r\\n    Balances memory balances,\\r\\n    Fees memory fees\\r\\n  )\\r\\n    private\\r\\n    returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\r\\n  {\\r\\n    uint256 _decayPeriod = getDecayPeriod();\\r\\n    virtualBalances.src = virtualBalanceToAdd[src].current(_decayPeriod, balances.src);\\r\\n    virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\r\\n    virtualBalances.dst = virtualBalanceToRemove[dst].current(_decayPeriod, balances.dst);\\r\\n    virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\r\\n    src.fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n    confirmed = src.getBalanceOf(address(this)).sub(balances.src);\\r\\n    result = _getQuote(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\r\\n    require(result > 0 && result >= minReturn, \\\"Swap: Return Is Not Enough\\\");\\r\\n    dst.fadTransfer(receiver, result);\\r\\n\\r\\n    // Update virtual balances to the same direction only at imbalanced state\\r\\n    if(virtualBalances.src != balances.src) {\\r\\n      virtualBalanceToAdd[src].set(virtualBalances.src.add(confirmed));\\r\\n    }\\r\\n\\r\\n    if(virtualBalances.dst != balances.dst) {\\r\\n      virtualBalanceToRemove[dst].set(virtualBalances.dst.sub(result));\\r\\n    }\\r\\n\\r\\n    // Update virtual balances to the opposite direction\\r\\n    virtualBalanceToRemove[src].update(_decayPeriod, balances.src);\\r\\n    virtualBalanceToAdd[dst].update(_decayPeriod, balances.dst);\\r\\n  }\\r\\n\\r\\n  function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees)\\r\\n    private \\r\\n  {\\r\\n    (\\r\\n      uint256 referralShare, \\r\\n      uint256 governanceShare, \\r\\n      address governanceWallet, \\r\\n      address feeCollector\\r\\n    ) = governanceFactory.getShareParameters(); \\r\\n\\r\\n    uint256 referralReward;\\r\\n    uint256 governanceReward;\\r\\n    uint256 invariantRatio = uint256(1e36);\\r\\n    invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\r\\n    invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\r\\n\\r\\n    if(invariantRatio > 1e36){\\r\\n      // calculate share only if invariant increased\\r\\n      invariantRatio = invariantRatio.sqrt();\\r\\n      uint256 invariantIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\r\\n      \\r\\n      referralReward = (referral != address(0)) ? invariantIncrease.mul(referralShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n      governanceReward = (governanceWallet != address(0)) ? invariantIncrease.mul(governanceShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n\\r\\n      if(feeCollector == address(0)) {\\r\\n        if(referralReward > 0) {\\r\\n          _mint(referral, referralReward);\\r\\n        }\\r\\n\\r\\n        if(governanceReward > 0) {\\r\\n          _mint(governanceWallet, governanceReward);\\r\\n        }\\r\\n      } else if(referralReward > 0 || governanceReward > 0) {\\r\\n        uint256 length = (referralReward > 0 ? 1 : 0) + (governanceReward > 0 ? 1 : 0);\\r\\n        address[] memory wallets = new address[](length);\\r\\n        uint256[] memory rewards = new uint256[](length);\\r\\n\\r\\n        wallets[0] = referral;\\r\\n        rewards[0] = referralReward;\\r\\n        if(governanceReward > 0) {\\r\\n          wallets[length - 1] = governanceWallet;\\r\\n          rewards[length - 1] = governanceReward;\\r\\n        }\\r\\n\\r\\n        try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\r\\n          _mint(feeCollector, referralReward.add(governanceReward));\\r\\n        } catch {\\r\\n          emit Error(\\\"Update Rewards Failed\\\");\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, referralReward, governanceReward);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    spot_ret = dx * y / x\\r\\n    uni_ret = dx * y / (x + dx)\\r\\n    slippage = (spot_ret - uni_ret) / spot_ret\\r\\n    slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\r\\n    slippage = dx / (x + dx)\\r\\n    ret = uni_ret * (1 - slip_fee * slippage)\\r\\n    ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\r\\n    ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\r\\n\\r\\n    x = amount * denominator\\r\\n    dx = amount * (denominator - fee)\\r\\n   */\\r\\n  function _getQuote(\\r\\n    IERC20 src, \\r\\n    IERC20 dst,\\r\\n    uint256 amount,\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(src > dst){\\r\\n      (src, dst) = (dst, src);\\r\\n    }\\r\\n\\r\\n    if(amount > 0 && src == token0 && dst == token1) {\\r\\n      uint256 taxedAmount = amount.sub(amount.mul(fee).div(SwapConstants._FEE_DENOMINATOR));\\r\\n      uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\r\\n      uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\r\\n      uint256 feeNumerator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\r\\n      uint256 feeDenominator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\r\\n\\r\\n      return ret.mul(feeNumerator).div(feeDenominator);\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /** Allows contract owner to withdraw funds that was send to contract by mistake */\\r\\n  function rescueFunds(IERC20 token, uint256 amount)\\r\\n    external\\r\\n    nonReentrant\\r\\n    onlyOwner\\r\\n  {\\r\\n    uint256 balance0 = token0.getBalanceOf(address(this));\\r\\n    uint256 balance1 = token1.getBalanceOf(address(this));\\r\\n\\r\\n    token.fadTransfer(payable(msg.sender), amount);\\r\\n    require(token0.getBalanceOf(address(this)) >= balance0, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(token1.getBalanceOf(address(this)) >= balance1, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0x462612014e6755069fbea373af77255b4c5ad266274973aebbfff5c8d3b1114b\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IGovernanceFactory.sol\\\";\\r\\nimport \\\"../lib/LiquidVoting.sol\\\";\\r\\nimport \\\"../lib/SwapConstants.sol\\\";\\r\\nimport \\\"../lib/SafeCast.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* Swap governance\\r\\n*/\\r\\nabstract contract Governance is ERC20, Ownable, ReentrancyGuard {\\r\\n  using Vote for Vote.Data;\\r\\n  using LiquidVoting for LiquidVoting.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event FeeVoteUpdated(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\r\\n  event SlippageFeeVoteUpdated(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\r\\n  event DecayPeriodUpdated(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\r\\n\\r\\n  IGovernanceFactory public governanceFactory; \\r\\n  LiquidVoting.Data private _fee;\\r\\n  LiquidVoting.Data private _slippageFee;\\r\\n  LiquidVoting.Data private _decayPeriod;\\r\\n\\r\\n  constructor(IGovernanceFactory _governanceFactory)\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    _fee.data.result = _governanceFactory.getDefaultFee().toUint104();\\r\\n    _slippageFee.data.result = _governanceFactory.getDefaultSlippageFee().toUint104();\\r\\n    _decayPeriod.data.result = _governanceFactory.getDefaultDecayPeriod().toUint104();\\r\\n  }\\r\\n\\r\\n  function setGovernanceFactory(IGovernanceFactory _governanceFactory)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    this.discardFeeVote();\\r\\n    this.discardSlippageFeeVote();\\r\\n    this.discardDecayPeriodVote();\\r\\n  }\\r\\n\\r\\n  /** Return the current fee */\\r\\n  function getFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current slippage fee */\\r\\n  function getSlippageFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current decay period */\\r\\n  function getDecayPeriod()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.data.result;\\r\\n  }\\r\\n\\r\\n  function getVirtualFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualSlippageFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualDecayPeriod()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred fee */\\r\\n  function getUserFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.votes[user].get(governanceFactory.getDefaultFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred slippage fee */\\r\\n  function getUserSlippageFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.votes[user].get(governanceFactory.getDefaultSlippageFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred decay period */\\r\\n  function getUserDecayPeriodVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.votes[user].get(governanceFactory.getDefaultDecayPeriod());\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for fee */\\r\\n  function voteFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_FEE, \\\"Fee Vote Is Too High\\\");\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for slippage fee */\\r\\n  function voteSlippageFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage Fee Vote Is Too High\\\");\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for decay period */\\r\\n  function voteDecayPeriod(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_DECAY_PERIOD, \\\"Decay Period Vote Is Too High\\\");\\r\\n    require(vote >= SwapConstants._MIN_DECAY_PERIOD, \\\"Decay Period Vote Is Too Low\\\");\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for fee */\\r\\n  function discardFeeVote() external\\r\\n  {\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for slippage fee */\\r\\n  function discardSlippageFeeVote() external\\r\\n  {\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for decay period */\\r\\n  function discardDecayPeriodVote() external\\r\\n  {\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _emitVoteFeeUpdate(address user, uint256 fee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit FeeVoteUpdated(user, fee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteSlippageFeeUpdate(address user, uint256 slippageFee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit SlippageFeeVoteUpdated(user, slippageFee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteDecayPeriodUpdate(address user, uint256 decayPeriod, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DecayPeriodUpdated(user, decayPeriod, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n  {\\r\\n    if(from == to) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    IGovernanceFactory _governanceFactory = governanceFactory;\\r\\n    bool updateFrom = !(from == address(0) || _governanceFactory.isFeeCollector(from));\\r\\n    bool updateTo = !(to == address(0) || _governanceFactory.isFeeCollector(to));\\r\\n\\r\\n    if(!updateFrom && !updateTo) {\\r\\n      // mint to feeReceiver or burn from feeReceiver\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\r\\n    uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\r\\n    uint256 newTotalSupply = totalSupply()\\r\\n                              .add(from == address(0) ? amount : 0)\\r\\n                              .sub(to == address(0) ? amount : 0);\\r\\n\\r\\n    ParamsHelper memory params = ParamsHelper({\\r\\n      from: from,\\r\\n      to: to,\\r\\n      updateFrom: updateFrom,\\r\\n      updateTo: updateTo,\\r\\n      amount: amount,\\r\\n      balanceFrom: balanceFrom,\\r\\n      balanceTo: balanceTo,\\r\\n      newTotalSupply: newTotalSupply\\r\\n    });\\r\\n\\r\\n    (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _governanceFactory.defaults();\\r\\n\\r\\n    _updateOntransfer(params, defaultFee, _emitVoteFeeUpdate, _fee);\\r\\n    _updateOntransfer(params, defaultSlippageFee, _emitVoteSlippageFeeUpdate, _slippageFee);\\r\\n    _updateOntransfer(params, defaultDecayPeriod, _emitVoteDecayPeriodUpdate, _decayPeriod);\\r\\n  }\\r\\n\\r\\n  struct ParamsHelper {\\r\\n    address from;\\r\\n    address to;\\r\\n    bool updateFrom;\\r\\n    bool updateTo;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFrom;\\r\\n    uint256 balanceTo;\\r\\n    uint256 newTotalSupply;\\r\\n  }\\r\\n\\r\\n  function _updateOntransfer(\\r\\n    ParamsHelper memory params, \\r\\n    uint256 defaultValue,\\r\\n    function(address, uint256, bool, uint256) internal emitEvent,\\r\\n    LiquidVoting.Data storage votingData\\r\\n  ) private\\r\\n  {\\r\\n    Vote.Data memory voteFrom = votingData.votes[params.from];\\r\\n    Vote.Data memory voteTo = votingData.votes[params.to];\\r\\n    if(voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\r\\n      emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\r\\n      emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if(params.updateFrom) {\\r\\n      votingData.updateBalance(\\r\\n        params.from, \\r\\n        voteFrom, \\r\\n        params.balanceFrom, \\r\\n        params.balanceFrom.sub(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(params.updateTo) {\\r\\n      votingData.updateBalance(\\r\\n        params.to, \\r\\n        voteTo, \\r\\n        params.balanceTo, \\r\\n        params.balanceTo.add(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x72bc135f490c84cd356503165038a42c829306eee41559c83fcab630ef592ade\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IFeeCollector {\\r\\n  \\r\\n  /** Adds specified `amount` as reward to `receiver` */\\r\\n  function updateReward(address receiver, uint256 amount) external;\\r\\n\\r\\n  function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\r\\n}\",\"keccak256\":\"0x8d092bc45bc47f16fa3a0a7bc0dd93039ed4cf5bc95008bc236f09236b2ccf9a\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/** Describes methods that provide all the information about current governance contract state */\\r\\ninterface IGovernanceFactory {\\r\\n  \\r\\n  /** Returns information about mooniswap shares */\\r\\n  function getShareParameters()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, address, address);\\r\\n\\r\\n    /** Initial settings that contract was created */\\r\\n    function defaults()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, uint256);\\r\\n\\r\\n    /** Returns the value of default fee */\\r\\n    function getDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default slippage fee */\\r\\n    function getDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default decay period */\\r\\n    function getDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns previous default fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default slippage fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default decay period that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns the value of referral share */\\r\\n    function getReferralShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance share */\\r\\n    function getGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance wallet address */\\r\\n    function governanceWallet()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Returns the value of fee collector wallet address */\\r\\n    function feeCollector()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Whether the address is current fee collector or was in the past. */\\r\\n    function isFeeCollector(address)\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n\\r\\n    /** Whether the contract is currently working and wasn't stopped. */\\r\\n    function isActive()\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n}\",\"keccak256\":\"0x6d1e8a8b87f0ee7cce4f297f20f5473247f5f3ee9dd5862d0205745f5121f276\",\"license\":\"MIT\"},\"contracts/lib/FADERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary FADERC20 {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  function isBNB(IERC20 token)\\r\\n    internal\\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return address(token) == address(0);\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(IERC20 token, address account)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return account.balance;\\r\\n    } else {\\r\\n      return token.balanceOf(account);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransfer(IERC20 token, address payable to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        to.transfer(amount);\\r\\n      } else {\\r\\n        token.safeTransfer(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        require(msg.value >= amount, \\\"Value Is not Enough\\\");\\r\\n        require(from == msg.sender, \\\"From Is Not The Sender\\\");\\r\\n        require(to == address(this), \\\"To Is Not this\\\");\\r\\n        if(msg.value > amount) {\\r\\n          //Return the remaining to user\\r\\n          from.transfer(msg.value.sub(amount));\\r\\n        }\\r\\n      } else {\\r\\n        token.safeTransferFrom(from, to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSymbol(IERC20 token)\\r\\n    internal\\r\\n    view\\r\\n    returns(string memory)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return \\\"BNB\\\";\\r\\n    }\\r\\n\\r\\n    (bool success, bytes memory data) = address(token).staticcall{ gas: 20000}(\\r\\n      abi.encodeWithSignature(\\\"symbol()\\\")\\r\\n    );\\r\\n\\r\\n    if(!success){\\r\\n      (success, data) =  address(token).staticcall{ gas: 20000}(\\r\\n        abi.encodeWithSignature(\\\"SYMBOL()\\\")\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(success && data.length >= 96) {\\r\\n      (uint256 offset, uint256 length) = abi.decode(data, (uint256, uint256));\\r\\n      if(offset == 0x20 && length > 0 && length <= 256) {\\r\\n        return string(abi.decode(data, (bytes)));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(success && data.length == 32) {\\r\\n      uint length = 0;\\r\\n      while (length < data.length && data[length] >= 0x20 && data[length] <= 0x7E) {\\r\\n        length++;\\r\\n      }\\r\\n\\r\\n      if(length > 0) {\\r\\n        bytes memory result = new bytes(length);\\r\\n        for(uint i = 0; i < length; i++) {\\r\\n          result[i] = data[i];\\r\\n        }\\r\\n        return string(result);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _toHex(address(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(address token)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    return _toHex(abi.encodePacked(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(bytes memory data)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    bytes memory str = new bytes(2 + data.length * 2);\\r\\n    str[0] = \\\"0\\\";\\r\\n    str[1] = \\\"x\\\";\\r\\n    uint j = 2;\\r\\n    for(uint i = 0; i < data.length; i++) {\\r\\n      uint a = uint8(data[i]) >> 4;\\r\\n      uint b = uint8(data[i]) & 0x0f;\\r\\n      str[j++] = bytes1(uint8(a + 48 + (a/10) * 39));\\r\\n      str[j++] = bytes1(uint8(b + 48 + (b/10) * 39));\\r\\n    }\\r\\n\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x4968b4d5b8a96234d531300e80fc0113d3f9dc4c4ea21f58652eafcc62b08002\",\"license\":\"MIT\"},\"contracts/lib/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\nimport \\\"./VirtualVote.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LiquidVoting {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using Vote for Vote.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n\\r\\n  struct Data {\\r\\n    VirtualVote.Data data;\\r\\n    uint256 weightedSum;\\r\\n    uint256 defaultVote;\\r\\n    mapping(address => Vote.Data) votes;\\r\\n  }\\r\\n\\r\\n  function updateVote(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 balance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function updateBalance(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 newTotalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function _update(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    uint256 oldWeightedSum = self.weightedSum;\\r\\n    uint256 newWeightedSum = oldWeightedSum;\\r\\n    uint256 oldDefaultVote = self.defaultVote;\\r\\n    uint256 newDefaultVote = oldDefaultVote;\\r\\n\\r\\n    if(oldVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.sub(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.add(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newWeightedSum != oldWeightedSum){\\r\\n      self.weightedSum = newWeightedSum;\\r\\n    }\\r\\n\\r\\n    if(newDefaultVote != oldDefaultVote){\\r\\n      self.defaultVote = newDefaultVote;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint256 newResult = totalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVote.mul(defaultVote)).div(totalSupply);\\r\\n      VirtualVote.Data memory data = self.data;\\r\\n      if(newResult != data.result){\\r\\n        VirtualVote.Data memory sdata = self.data;\\r\\n        (sdata.oldResult, sdata.result, sdata.time) = (\\r\\n          data.current().toUint104(),\\r\\n          newResult.toUint104(),\\r\\n          block.timestamp.toUint48()\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(!newVote.eq(oldVote)){\\r\\n      self.votes[user] = newVote;\\r\\n    }\\r\\n\\r\\n    emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6c1e8033140a7fc304e5868ce3c04d79cb24a0e27ed5553f0223fa11805cb683\",\"license\":\"MIT\"},\"contracts/lib/SQRT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SQRT {\\r\\n  \\r\\n  /** https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method */\\r\\n  function sqrt(uint256 y) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(y > 3) {\\r\\n      uint256 z = y;\\r\\n      uint256 x = y / 2 + 1;\\r\\n      while(x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n      return z;\\r\\n    } else if (y != 0){\\r\\n      return 1;\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x37f51446a8f9a8bf3616717d0e8504c750ab43c9ea34a9e38ac66366959af49c\",\"license\":\"MIT\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeCast {\\r\\n  \\r\\n  function toUint216(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint216)\\r\\n  {\\r\\n    require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\r\\n    return uint216(value);\\r\\n  }\\r\\n\\r\\n  function toUint104(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint104)\\r\\n  {\\r\\n    require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\r\\n    return uint104(value);\\r\\n  }\\r\\n\\r\\n  function toUint48(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint48)\\r\\n  {\\r\\n    require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\r\\n    return uint48(value);\\r\\n  }\\r\\n\\r\\n  function toUint40(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint40)\\r\\n  {\\r\\n    require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\r\\n    return uint40(value);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x817ead41a088c9cbc8080e3345811c39c12936e487e5916f37f51a66bfe09ba9\",\"license\":\"MIT\"},\"contracts/lib/SwapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SwapConstants {\\r\\n  \\r\\n  uint256 internal constant _FEE_DENOMINATOR = 1e18;\\r\\n\\r\\n  uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\r\\n  uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n  uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\r\\n  uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\r\\n\\r\\n  uint256 internal constant _DEFAULT_FEE = 0;\\r\\n  uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\r\\n  uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n}\",\"keccak256\":\"0x816802904c9252c8881b9bba8a9003e9b8881a5b04b1f0a3c34e65c242285938\",\"license\":\"MIT\"},\"contracts/lib/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\n\\r\\nlibrary VirtualBalance {\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  struct Data {\\r\\n    uint216 balance;\\r\\n    uint40 time;\\r\\n  }\\r\\n\\r\\n  function set(VirtualBalance.Data storage self, uint256 balance) internal {\\r\\n    (self.balance, self.time) = (\\r\\n      balance.toUint216(),\\r\\n      block.timestamp.toUint40()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance));\\r\\n  }\\r\\n\\r\\n  function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\r\\n  }\\r\\n\\r\\n  function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = decayPeriod.sub(timePassed);\\r\\n    return uint256(self.balance).mul(timeRemain).add(\\r\\n      realBalance.mul(timePassed)\\r\\n    ).div(decayPeriod);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa56c85c352aad2400a9ff7074acace2bed5cada591801e9fd026020c6317556f\",\"license\":\"MIT\"},\"contracts/lib/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary VirtualVote {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint104 oldResult;\\r\\n    uint104 result;\\r\\n    uint48 time;\\r\\n  }\\r\\n\\r\\n  function current(VirtualVote.Data memory self) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\r\\n    return uint256(self.oldResult).mul(timeRemain).add(\\r\\n      uint256(self.result).mul(timePassed)\\r\\n    ).div(_VOTE_DECAY_PERIOD);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x17dfd686239b10ee0b2fec2086cdbaa2365b841bfde0498025c6d2970f76d48c\",\"license\":\"MIT\"},\"contracts/lib/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary Vote {\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  function eq(Vote.Data memory self, Vote.Data memory vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == vote.value;\\r\\n  }\\r\\n\\r\\n  function init() \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: 0\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function init(uint256 vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: vote + 1\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function isDefault(Data memory self) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == 0;\\r\\n  }\\r\\n\\r\\n  function get(Data memory self, uint256 defaultVote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVote; \\r\\n  }\\r\\n\\r\\n  function get(Data memory self, function () external view returns(uint256) defaultVoteFn) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVoteFn();\\r\\n    \\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x9aebbc5fa7099113f837929b5c8221c0c8c7370fc04bcb2ddb43b45fe65fffe7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ac4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b92440b014610030575b600080fd5b61004361003e366004610160565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000878787878787336040516100749061010b565b610084979695949392919061022f565b604051809103906000f0801580156100a0573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b50505050979650505050505050565b6157f1806200029e83390190565b60008083601f84011261012a578182fd5b50813567ffffffffffffffff811115610141578182fd5b60208301915083602082850101111561015957600080fd5b9250929050565b600080600080600080600060a0888a03121561017a578283fd5b873561018581610285565b9650602088013561019581610285565b9550604088013567ffffffffffffffff808211156101b1578485fd5b6101bd8b838c01610119565b909750955060608a01359150808211156101d5578485fd5b506101e28a828b01610119565b90945092505060808801356101f681610285565b8091505092959891949750929550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808a168352808916602084015260a0604084015261025a60a08401888a610206565b838103606085015261026d818789610206565b92505080841660808401525098975050505050505050565b6001600160a01b038116811461029a57600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620057f1380380620057f183398101604081905262000034916200055a565b80838381600390805190602001906200004f9291906200040b565b508051620000659060049060208401906200040b565b505050620000826200007c6200035a60201b60201c565b6200035e565b6001600655600780546001600160a01b0319166001600160a01b0383169081179091556040805163043759e560e31b815290516200012d92916321bacf28916004808301926020929190829003018186803b158015620000e157600080fd5b505afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c919062000603565b620003b060201b620028811760201c565b6008600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000197816001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b600c600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000201816001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b601080546001600160681b0392909216600160681b02600160681b600160d01b0319909216919091179055508251620002815760405162461bcd60e51b815260206004820152601360248201527f537761703a204e616d6520497320456d7074790000000000000000000000000060448201526064015b60405180910390fd5b6000825111620002d45760405162461bcd60e51b815260206004820152601560248201527f537761703a2053796d626f6c20497320456d7074790000000000000000000000604482015260640162000278565b836001600160a01b0316856001600160a01b03161415620003385760405162461bcd60e51b815260206004820152601860248201527f537761703a2054776f20546f6b656e732049732053616d650000000000000000604482015260640162000278565b5050506001600160601b0319606092831b8116608052911b1660a05262000688565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000600160681b8210620004075760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015260640162000278565b5090565b82805462000419906200061c565b90600052602060002090601f0160209004810192826200043d576000855562000488565b82601f106200045857805160ff191683800117855562000488565b8280016001018555821562000488579182015b82811115620004885782518255916020019190600101906200046b565b50620004079291505b8082111562000407576000815560010162000491565b600082601f830112620004b8578081fd5b81516001600160401b0380821115620004d557620004d562000659565b604051601f8301601f19908116603f0116810190828211818310171562000500576200050062000659565b816040528381526020925086838588010111156200051c578485fd5b8491505b838210156200053f578582018301518183018401529082019062000520565b838211156200055057848385830101525b9695505050505050565b600080600080600060a0868803121562000572578081fd5b85516200057f816200066f565b602087015190955062000592816200066f565b60408701519094506001600160401b0380821115620005af578283fd5b620005bd89838a01620004a7565b94506060880151915080821115620005d3578283fd5b50620005e288828901620004a7565b9250506080860151620005f5816200066f565b809150509295509295909350565b60006020828403121562000615578081fd5b5051919050565b600181811c908216806200063157607f821691505b602082108114156200065357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200068557600080fd5b50565b60805160601c60a05160601c6150db620007166000396000818161087e01528181610c5e015281816112ba01528181611356015281816115c701528181611f340152818161274001526133d201526000818161030501528181610c390152818161128301528181611304015281816115a201528181611ed201528181612710015261339501526150db6000f3fe6080604052600436106102935760003560e01c806393028d831161015a578063cad07066116100c1578063e331d0391161007a578063e331d03914610919578063e4b50cb81461092c578063ee5d18591461094c578063f2fde38b14610992578063f3bf09bb146109b2578063f76d13b4146109ed57600080fd5b8063cad0706614610827578063ced72f8714610847578063d21220a71461086c578063d2fd9eba146108a0578063d5bcb9b5146108c0578063dd62ed3e146108d357600080fd5b8063a9059cbb11610113578063a9059cbb146106d9578063aa6ca808146106f9578063ac9d6f951461071b578063b1ec4c4014610786578063bd10cd80146107e7578063c515ee231461080757600080fd5b806393028d831461063c578063936f0a151461065157806395d89b41146106715780639ab7fdd6146106865780639ea5ce0a146106a6578063a457c2d7146106b957600080fd5b8063487ca261116101fe57806370a08231116101b757806370a0823114610584578063715018a6146105a4578063728c769a146105b957806378e3214f146105de5780638da5cb5b146105fe578063907e4f361461061c57600080fd5b8063487ca261146104c85780634b4c9ce5146104ea5780635915d8061461050a5780635a08c2611461052a5780636515aa291461054a5780636669302a1461056f57600080fd5b806323b872dd1161025057806323b872dd146103fe5780632a519ec81461041e5780633049105d1461043e578063313ce5671461045f578063395093511461047b5780633c6216a61461049b57600080fd5b806306fdde0314610298578063095ea7b3146102c35780630dfe1681146102f357806318160ddd1461033f5780631a08b5551461035e5780631f495dda146103c3575b600080fd5b3480156102a457600080fd5b506102ad610a02565b6040516102ba9190614e42565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004614a43565b610a94565b60405190151581526020016102ba565b3480156102ff57600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ba565b34801561034b57600080fd5b506002545b6040519081526020016102ba565b34801561036a57600080fd5b506008546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060016102ba565b3480156103cf57600080fd5b506010546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b34801561040a57600080fd5b506102e3610419366004614a03565b610aae565b34801561042a57600080fd5b506103506104393660046149af565b610ad4565b61045161044c366004614a6e565b610b8d565b6040516102ba929190614f16565b34801561046b57600080fd5b50604051601281526020016102ba565b34801561048757600080fd5b506102e3610496366004614a43565b610bad565b3480156104a757600080fd5b506104bb6104b6366004614c60565b610bec565b6040516102ba9190614e34565b3480156104d457600080fd5b506104e86104e3366004614beb565b610eb2565b005b3480156104f657600080fd5b506103506105053660046149af565b610fd2565b34801561051657600080fd5b506104bb610525366004614c1b565b61105a565b34801561053657600080fd5b506104e8610545366004614beb565b61106d565b34801561055657600080fd5b50600c54600160681b90046001600160681b0316610350565b34801561057b57600080fd5b506104e8611194565b34801561059057600080fd5b5061035061059f3660046149af565b6111d3565b3480156105b057600080fd5b506104e86111ee565b3480156105c557600080fd5b50601054600160681b90046001600160681b0316610350565b3480156105ea57600080fd5b506104e86105f9366004614a43565b611222565b34801561060a57600080fd5b506005546001600160a01b0316610327565b34801561062857600080fd5b50600754610327906001600160a01b031681565b34801561064857600080fd5b506104e86113cf565b34801561065d57600080fd5b5061035061066c3660046149af565b61140c565b34801561067d57600080fd5b506102ad611494565b34801561069257600080fd5b506103506106a13660046149af565b6114a3565b6104516106b4366004614aa2565b61155c565b3480156106c557600080fd5b506102e36106d4366004614a43565b611e05565b3480156106e557600080fd5b506102e36106f4366004614a43565b611ea2565b34801561070557600080fd5b5061070e611eb0565b6040516102ba9190614de7565b34801561072757600080fd5b506107616107363660046149af565b6016602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b604080516001600160d81b03909316835264ffffffffff9091166020830152016102ba565b34801561079257600080fd5b506107c76107a13660046149af565b6014602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016102ba565b3480156107f357600080fd5b506103506108023660046149af565b611f97565b34801561081357600080fd5b50610350610822366004614b0a565b612050565b34801561083357600080fd5b506104e8610842366004614beb565b61209d565b34801561085357600080fd5b50600854600160681b90046001600160681b0316610350565b34801561087857600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ac57600080fd5b506104e86108bb3660046149af565b61220f565b6103506108ce366004614b1e565b61234d565b3480156108df57600080fd5b506103506108ee3660046149cb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610350610927366004614b7c565b612367565b34801561093857600080fd5b50610327610947366004614beb565b612706565b34801561095857600080fd5b506107616109673660046149af565b6015602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b34801561099e57600080fd5b506104e86109ad3660046149af565b6127ac565b3480156109be57600080fd5b50600c546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b3480156109f957600080fd5b506104e8612844565b606060038054610a1190615014565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3d90615014565b8015610a8a5780601f10610a5f57610100808354040283529160200191610a8a565b820191906000526020600020905b815481529060010190602001808311610a6d57829003601f168201915b5050505050905090565b600033610aa28185856128da565b60019150505b92915050565b600033610abc8582856129ff565b610ac7858585612a91565b60019150505b9392505050565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190614c03565b6001600160a01b03841660009081526013602090815260409182902082519182019092529054815290612c6a565b6000610b9761487e565b610ba284843361155c565b915091509250929050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610aa29082908690610be7908790614f55565b6128da565b610bf461487e565b60026006541415610c205760405162461bcd60e51b8152600401610c1790614edf565b60405180910390fd5b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526000610c8e60025490565b90506000610cac6010546001600160681b03600160681b9091041690565b9050610cb83388612c8f565b60005b6002811015610e4f576000848260028110610ce657634e487b7160e01b600052603260045260246000fd5b602002015190506000610d026001600160a01b03831630612de6565b90506000610d1a86610d14848e612e80565b90612e8c565b9050610d306001600160a01b0384168a83612e98565b80888560028110610d5157634e487b7160e01b600052603260045260246000fd5b6020020152895184101580610d8d5750898481518110610d8157634e487b7160e01b600052603260045260246000fd5b60200260200101518110155b610dd95760405162461bcd60e51b815260206004820152601a60248201527f537761703a20526573756c74204973204e6f7420456e6f7567680000000000006044820152606401610c17565b610e098583610de8898f612ef6565b6001600160a01b03871660009081526016602052604090209291908a612f02565b610e398583610e18898f612ef6565b6001600160a01b03871660009081526015602052604090209291908a612f02565b5050508080610e4790615049565b915050610cbb565b508351602080860151604080518b8152928301939093528183015290516001600160a01b0387169133917f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc9181900360600190a350506001600655509392505050565b662386f26fc10000811115610f005760405162461bcd60e51b815260206004820152601460248201527308ccaca40acdee8ca4092e640a8dede4090d2ced60631b6044820152606401610c17565b336000818152600b6020908152604091829020825191820190925290548152610fcf9190610f2d84612f5f565b610f36336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf9190614c03565b6008959493929190612f8e612fe2565b50565b600080610fe86001600160a01b03841630612de6565b9050610acd61105461100a6010546001600160681b03600160681b9091041690565b6001600160a01b0386166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084612ffd565b82613058565b61106261487e565b610acd838333610bec565b670de0b6b3a76400008111156110c55760405162461bcd60e51b815260206004820152601d60248201527f536c6970706167652046656520566f746520497320546f6f20486967680000006044820152606401610c17565b336000818152600f6020908152604091829020825191820190925290548152610fcf91906110f284612f5f565b6110fb336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190614c03565b600c95949392919061306f612fe2565b336000818152600f6020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d19291906110f2565b565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146112185760405162461bcd60e51b8152600401610c1790614e75565b6111d160006130b9565b600260065414156112455760405162461bcd60e51b8152600401610c1790614edf565b60026006556005546001600160a01b031633146112745760405162461bcd60e51b8152600401610c1790614e75565b60006112a96001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b905060006112e06001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b90506112f66001600160a01b0385163385612e98565b8161132a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b10156113485760405162461bcd60e51b8152600401610c1790614eaa565b8061137c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b101561139a5760405162461bcd60e51b8152600401610c1790614eaa565b6103e86113a6306111d3565b10156113c45760405162461bcd60e51b8152600401610c1790614eaa565b505060016006555050565b336000818152600b6020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d1929190610f2d565b6000806114226001600160a01b03841630612de6565b9050610acd61148e6114446010546001600160681b03600160681b9091041690565b6001600160a01b0386166000908152601660209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084612ffd565b8261310b565b606060048054610a1190615014565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f657600080fd5b505afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190614c03565b6001600160a01b0384166000908152600f602090815260409182902082519182019092529054815290612c6a565b600061156661487e565b600260065414156115895760405162461bcd60e51b8152600401610c1790614edf565b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526116058160005b60200201516001600160a01b03161590565b611629576116148160016115f3565b61161f57600061162c565b602086015161162c565b85515b341461167a5760405162461bcd60e51b815260206004820152601760248201527f537761703a2057726f6e672056616c75652055736167650000000000000000006044820152606401610c17565b600061168560025490565b9050806118a8576116996103e86063612e80565b93506116a7306103e861311a565b60005b60028110156118a2576116e1858983600281106116d757634e487b7160e01b600052603260045260246000fd5b6020020151613058565b9450600088826002811061170557634e487b7160e01b600052603260045260246000fd5b60200201511161174e5760405162461bcd60e51b8152602060048201526014602482015273537761703a20416d6f756e74204973205a65726f60601b6044820152606401610c17565b86816002811061176e57634e487b7160e01b600052603260045260246000fd5b602002015188826002811061179357634e487b7160e01b600052603260045260246000fd5b602002015110156117e65760405162461bcd60e51b815260206004820152601c60248201527f537761703a204d696e20416d6f756e74204e6f742052656163686564000000006044820152606401610c17565b61184633308a846002811061180b57634e487b7160e01b600052603260045260246000fd5b602002015186856002811061183057634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316929190613205565b87816002811061186657634e487b7160e01b600052603260045260246000fd5b602002015184826002811061188b57634e487b7160e01b600052603260045260246000fd5b60200201528061189a81615049565b9150506116aa565b50611d47565b6118b061487e565b60005b60028110156119645761192d6118e28583600281106115f357634e487b7160e01b600052603260045260246000fd5b6118ed5760006118ef565b345b6119273087856002811061191357634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031690612de6565b9061335c565b82826002811061194d57634e487b7160e01b600052603260045260246000fd5b60200201528061195c81615049565b9150506118b3565b50600019945060005b60028110156119ea576119d6866119d184846002811061199d57634e487b7160e01b600052603260045260246000fd5b6020020151610d148d86600281106119c557634e487b7160e01b600052603260045260246000fd5b60200201518890612e80565b61310b565b9550806119e281615049565b91505061196d565b508460005b6002811015611c2a5760008a8260028110611a1a57634e487b7160e01b600052603260045260246000fd5b602002015111611a635760405162461bcd60e51b8152602060048201526014602482015273537761703a20416d6f756e74204973205a65726f60601b6044820152606401610c17565b6000611aac85610d14611a77600183614fd1565b611aa687898860028110611a9b57634e487b7160e01b600052603260045260246000fd5b602002015190612e80565b90612ef6565b9050898260028110611ace57634e487b7160e01b600052603260045260246000fd5b6020020151811015611b225760405162461bcd60e51b815260206004820152601c60248201527f537761703a204d696e20416d6f756e74204e6f742052656163686564000000006044820152606401610c17565b611b4833308389866002811061183057634e487b7160e01b600052603260045260246000fd5b611b94848360028110611b6b57634e487b7160e01b600052603260045260246000fd5b60200201516119273089866002811061191357634e487b7160e01b600052603260045260246000fd5b878360028110611bb457634e487b7160e01b600052603260045260246000fd5b6020020152611c14886119d1868560028110611be057634e487b7160e01b600052603260045260246000fd5b6020020151610d148b8760028110611c0857634e487b7160e01b600052603260045260246000fd5b60200201518a90612e80565b9750508080611c2290615049565b9150506119ef565b50601054600160681b90046001600160681b031660005b6002811015611d4257611cd882858360028110611c6e57634e487b7160e01b600052603260045260246000fd5b6020020151611c7d888c612ef6565b88601660008c8860028110611ca257634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020612f0290949392919063ffffffff16565b611d3082858360028110611cfc57634e487b7160e01b600052603260045260246000fd5b6020020151611d0b888c612ef6565b88601560008c8860028110611ca257634e487b7160e01b600052603260045260246000fd5b80611d3a81615049565b915050611c41565b505050505b60008411611d975760405162461bcd60e51b815260206004820152601a60248201527f537761703a20526573756c74204973204e6f7420456e6f7567680000000000006044820152606401610c17565b611da1858561311a565b825160208085015160408051888152928301939093528183015290516001600160a01b0387169133917f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c4229181900360600190a3505060016006559094909350915050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015611e8a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c17565b611e9782868684036128da565b506001949350505050565b600033610aa2818585612a91565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611f1257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611f7457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190614c03565b6001600160a01b0384166000908152600b602090815260409182902082519182019092529054815290612c6a565b600061209584848461206188610fd2565b61206a8861140c565b600854600160681b90046001600160681b0316600c54600160681b90046001600160681b0316613368565b949350505050565b61012c8111156120ef5760405162461bcd60e51b815260206004820152601d60248201527f446563617920506572696f6420566f746520497320546f6f20486967680000006044820152606401610c17565b603c8110156121405760405162461bcd60e51b815260206004820152601c60248201527f446563617920506572696f6420566f746520497320546f6f204c6f77000000006044820152606401610c17565b33600081815260136020908152604091829020825191820190925290548152610fcf919061216d84612f5f565b612176336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c757600080fd5b505afa1580156121db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ff9190614c03565b60109594939291906134b1612fe2565b6005546001600160a01b031633146122395760405162461bcd60e51b8152600401610c1790614e75565b600780546001600160a01b0319166001600160a01b038316179055604080516393028d8360e01b8152905130916393028d8391600480830192600092919082900301818387803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b50505050306001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b50505050306001600160a01b031663f76d13b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561233257600080fd5b505af1158015612346573d6000803e3d6000fd5b5050505050565b600061235d868686868633612367565b9695505050505050565b60006002600654141561238c5760405162461bcd60e51b8152600401610c1790614edf565b6002600655600754604080516308bcf8b560e21b815290516001600160a01b03909216916322f3e2d491600480820192602092909190829003018186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190614aea565b61245a5760405162461bcd60e51b815260206004820152601960248201527f537761703a20466163746f72792049732053687574646f776e000000000000006044820152606401610c17565b6001600160a01b03871615612470576000612472565b845b34146124b45760405162461bcd60e51b8152602060048201526011602482015270537761703a2057726f6e672056616c756560781b6044820152606401610c17565b600060405180604001604052806124fe6124de8b6001600160a01b03166001600160a01b03161590565b6124e95760006124eb565b345b6119276001600160a01b038d1630612de6565b81526020016125166001600160a01b038a1630612de6565b8152509050600061253a604051806040016040528060008152602001600081525090565b600060405180604001604052806125616008546001600160681b03600160681b9091041690565b8152602001612580600c546001600160681b03600160681b9091041690565b905290506125938b8b8b8b8a89876134fb565b8094508197508295505050508a6001600160a01b0316866001600160a01b0316336001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a886000015189602001518f604051612631969594939291906001600160a01b039687168152602081019590955260408501939093526060840191909152608083015290911660a082015260c00190565b60405180910390a4612646838689878561379a565b6001600160a01b038b16600090815260146020526040812080548592906126779084906001600160801b0316614f2a565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038d166000908152601460205260409020805488935090916010916126cc918591600160801b900416614f2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505060016006819055509695505050505050565b60008161273457507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001141561276457507f0000000000000000000000000000000000000000000000000000000000000000919050565b60405162461bcd60e51b815260206004820152601f60248201527f537761703a20506f6f6c2048617665204f6e6c792054776f20546f6b656e73006044820152606401610c17565b6005546001600160a01b031633146127d65760405162461bcd60e51b8152600401610c1790614e75565b6001600160a01b03811661283b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c17565b610fcf816130b9565b33600081815260136020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d192919061216d565b6000600160681b82106128d65760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610c17565b5090565b6001600160a01b03831661293c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c17565b6001600160a01b03821661299d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c17565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114612a8b5781811015612a7e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c17565b612a8b84848484036128da565b50505050565b6001600160a01b038316612af55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c17565b6001600160a01b038216612b575760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c17565b612b62838383613c85565b6001600160a01b03831660009081526020819052604090205481811015612bda5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c17565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290612c11908490614f55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612c5d91815260200190565b60405180910390a3612a8b565b815160009015612c89578251612c8290600190614fd1565b9050610aa8565b50919050565b6001600160a01b038216612cef5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c17565b612cfb82600083613c85565b6001600160a01b03821660009081526020819052604090205481811015612d6f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c17565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612d9e908490614fd1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016129f2565b505050565b60006001600160a01b038316612e0757506001600160a01b03811631610aa8565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b158015612e4857600080fd5b505afa158015612e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c829190614c03565b6000610acd8284614fb2565b6000610acd8284614f92565b8015612de1576001600160a01b038316612ee2576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612a8b573d6000803e3d6000fd5b612de16001600160a01b0384168383613f75565b6000610acd8284614f55565b61234685612f5a83610d14612f1882600161335c565b604080518082019091528b546001600160d81b0381168252600160d81b900464ffffffffff166020820152611aa6908990612f54908d8d612ffd565b90612e80565b613fd8565b6040805160208101909152600081526040518060200160405280836001612f869190614f55565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907fc00d9debcc1737a88e76a969557b14246f013c43c1328eab2cbac00c1714d0ca906060015b60405180910390a250505050565b612ff3888888888889898989614016565b5050505050505050565b600080613022846119d1876020015164ffffffffff164261335c90919063ffffffff16565b90506000613030858361335c565b905061235d85610d146130438786612e80565b8951611aa6906001600160d81b031686612e80565b6000818310156130685781610acd565b5090919050565b6040805184815283151560208201529081018290526001600160a01b038516907f4ad9a834867d5460d12562e53fb43cfa76081110dbc58da81b8aeded6813639f90606001612fd4565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106130685781610acd565b6001600160a01b0382166131705760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c17565b61317c60008383613c85565b806002600082825461318e9190614f55565b90915550506001600160a01b038216600090815260208190526040812080548392906131bb908490614f55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8015612a8b576001600160a01b038416613347578034101561325f5760405162461bcd60e51b81526020600482015260136024820152720acc2d8eaca4092e640dcdee8408adcdeeaced606b1b6044820152606401610c17565b6001600160a01b03831633146132b05760405162461bcd60e51b8152602060048201526016602482015275233937b69024b9902737ba102a34329029b2b73232b960511b6044820152606401610c17565b6001600160a01b03821630146132f95760405162461bcd60e51b815260206004820152600e60248201526d546f204973204e6f74207468697360901b6044820152606401610c17565b80341115613342576001600160a01b0383166108fc613318348461335c565b6040518115909202916000818181858888f19350505050158015613340573d6000803e3d6000fd5b505b612a8b565b612a8b6001600160a01b0385168484846142b9565b6000610acd8284614fd1565b6000866001600160a01b0316886001600160a01b03161115613388579596955b6000861180156133c957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316145b801561340657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316145b156134a257600061342d613426670de0b6b3a7640000610d148a88612e80565b889061335c565b9050600061343b8783612ef6565b9050600061344d82610d14858a612e80565b9050600061347061345e8786612e80565b611927670de0b6b3a764000086612e80565b90506000613486670de0b6b3a764000085612e80565b905061349681610d148585612e80565b955050505050506134a6565b5060005b979650505050505050565b6040805184815283151560208201529081018290526001600160a01b038516907fdb1350180a01d00beab06bdea8ddb5c0cacdce847a28cfaaeabf9075c26d5aa090606001612fd4565b60008061351b604051806040016040528060008152602001600081525090565b601054600090600160681b90046001600160681b031686516001600160a01b038d166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff169082015291925061358591908390612ffd565b80835286516135949190613058565b82526020868101516001600160a01b038c166000908152601683526040908190208151808301909252546001600160d81b0381168252600160d81b900464ffffffffff16928101929092526135eb91908390612ffd565b6020808401829052870151613600919061310b565b602083015261361a6001600160a01b038c1633308c613205565b8551613633906119276001600160a01b038e1630612de6565b93506136548b8b86856000015186602001518a600001518b60200151613368565b92506000831180156136665750878310155b6136b25760405162461bcd60e51b815260206004820152601a60248201527f537761703a2052657475726e204973204e6f7420456e6f7567680000000000006044820152606401610c17565b6136c66001600160a01b038b168885612e98565b85518251146136fd5781516136fd906136df9086612ef6565b6001600160a01b038d16600090815260156020526040902090613fd8565b856020015182602001511461373d57602082015161373d9061371f908561335c565b6001600160a01b038c16600090815260166020526040902090613fd8565b85516001600160a01b038c1660009081526016602052604090206137629183906142f1565b6020808701516001600160a01b038c1660009081526015909252604090912061378c9183906142f1565b509750975097945050505050565b600080600080600760009054906101000a90046001600160a01b03166001600160a01b03166323a65ab66040518163ffffffff1660e01b815260040160806040518083038186803b1580156137ee57600080fd5b505afa158015613802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138269190614cae565b935093509350935060008060006ec097ce7bc90715b34b9f1000000000905061386e8960000151610d146138678f8d60000151612ef690919063ffffffff16565b8490612e80565b60208a015190915061388790610d14613867828f61335c565b90506ec097ce7bc90715b34b9f1000000000811115613c19576138a98161432d565b905060006138ce82610d146138c682670de0b6b3a764000061335c565b600254612f54565b90506001600160a01b038b166138e55760006138fb565b6138fb670de0b6b3a7640000610d14838b612e80565b93506001600160a01b038616613912576000613928565b613928670de0b6b3a7640000610d14838a612e80565b92506001600160a01b03851661395d578315613948576139488b8561311a565b821561395857613958868461311a565b613c17565b600084118061396c5750600083115b15613c17576000808411613981576000613984565b60015b60008611613993576000613996565b60015b6139a09190614f6d565b60ff16905060008167ffffffffffffffff8111156139ce57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156139f7578160200160208202803683370190505b50905060008267ffffffffffffffff811115613a2357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613a4c578160200160208202803683370190505b5090508d82600081518110613a7157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613ab357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528515613b3f578882613ad1600186614fd1565b81518110613aef57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528581613b14600186614fd1565b81518110613b3257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60405163024c5d4f60e21b81526001600160a01b03891690630931753c90613b6d9085908590600401614d64565b600060405180830381600087803b158015613b8757600080fd5b505af1925050508015613b98575060015b613c00577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051613bf390602080825260159082015274155c19185d194814995dd85c991cc811985a5b1959605a1b604082015260600190565b60405180910390a1613c13565b613c1388613c0e8989612ef6565b61311a565b5050505b505b88516020808b01518a518b83015160408051958652938501929092528383015260608301526080820185905260a08201849052517f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd69181900360c00190a1505050505050505050505050565b816001600160a01b0316836001600160a01b03161415613ca457505050565b6007546001600160a01b039081169060009085161580613d385750604051633b90b9bf60e01b81526001600160a01b038681166004830152831690633b90b9bf9060240160206040518083038186803b158015613d0057600080fd5b505afa158015613d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d389190614aea565b15905060006001600160a01b0385161580613dc75750604051633b90b9bf60e01b81526001600160a01b038681166004830152841690633b90b9bf9060240160206040518083038186803b158015613d8f57600080fd5b505afa158015613da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc79190614aea565b15905081158015613dd6575080155b15613de357505050505050565b60006001600160a01b038716613dfa576000613e03565b613e03876111d3565b905060006001600160a01b038716613e1c576000613e25565b613e25876111d3565b90506000613e676001600160a01b03891615613e42576000613e44565b875b6119276001600160a01b038c1615613e5d576000613e5f565b895b600254611aa6565b905060006040518061010001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001871515815260200186151581526020018981526020018581526020018481526020018381525090506000806000896001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160606040518083038186803b158015613efb57600080fd5b505afa158015613f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f339190614cf8565b925092509250613f488484612f8e60086143a4565b613f57848361306f600c6143a4565b613f6684826134b160106143a4565b50505050505050505050505050565b6040516001600160a01b038316602482015260448101829052612de190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526144f1565b613fe1816145c3565b613fea42614618565b6001600160d81b039190911664ffffffffff909116600160d81b026001600160d81b0319161790915550565b600189015460028a015481908061402c8b511590565b156140425761403b818a61335c565b9050614063565b6140606140596140528d89612c6a565b8b90612e80565b849061335c565b92505b895161407a57614073818a612ef6565b905061409b565b61409861409161408a8c89612c6a565b8a90612e80565b8490612ef6565b92505b8383146140aa5760018d018390555b8181146140b95760028d018190555b600087156140de576140d988610d146140d2858b612e80565b8790612ef6565b6140e0565b865b905060008e6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905080602001516001600160681b031682146142745760008f6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905061424161423c8361466f565b612881565b61424a84612881565b614253426146ea565b65ffffffffffff1660408401526001600160681b0390811660208401521690525b50508a518a511461429e576001600160a01b038c16600090815260038e01602052604090208a5190555b613f668c6142ac8c89612c6a565b8c51158b8963ffffffff16565b6040516001600160a01b0380851660248301528316604482015260648101829052612a8b9085906323b872dd60e01b90608401613fa1565b6040805180820190915283546001600160d81b0381168252600160d81b900464ffffffffff166020820152612de1908490612f5a908585612ffd565b6000600382111561438e57816000614346600283614f92565b614351906001614f55565b90505b818110156143875790508060028161436c8187614f92565b6143769190614f55565b6143809190614f92565b9050614354565b5092915050565b811561439c57506001919050565b506000919050565b83516001600160a01b03908116600090815260038301602081815260408084208151808401835290548152828a0151909516845291815291819020815192830190915254815281511580156143f857508051155b8015614405575085604001515b8015614412575085606001515b1561448457855161444d906144278488612c6a565b60016144448a608001518b60a0015161335c90919063ffffffff16565b8863ffffffff16565b602086015161447d906144608388612c6a565b60016144448a608001518b60c00151612ef690919063ffffffff16565b5050612a8b565b8560400151156144be57855160a087015160808801516144be929185916144ac90829061335c565b60e08b01518894939291908b8b614742565b8560600151156144e957602086015160c087015160808801516144e9929184916144ac908290612ef6565b505050505050565b6000614546826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661477a9092919063ffffffff16565b805190915015612de157808060200190518101906145649190614aea565b612de15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c17565b6000600160d81b82106128d65760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20323136206269747300006044820152606401610c17565b60006501000000000082106128d65760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343020626974730000006044820152606401610c17565b600080614698620151806119d1856040015165ffffffffffff164261335c90919063ffffffff16565b905060006146a9620151808361335c565b905061209562015180610d146146d58588602001516001600160681b0316612e8090919063ffffffff16565b8751611aa6906001600160681b031686612e80565b6000660100000000000082106128d65760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610c17565b612ff388888887156147545789614770565b6040805160208082018352600091829052825190810190925281525b8989898989614016565b60606120958484600085856001600160a01b0385163b6147dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c17565b600080866001600160a01b031685876040516147f89190614d48565b60006040518083038185875af1925050503d8060008114614835576040519150601f19603f3d011682016040523d82523d6000602084013e61483a565b606091505b50915091506134a682828660608315614854575081610acd565b8251156148645782518084602001fd5b8160405162461bcd60e51b8152600401610c179190614e42565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126148ac578081fd5b6040516040810181811067ffffffffffffffff821117156148cf576148cf61507a565b80604052508083856040860111156148e5578384fd5b835b60028110156149065781358352602092830192909101906001016148e7565b509195945050505050565b600082601f830112614921578081fd5b8135602067ffffffffffffffff8083111561493e5761493e61507a565b8260051b604051601f19603f830116810181811084821117156149635761496361507a565b60405284815283810192508684018288018501891015614981578687fd5b8692505b858310156149a3578035845292840192600192909201918401614985565b50979650505050505050565b6000602082840312156149c0578081fd5b8135610acd81615090565b600080604083850312156149dd578081fd5b82356149e881615090565b915060208301356149f881615090565b809150509250929050565b600080600060608486031215614a17578081fd5b8335614a2281615090565b92506020840135614a3281615090565b929592945050506040919091013590565b60008060408385031215614a55578182fd5b8235614a6081615090565b946020939093013593505050565b60008060808385031215614a80578182fd5b614a8a848461489c565b9150614a99846040850161489c565b90509250929050565b600080600060a08486031215614ab6578283fd5b614ac0858561489c565b9250614acf856040860161489c565b91506080840135614adf81615090565b809150509250925092565b600060208284031215614afb578081fd5b81518015158114610acd578182fd5b600080600060608486031215614a17578283fd5b600080600080600060a08688031215614b35578081fd5b8535614b4081615090565b94506020860135614b5081615090565b935060408601359250606086013591506080860135614b6e81615090565b809150509295509295909350565b60008060008060008060c08789031215614b94578384fd5b8635614b9f81615090565b95506020870135614baf81615090565b945060408701359350606087013592506080870135614bcd81615090565b915060a0870135614bdd81615090565b809150509295509295509295565b600060208284031215614bfc578081fd5b5035919050565b600060208284031215614c14578081fd5b5051919050565b60008060408385031215614c2d578182fd5b82359150602083013567ffffffffffffffff811115614c4a578182fd5b614c5685828601614911565b9150509250929050565b600080600060608486031215614c74578081fd5b83359250602084013567ffffffffffffffff811115614c91578182fd5b614c9d86828701614911565b9250506040840135614adf81615090565b60008060008060808587031215614cc3578182fd5b84519350602085015192506040850151614cdc81615090565b6060860151909250614ced81615090565b939692955090935050565b600080600060608486031215614d0c578081fd5b8351925060208401519150604084015190509250925092565b8060005b6002811015612a8b578151845260209384019390910190600101614d29565b60008251614d5a818460208701614fe8565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015614da65781516001600160a01b031684529284019290840190600101614d81565b50505083810382850152845180825285830191830190845b81811015614dda57835183529284019291840191600101614dbe565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614e285783516001600160a01b031683529284019291840191600101614e03565b50909695505050505050565b60408101610aa88284614d25565b6020815260008251806020840152614e61816040850160208701614fe8565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f537761703a205265736375652046756e6473204163636573732044656e696564604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b82815260608101610acd6020830184614d25565b60006001600160801b03808316818516808303821115614f4c57614f4c615064565b01949350505050565b60008219821115614f6857614f68615064565b500190565b600060ff821660ff84168060ff03821115614f8a57614f8a615064565b019392505050565b600082614fad57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614fcc57614fcc615064565b500290565b600082821015614fe357614fe3615064565b500390565b60005b83811015615003578181015183820152602001614feb565b83811115612a8b5750506000910152565b600181811c9082168061502857607f821691505b60208210811415612c8957634e487b7160e01b600052602260045260246000fd5b600060001982141561505d5761505d615064565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fcf57600080fdfea2646970667358221220ecbb9b635b1eea04620b447eb798dd72600aef154cfc5641551055ba43e90b5864736f6c63430008040033a2646970667358221220a8da87fe6b6170cd20137777a8d0936db47e1a12d781fa271d4c5b023bb9802e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b92440b014610030575b600080fd5b61004361003e366004610160565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000878787878787336040516100749061010b565b610084979695949392919061022f565b604051809103906000f0801580156100a0573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b50505050979650505050505050565b6157f1806200029e83390190565b60008083601f84011261012a578182fd5b50813567ffffffffffffffff811115610141578182fd5b60208301915083602082850101111561015957600080fd5b9250929050565b600080600080600080600060a0888a03121561017a578283fd5b873561018581610285565b9650602088013561019581610285565b9550604088013567ffffffffffffffff808211156101b1578485fd5b6101bd8b838c01610119565b909750955060608a01359150808211156101d5578485fd5b506101e28a828b01610119565b90945092505060808801356101f681610285565b8091505092959891949750929550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808a168352808916602084015260a0604084015261025a60a08401888a610206565b838103606085015261026d818789610206565b92505080841660808401525098975050505050505050565b6001600160a01b038116811461029a57600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620057f1380380620057f183398101604081905262000034916200055a565b80838381600390805190602001906200004f9291906200040b565b508051620000659060049060208401906200040b565b505050620000826200007c6200035a60201b60201c565b6200035e565b6001600655600780546001600160a01b0319166001600160a01b0383169081179091556040805163043759e560e31b815290516200012d92916321bacf28916004808301926020929190829003018186803b158015620000e157600080fd5b505afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c919062000603565b620003b060201b620028811760201c565b6008600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000197816001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b600c600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000201816001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b601080546001600160681b0392909216600160681b02600160681b600160d01b0319909216919091179055508251620002815760405162461bcd60e51b815260206004820152601360248201527f537761703a204e616d6520497320456d7074790000000000000000000000000060448201526064015b60405180910390fd5b6000825111620002d45760405162461bcd60e51b815260206004820152601560248201527f537761703a2053796d626f6c20497320456d7074790000000000000000000000604482015260640162000278565b836001600160a01b0316856001600160a01b03161415620003385760405162461bcd60e51b815260206004820152601860248201527f537761703a2054776f20546f6b656e732049732053616d650000000000000000604482015260640162000278565b5050506001600160601b0319606092831b8116608052911b1660a05262000688565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000600160681b8210620004075760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015260640162000278565b5090565b82805462000419906200061c565b90600052602060002090601f0160209004810192826200043d576000855562000488565b82601f106200045857805160ff191683800117855562000488565b8280016001018555821562000488579182015b82811115620004885782518255916020019190600101906200046b565b50620004079291505b8082111562000407576000815560010162000491565b600082601f830112620004b8578081fd5b81516001600160401b0380821115620004d557620004d562000659565b604051601f8301601f19908116603f0116810190828211818310171562000500576200050062000659565b816040528381526020925086838588010111156200051c578485fd5b8491505b838210156200053f578582018301518183018401529082019062000520565b838211156200055057848385830101525b9695505050505050565b600080600080600060a0868803121562000572578081fd5b85516200057f816200066f565b602087015190955062000592816200066f565b60408701519094506001600160401b0380821115620005af578283fd5b620005bd89838a01620004a7565b94506060880151915080821115620005d3578283fd5b50620005e288828901620004a7565b9250506080860151620005f5816200066f565b809150509295509295909350565b60006020828403121562000615578081fd5b5051919050565b600181811c908216806200063157607f821691505b602082108114156200065357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200068557600080fd5b50565b60805160601c60a05160601c6150db620007166000396000818161087e01528181610c5e015281816112ba01528181611356015281816115c701528181611f340152818161274001526133d201526000818161030501528181610c390152818161128301528181611304015281816115a201528181611ed201528181612710015261339501526150db6000f3fe6080604052600436106102935760003560e01c806393028d831161015a578063cad07066116100c1578063e331d0391161007a578063e331d03914610919578063e4b50cb81461092c578063ee5d18591461094c578063f2fde38b14610992578063f3bf09bb146109b2578063f76d13b4146109ed57600080fd5b8063cad0706614610827578063ced72f8714610847578063d21220a71461086c578063d2fd9eba146108a0578063d5bcb9b5146108c0578063dd62ed3e146108d357600080fd5b8063a9059cbb11610113578063a9059cbb146106d9578063aa6ca808146106f9578063ac9d6f951461071b578063b1ec4c4014610786578063bd10cd80146107e7578063c515ee231461080757600080fd5b806393028d831461063c578063936f0a151461065157806395d89b41146106715780639ab7fdd6146106865780639ea5ce0a146106a6578063a457c2d7146106b957600080fd5b8063487ca261116101fe57806370a08231116101b757806370a0823114610584578063715018a6146105a4578063728c769a146105b957806378e3214f146105de5780638da5cb5b146105fe578063907e4f361461061c57600080fd5b8063487ca261146104c85780634b4c9ce5146104ea5780635915d8061461050a5780635a08c2611461052a5780636515aa291461054a5780636669302a1461056f57600080fd5b806323b872dd1161025057806323b872dd146103fe5780632a519ec81461041e5780633049105d1461043e578063313ce5671461045f578063395093511461047b5780633c6216a61461049b57600080fd5b806306fdde0314610298578063095ea7b3146102c35780630dfe1681146102f357806318160ddd1461033f5780631a08b5551461035e5780631f495dda146103c3575b600080fd5b3480156102a457600080fd5b506102ad610a02565b6040516102ba9190614e42565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004614a43565b610a94565b60405190151581526020016102ba565b3480156102ff57600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ba565b34801561034b57600080fd5b506002545b6040519081526020016102ba565b34801561036a57600080fd5b506008546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060016102ba565b3480156103cf57600080fd5b506010546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b34801561040a57600080fd5b506102e3610419366004614a03565b610aae565b34801561042a57600080fd5b506103506104393660046149af565b610ad4565b61045161044c366004614a6e565b610b8d565b6040516102ba929190614f16565b34801561046b57600080fd5b50604051601281526020016102ba565b34801561048757600080fd5b506102e3610496366004614a43565b610bad565b3480156104a757600080fd5b506104bb6104b6366004614c60565b610bec565b6040516102ba9190614e34565b3480156104d457600080fd5b506104e86104e3366004614beb565b610eb2565b005b3480156104f657600080fd5b506103506105053660046149af565b610fd2565b34801561051657600080fd5b506104bb610525366004614c1b565b61105a565b34801561053657600080fd5b506104e8610545366004614beb565b61106d565b34801561055657600080fd5b50600c54600160681b90046001600160681b0316610350565b34801561057b57600080fd5b506104e8611194565b34801561059057600080fd5b5061035061059f3660046149af565b6111d3565b3480156105b057600080fd5b506104e86111ee565b3480156105c557600080fd5b50601054600160681b90046001600160681b0316610350565b3480156105ea57600080fd5b506104e86105f9366004614a43565b611222565b34801561060a57600080fd5b506005546001600160a01b0316610327565b34801561062857600080fd5b50600754610327906001600160a01b031681565b34801561064857600080fd5b506104e86113cf565b34801561065d57600080fd5b5061035061066c3660046149af565b61140c565b34801561067d57600080fd5b506102ad611494565b34801561069257600080fd5b506103506106a13660046149af565b6114a3565b6104516106b4366004614aa2565b61155c565b3480156106c557600080fd5b506102e36106d4366004614a43565b611e05565b3480156106e557600080fd5b506102e36106f4366004614a43565b611ea2565b34801561070557600080fd5b5061070e611eb0565b6040516102ba9190614de7565b34801561072757600080fd5b506107616107363660046149af565b6016602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b604080516001600160d81b03909316835264ffffffffff9091166020830152016102ba565b34801561079257600080fd5b506107c76107a13660046149af565b6014602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016102ba565b3480156107f357600080fd5b506103506108023660046149af565b611f97565b34801561081357600080fd5b50610350610822366004614b0a565b612050565b34801561083357600080fd5b506104e8610842366004614beb565b61209d565b34801561085357600080fd5b50600854600160681b90046001600160681b0316610350565b34801561087857600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ac57600080fd5b506104e86108bb3660046149af565b61220f565b6103506108ce366004614b1e565b61234d565b3480156108df57600080fd5b506103506108ee3660046149cb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610350610927366004614b7c565b612367565b34801561093857600080fd5b50610327610947366004614beb565b612706565b34801561095857600080fd5b506107616109673660046149af565b6015602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b34801561099e57600080fd5b506104e86109ad3660046149af565b6127ac565b3480156109be57600080fd5b50600c546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b3480156109f957600080fd5b506104e8612844565b606060038054610a1190615014565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3d90615014565b8015610a8a5780601f10610a5f57610100808354040283529160200191610a8a565b820191906000526020600020905b815481529060010190602001808311610a6d57829003601f168201915b5050505050905090565b600033610aa28185856128da565b60019150505b92915050565b600033610abc8582856129ff565b610ac7858585612a91565b60019150505b9392505050565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190614c03565b6001600160a01b03841660009081526013602090815260409182902082519182019092529054815290612c6a565b6000610b9761487e565b610ba284843361155c565b915091509250929050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610aa29082908690610be7908790614f55565b6128da565b610bf461487e565b60026006541415610c205760405162461bcd60e51b8152600401610c1790614edf565b60405180910390fd5b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526000610c8e60025490565b90506000610cac6010546001600160681b03600160681b9091041690565b9050610cb83388612c8f565b60005b6002811015610e4f576000848260028110610ce657634e487b7160e01b600052603260045260246000fd5b602002015190506000610d026001600160a01b03831630612de6565b90506000610d1a86610d14848e612e80565b90612e8c565b9050610d306001600160a01b0384168a83612e98565b80888560028110610d5157634e487b7160e01b600052603260045260246000fd5b6020020152895184101580610d8d5750898481518110610d8157634e487b7160e01b600052603260045260246000fd5b60200260200101518110155b610dd95760405162461bcd60e51b815260206004820152601a60248201527f537761703a20526573756c74204973204e6f7420456e6f7567680000000000006044820152606401610c17565b610e098583610de8898f612ef6565b6001600160a01b03871660009081526016602052604090209291908a612f02565b610e398583610e18898f612ef6565b6001600160a01b03871660009081526015602052604090209291908a612f02565b5050508080610e4790615049565b915050610cbb565b508351602080860151604080518b8152928301939093528183015290516001600160a01b0387169133917f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc9181900360600190a350506001600655509392505050565b662386f26fc10000811115610f005760405162461bcd60e51b815260206004820152601460248201527308ccaca40acdee8ca4092e640a8dede4090d2ced60631b6044820152606401610c17565b336000818152600b6020908152604091829020825191820190925290548152610fcf9190610f2d84612f5f565b610f36336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf9190614c03565b6008959493929190612f8e612fe2565b50565b600080610fe86001600160a01b03841630612de6565b9050610acd61105461100a6010546001600160681b03600160681b9091041690565b6001600160a01b0386166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084612ffd565b82613058565b61106261487e565b610acd838333610bec565b670de0b6b3a76400008111156110c55760405162461bcd60e51b815260206004820152601d60248201527f536c6970706167652046656520566f746520497320546f6f20486967680000006044820152606401610c17565b336000818152600f6020908152604091829020825191820190925290548152610fcf91906110f284612f5f565b6110fb336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190614c03565b600c95949392919061306f612fe2565b336000818152600f6020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d19291906110f2565b565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146112185760405162461bcd60e51b8152600401610c1790614e75565b6111d160006130b9565b600260065414156112455760405162461bcd60e51b8152600401610c1790614edf565b60026006556005546001600160a01b031633146112745760405162461bcd60e51b8152600401610c1790614e75565b60006112a96001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b905060006112e06001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b90506112f66001600160a01b0385163385612e98565b8161132a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b10156113485760405162461bcd60e51b8152600401610c1790614eaa565b8061137c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612de6565b101561139a5760405162461bcd60e51b8152600401610c1790614eaa565b6103e86113a6306111d3565b10156113c45760405162461bcd60e51b8152600401610c1790614eaa565b505060016006555050565b336000818152600b6020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d1929190610f2d565b6000806114226001600160a01b03841630612de6565b9050610acd61148e6114446010546001600160681b03600160681b9091041690565b6001600160a01b0386166000908152601660209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084612ffd565b8261310b565b606060048054610a1190615014565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f657600080fd5b505afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190614c03565b6001600160a01b0384166000908152600f602090815260409182902082519182019092529054815290612c6a565b600061156661487e565b600260065414156115895760405162461bcd60e51b8152600401610c1790614edf565b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526116058160005b60200201516001600160a01b03161590565b611629576116148160016115f3565b61161f57600061162c565b602086015161162c565b85515b341461167a5760405162461bcd60e51b815260206004820152601760248201527f537761703a2057726f6e672056616c75652055736167650000000000000000006044820152606401610c17565b600061168560025490565b9050806118a8576116996103e86063612e80565b93506116a7306103e861311a565b60005b60028110156118a2576116e1858983600281106116d757634e487b7160e01b600052603260045260246000fd5b6020020151613058565b9450600088826002811061170557634e487b7160e01b600052603260045260246000fd5b60200201511161174e5760405162461bcd60e51b8152602060048201526014602482015273537761703a20416d6f756e74204973205a65726f60601b6044820152606401610c17565b86816002811061176e57634e487b7160e01b600052603260045260246000fd5b602002015188826002811061179357634e487b7160e01b600052603260045260246000fd5b602002015110156117e65760405162461bcd60e51b815260206004820152601c60248201527f537761703a204d696e20416d6f756e74204e6f742052656163686564000000006044820152606401610c17565b61184633308a846002811061180b57634e487b7160e01b600052603260045260246000fd5b602002015186856002811061183057634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316929190613205565b87816002811061186657634e487b7160e01b600052603260045260246000fd5b602002015184826002811061188b57634e487b7160e01b600052603260045260246000fd5b60200201528061189a81615049565b9150506116aa565b50611d47565b6118b061487e565b60005b60028110156119645761192d6118e28583600281106115f357634e487b7160e01b600052603260045260246000fd5b6118ed5760006118ef565b345b6119273087856002811061191357634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031690612de6565b9061335c565b82826002811061194d57634e487b7160e01b600052603260045260246000fd5b60200201528061195c81615049565b9150506118b3565b50600019945060005b60028110156119ea576119d6866119d184846002811061199d57634e487b7160e01b600052603260045260246000fd5b6020020151610d148d86600281106119c557634e487b7160e01b600052603260045260246000fd5b60200201518890612e80565b61310b565b9550806119e281615049565b91505061196d565b508460005b6002811015611c2a5760008a8260028110611a1a57634e487b7160e01b600052603260045260246000fd5b602002015111611a635760405162461bcd60e51b8152602060048201526014602482015273537761703a20416d6f756e74204973205a65726f60601b6044820152606401610c17565b6000611aac85610d14611a77600183614fd1565b611aa687898860028110611a9b57634e487b7160e01b600052603260045260246000fd5b602002015190612e80565b90612ef6565b9050898260028110611ace57634e487b7160e01b600052603260045260246000fd5b6020020151811015611b225760405162461bcd60e51b815260206004820152601c60248201527f537761703a204d696e20416d6f756e74204e6f742052656163686564000000006044820152606401610c17565b611b4833308389866002811061183057634e487b7160e01b600052603260045260246000fd5b611b94848360028110611b6b57634e487b7160e01b600052603260045260246000fd5b60200201516119273089866002811061191357634e487b7160e01b600052603260045260246000fd5b878360028110611bb457634e487b7160e01b600052603260045260246000fd5b6020020152611c14886119d1868560028110611be057634e487b7160e01b600052603260045260246000fd5b6020020151610d148b8760028110611c0857634e487b7160e01b600052603260045260246000fd5b60200201518a90612e80565b9750508080611c2290615049565b9150506119ef565b50601054600160681b90046001600160681b031660005b6002811015611d4257611cd882858360028110611c6e57634e487b7160e01b600052603260045260246000fd5b6020020151611c7d888c612ef6565b88601660008c8860028110611ca257634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020612f0290949392919063ffffffff16565b611d3082858360028110611cfc57634e487b7160e01b600052603260045260246000fd5b6020020151611d0b888c612ef6565b88601560008c8860028110611ca257634e487b7160e01b600052603260045260246000fd5b80611d3a81615049565b915050611c41565b505050505b60008411611d975760405162461bcd60e51b815260206004820152601a60248201527f537761703a20526573756c74204973204e6f7420456e6f7567680000000000006044820152606401610c17565b611da1858561311a565b825160208085015160408051888152928301939093528183015290516001600160a01b0387169133917f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c4229181900360600190a3505060016006559094909350915050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015611e8a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c17565b611e9782868684036128da565b506001949350505050565b600033610aa2818585612a91565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611f1257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611f7457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6000610aa8600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190614c03565b6001600160a01b0384166000908152600b602090815260409182902082519182019092529054815290612c6a565b600061209584848461206188610fd2565b61206a8861140c565b600854600160681b90046001600160681b0316600c54600160681b90046001600160681b0316613368565b949350505050565b61012c8111156120ef5760405162461bcd60e51b815260206004820152601d60248201527f446563617920506572696f6420566f746520497320546f6f20486967680000006044820152606401610c17565b603c8110156121405760405162461bcd60e51b815260206004820152601c60248201527f446563617920506572696f6420566f746520497320546f6f204c6f77000000006044820152606401610c17565b33600081815260136020908152604091829020825191820190925290548152610fcf919061216d84612f5f565b612176336111d3565b600254600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c757600080fd5b505afa1580156121db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ff9190614c03565b60109594939291906134b1612fe2565b6005546001600160a01b031633146122395760405162461bcd60e51b8152600401610c1790614e75565b600780546001600160a01b0319166001600160a01b038316179055604080516393028d8360e01b8152905130916393028d8391600480830192600092919082900301818387803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b50505050306001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b50505050306001600160a01b031663f76d13b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561233257600080fd5b505af1158015612346573d6000803e3d6000fd5b5050505050565b600061235d868686868633612367565b9695505050505050565b60006002600654141561238c5760405162461bcd60e51b8152600401610c1790614edf565b6002600655600754604080516308bcf8b560e21b815290516001600160a01b03909216916322f3e2d491600480820192602092909190829003018186803b1580156123d657600080fd5b505afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190614aea565b61245a5760405162461bcd60e51b815260206004820152601960248201527f537761703a20466163746f72792049732053687574646f776e000000000000006044820152606401610c17565b6001600160a01b03871615612470576000612472565b845b34146124b45760405162461bcd60e51b8152602060048201526011602482015270537761703a2057726f6e672056616c756560781b6044820152606401610c17565b600060405180604001604052806124fe6124de8b6001600160a01b03166001600160a01b03161590565b6124e95760006124eb565b345b6119276001600160a01b038d1630612de6565b81526020016125166001600160a01b038a1630612de6565b8152509050600061253a604051806040016040528060008152602001600081525090565b600060405180604001604052806125616008546001600160681b03600160681b9091041690565b8152602001612580600c546001600160681b03600160681b9091041690565b905290506125938b8b8b8b8a89876134fb565b8094508197508295505050508a6001600160a01b0316866001600160a01b0316336001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a886000015189602001518f604051612631969594939291906001600160a01b039687168152602081019590955260408501939093526060840191909152608083015290911660a082015260c00190565b60405180910390a4612646838689878561379a565b6001600160a01b038b16600090815260146020526040812080548592906126779084906001600160801b0316614f2a565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038d166000908152601460205260409020805488935090916010916126cc918591600160801b900416614f2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505060016006819055509695505050505050565b60008161273457507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001141561276457507f0000000000000000000000000000000000000000000000000000000000000000919050565b60405162461bcd60e51b815260206004820152601f60248201527f537761703a20506f6f6c2048617665204f6e6c792054776f20546f6b656e73006044820152606401610c17565b6005546001600160a01b031633146127d65760405162461bcd60e51b8152600401610c1790614e75565b6001600160a01b03811661283b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c17565b610fcf816130b9565b33600081815260136020908152604080832081518084018352905481528151808401835284905281519283019091529181526111d192919061216d565b6000600160681b82106128d65760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610c17565b5090565b6001600160a01b03831661293c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c17565b6001600160a01b03821661299d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c17565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114612a8b5781811015612a7e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c17565b612a8b84848484036128da565b50505050565b6001600160a01b038316612af55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c17565b6001600160a01b038216612b575760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c17565b612b62838383613c85565b6001600160a01b03831660009081526020819052604090205481811015612bda5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c17565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290612c11908490614f55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612c5d91815260200190565b60405180910390a3612a8b565b815160009015612c89578251612c8290600190614fd1565b9050610aa8565b50919050565b6001600160a01b038216612cef5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c17565b612cfb82600083613c85565b6001600160a01b03821660009081526020819052604090205481811015612d6f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c17565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612d9e908490614fd1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016129f2565b505050565b60006001600160a01b038316612e0757506001600160a01b03811631610aa8565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b158015612e4857600080fd5b505afa158015612e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c829190614c03565b6000610acd8284614fb2565b6000610acd8284614f92565b8015612de1576001600160a01b038316612ee2576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612a8b573d6000803e3d6000fd5b612de16001600160a01b0384168383613f75565b6000610acd8284614f55565b61234685612f5a83610d14612f1882600161335c565b604080518082019091528b546001600160d81b0381168252600160d81b900464ffffffffff166020820152611aa6908990612f54908d8d612ffd565b90612e80565b613fd8565b6040805160208101909152600081526040518060200160405280836001612f869190614f55565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907fc00d9debcc1737a88e76a969557b14246f013c43c1328eab2cbac00c1714d0ca906060015b60405180910390a250505050565b612ff3888888888889898989614016565b5050505050505050565b600080613022846119d1876020015164ffffffffff164261335c90919063ffffffff16565b90506000613030858361335c565b905061235d85610d146130438786612e80565b8951611aa6906001600160d81b031686612e80565b6000818310156130685781610acd565b5090919050565b6040805184815283151560208201529081018290526001600160a01b038516907f4ad9a834867d5460d12562e53fb43cfa76081110dbc58da81b8aeded6813639f90606001612fd4565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106130685781610acd565b6001600160a01b0382166131705760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c17565b61317c60008383613c85565b806002600082825461318e9190614f55565b90915550506001600160a01b038216600090815260208190526040812080548392906131bb908490614f55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8015612a8b576001600160a01b038416613347578034101561325f5760405162461bcd60e51b81526020600482015260136024820152720acc2d8eaca4092e640dcdee8408adcdeeaced606b1b6044820152606401610c17565b6001600160a01b03831633146132b05760405162461bcd60e51b8152602060048201526016602482015275233937b69024b9902737ba102a34329029b2b73232b960511b6044820152606401610c17565b6001600160a01b03821630146132f95760405162461bcd60e51b815260206004820152600e60248201526d546f204973204e6f74207468697360901b6044820152606401610c17565b80341115613342576001600160a01b0383166108fc613318348461335c565b6040518115909202916000818181858888f19350505050158015613340573d6000803e3d6000fd5b505b612a8b565b612a8b6001600160a01b0385168484846142b9565b6000610acd8284614fd1565b6000866001600160a01b0316886001600160a01b03161115613388579596955b6000861180156133c957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316145b801561340657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316145b156134a257600061342d613426670de0b6b3a7640000610d148a88612e80565b889061335c565b9050600061343b8783612ef6565b9050600061344d82610d14858a612e80565b9050600061347061345e8786612e80565b611927670de0b6b3a764000086612e80565b90506000613486670de0b6b3a764000085612e80565b905061349681610d148585612e80565b955050505050506134a6565b5060005b979650505050505050565b6040805184815283151560208201529081018290526001600160a01b038516907fdb1350180a01d00beab06bdea8ddb5c0cacdce847a28cfaaeabf9075c26d5aa090606001612fd4565b60008061351b604051806040016040528060008152602001600081525090565b601054600090600160681b90046001600160681b031686516001600160a01b038d166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff169082015291925061358591908390612ffd565b80835286516135949190613058565b82526020868101516001600160a01b038c166000908152601683526040908190208151808301909252546001600160d81b0381168252600160d81b900464ffffffffff16928101929092526135eb91908390612ffd565b6020808401829052870151613600919061310b565b602083015261361a6001600160a01b038c1633308c613205565b8551613633906119276001600160a01b038e1630612de6565b93506136548b8b86856000015186602001518a600001518b60200151613368565b92506000831180156136665750878310155b6136b25760405162461bcd60e51b815260206004820152601a60248201527f537761703a2052657475726e204973204e6f7420456e6f7567680000000000006044820152606401610c17565b6136c66001600160a01b038b168885612e98565b85518251146136fd5781516136fd906136df9086612ef6565b6001600160a01b038d16600090815260156020526040902090613fd8565b856020015182602001511461373d57602082015161373d9061371f908561335c565b6001600160a01b038c16600090815260166020526040902090613fd8565b85516001600160a01b038c1660009081526016602052604090206137629183906142f1565b6020808701516001600160a01b038c1660009081526015909252604090912061378c9183906142f1565b509750975097945050505050565b600080600080600760009054906101000a90046001600160a01b03166001600160a01b03166323a65ab66040518163ffffffff1660e01b815260040160806040518083038186803b1580156137ee57600080fd5b505afa158015613802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138269190614cae565b935093509350935060008060006ec097ce7bc90715b34b9f1000000000905061386e8960000151610d146138678f8d60000151612ef690919063ffffffff16565b8490612e80565b60208a015190915061388790610d14613867828f61335c565b90506ec097ce7bc90715b34b9f1000000000811115613c19576138a98161432d565b905060006138ce82610d146138c682670de0b6b3a764000061335c565b600254612f54565b90506001600160a01b038b166138e55760006138fb565b6138fb670de0b6b3a7640000610d14838b612e80565b93506001600160a01b038616613912576000613928565b613928670de0b6b3a7640000610d14838a612e80565b92506001600160a01b03851661395d578315613948576139488b8561311a565b821561395857613958868461311a565b613c17565b600084118061396c5750600083115b15613c17576000808411613981576000613984565b60015b60008611613993576000613996565b60015b6139a09190614f6d565b60ff16905060008167ffffffffffffffff8111156139ce57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156139f7578160200160208202803683370190505b50905060008267ffffffffffffffff811115613a2357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613a4c578160200160208202803683370190505b5090508d82600081518110613a7157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613ab357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528515613b3f578882613ad1600186614fd1565b81518110613aef57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528581613b14600186614fd1565b81518110613b3257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60405163024c5d4f60e21b81526001600160a01b03891690630931753c90613b6d9085908590600401614d64565b600060405180830381600087803b158015613b8757600080fd5b505af1925050508015613b98575060015b613c00577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051613bf390602080825260159082015274155c19185d194814995dd85c991cc811985a5b1959605a1b604082015260600190565b60405180910390a1613c13565b613c1388613c0e8989612ef6565b61311a565b5050505b505b88516020808b01518a518b83015160408051958652938501929092528383015260608301526080820185905260a08201849052517f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd69181900360c00190a1505050505050505050505050565b816001600160a01b0316836001600160a01b03161415613ca457505050565b6007546001600160a01b039081169060009085161580613d385750604051633b90b9bf60e01b81526001600160a01b038681166004830152831690633b90b9bf9060240160206040518083038186803b158015613d0057600080fd5b505afa158015613d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d389190614aea565b15905060006001600160a01b0385161580613dc75750604051633b90b9bf60e01b81526001600160a01b038681166004830152841690633b90b9bf9060240160206040518083038186803b158015613d8f57600080fd5b505afa158015613da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc79190614aea565b15905081158015613dd6575080155b15613de357505050505050565b60006001600160a01b038716613dfa576000613e03565b613e03876111d3565b905060006001600160a01b038716613e1c576000613e25565b613e25876111d3565b90506000613e676001600160a01b03891615613e42576000613e44565b875b6119276001600160a01b038c1615613e5d576000613e5f565b895b600254611aa6565b905060006040518061010001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001871515815260200186151581526020018981526020018581526020018481526020018381525090506000806000896001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160606040518083038186803b158015613efb57600080fd5b505afa158015613f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f339190614cf8565b925092509250613f488484612f8e60086143a4565b613f57848361306f600c6143a4565b613f6684826134b160106143a4565b50505050505050505050505050565b6040516001600160a01b038316602482015260448101829052612de190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526144f1565b613fe1816145c3565b613fea42614618565b6001600160d81b039190911664ffffffffff909116600160d81b026001600160d81b0319161790915550565b600189015460028a015481908061402c8b511590565b156140425761403b818a61335c565b9050614063565b6140606140596140528d89612c6a565b8b90612e80565b849061335c565b92505b895161407a57614073818a612ef6565b905061409b565b61409861409161408a8c89612c6a565b8a90612e80565b8490612ef6565b92505b8383146140aa5760018d018390555b8181146140b95760028d018190555b600087156140de576140d988610d146140d2858b612e80565b8790612ef6565b6140e0565b865b905060008e6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905080602001516001600160681b031682146142745760008f6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905061424161423c8361466f565b612881565b61424a84612881565b614253426146ea565b65ffffffffffff1660408401526001600160681b0390811660208401521690525b50508a518a511461429e576001600160a01b038c16600090815260038e01602052604090208a5190555b613f668c6142ac8c89612c6a565b8c51158b8963ffffffff16565b6040516001600160a01b0380851660248301528316604482015260648101829052612a8b9085906323b872dd60e01b90608401613fa1565b6040805180820190915283546001600160d81b0381168252600160d81b900464ffffffffff166020820152612de1908490612f5a908585612ffd565b6000600382111561438e57816000614346600283614f92565b614351906001614f55565b90505b818110156143875790508060028161436c8187614f92565b6143769190614f55565b6143809190614f92565b9050614354565b5092915050565b811561439c57506001919050565b506000919050565b83516001600160a01b03908116600090815260038301602081815260408084208151808401835290548152828a0151909516845291815291819020815192830190915254815281511580156143f857508051155b8015614405575085604001515b8015614412575085606001515b1561448457855161444d906144278488612c6a565b60016144448a608001518b60a0015161335c90919063ffffffff16565b8863ffffffff16565b602086015161447d906144608388612c6a565b60016144448a608001518b60c00151612ef690919063ffffffff16565b5050612a8b565b8560400151156144be57855160a087015160808801516144be929185916144ac90829061335c565b60e08b01518894939291908b8b614742565b8560600151156144e957602086015160c087015160808801516144e9929184916144ac908290612ef6565b505050505050565b6000614546826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661477a9092919063ffffffff16565b805190915015612de157808060200190518101906145649190614aea565b612de15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c17565b6000600160d81b82106128d65760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20323136206269747300006044820152606401610c17565b60006501000000000082106128d65760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343020626974730000006044820152606401610c17565b600080614698620151806119d1856040015165ffffffffffff164261335c90919063ffffffff16565b905060006146a9620151808361335c565b905061209562015180610d146146d58588602001516001600160681b0316612e8090919063ffffffff16565b8751611aa6906001600160681b031686612e80565b6000660100000000000082106128d65760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610c17565b612ff388888887156147545789614770565b6040805160208082018352600091829052825190810190925281525b8989898989614016565b60606120958484600085856001600160a01b0385163b6147dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c17565b600080866001600160a01b031685876040516147f89190614d48565b60006040518083038185875af1925050503d8060008114614835576040519150601f19603f3d011682016040523d82523d6000602084013e61483a565b606091505b50915091506134a682828660608315614854575081610acd565b8251156148645782518084602001fd5b8160405162461bcd60e51b8152600401610c179190614e42565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126148ac578081fd5b6040516040810181811067ffffffffffffffff821117156148cf576148cf61507a565b80604052508083856040860111156148e5578384fd5b835b60028110156149065781358352602092830192909101906001016148e7565b509195945050505050565b600082601f830112614921578081fd5b8135602067ffffffffffffffff8083111561493e5761493e61507a565b8260051b604051601f19603f830116810181811084821117156149635761496361507a565b60405284815283810192508684018288018501891015614981578687fd5b8692505b858310156149a3578035845292840192600192909201918401614985565b50979650505050505050565b6000602082840312156149c0578081fd5b8135610acd81615090565b600080604083850312156149dd578081fd5b82356149e881615090565b915060208301356149f881615090565b809150509250929050565b600080600060608486031215614a17578081fd5b8335614a2281615090565b92506020840135614a3281615090565b929592945050506040919091013590565b60008060408385031215614a55578182fd5b8235614a6081615090565b946020939093013593505050565b60008060808385031215614a80578182fd5b614a8a848461489c565b9150614a99846040850161489c565b90509250929050565b600080600060a08486031215614ab6578283fd5b614ac0858561489c565b9250614acf856040860161489c565b91506080840135614adf81615090565b809150509250925092565b600060208284031215614afb578081fd5b81518015158114610acd578182fd5b600080600060608486031215614a17578283fd5b600080600080600060a08688031215614b35578081fd5b8535614b4081615090565b94506020860135614b5081615090565b935060408601359250606086013591506080860135614b6e81615090565b809150509295509295909350565b60008060008060008060c08789031215614b94578384fd5b8635614b9f81615090565b95506020870135614baf81615090565b945060408701359350606087013592506080870135614bcd81615090565b915060a0870135614bdd81615090565b809150509295509295509295565b600060208284031215614bfc578081fd5b5035919050565b600060208284031215614c14578081fd5b5051919050565b60008060408385031215614c2d578182fd5b82359150602083013567ffffffffffffffff811115614c4a578182fd5b614c5685828601614911565b9150509250929050565b600080600060608486031215614c74578081fd5b83359250602084013567ffffffffffffffff811115614c91578182fd5b614c9d86828701614911565b9250506040840135614adf81615090565b60008060008060808587031215614cc3578182fd5b84519350602085015192506040850151614cdc81615090565b6060860151909250614ced81615090565b939692955090935050565b600080600060608486031215614d0c578081fd5b8351925060208401519150604084015190509250925092565b8060005b6002811015612a8b578151845260209384019390910190600101614d29565b60008251614d5a818460208701614fe8565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015614da65781516001600160a01b031684529284019290840190600101614d81565b50505083810382850152845180825285830191830190845b81811015614dda57835183529284019291840191600101614dbe565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614e285783516001600160a01b031683529284019291840191600101614e03565b50909695505050505050565b60408101610aa88284614d25565b6020815260008251806020840152614e61816040850160208701614fe8565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f537761703a205265736375652046756e6473204163636573732044656e696564604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b82815260608101610acd6020830184614d25565b60006001600160801b03808316818516808303821115614f4c57614f4c615064565b01949350505050565b60008219821115614f6857614f68615064565b500190565b600060ff821660ff84168060ff03821115614f8a57614f8a615064565b019392505050565b600082614fad57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614fcc57614fcc615064565b500290565b600082821015614fe357614fe3615064565b500390565b60005b83811015615003578181015183820152602001614feb565b83811115612a8b5750506000910152565b600181811c9082168061502857607f821691505b60208210811415612c8957634e487b7160e01b600052602260045260246000fd5b600060001982141561505d5761505d615064565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fcf57600080fdfea2646970667358221220ecbb9b635b1eea04620b447eb798dd72600aef154cfc5641551055ba43e90b5864736f6c63430008040033a2646970667358221220a8da87fe6b6170cd20137777a8d0936db47e1a12d781fa271d4c5b023bb9802e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Helper contract to deploy pools ",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}