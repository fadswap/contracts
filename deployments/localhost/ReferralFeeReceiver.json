{
  "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fadToken",
          "type": "address"
        },
        {
          "internalType": "contract ISwapFactory",
          "name": "_swapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "claimCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "claimFrozenEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fadToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "freezeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pathWhitlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFactory",
      "outputs": [
        {
          "internalType": "contract ISwapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstUnprocessedEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Swap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updatePathWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5df5772bd606885518a8b25a07d3ec8a4f566a73c8774ba598b85b62c99d2012",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
    "transactionIndex": 0,
    "gasUsed": "3008076",
    "logsBloom": "0x
    "blockHash": "0xef4f69a95f31085edaf699b3d964a275caaedfb631dca9347bf012cd16639f2d",
    "transactionHash": "0x5df5772bd606885518a8b25a07d3ec8a4f566a73c8774ba598b85b62c99d2012",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0x5df5772bd606885518a8b25a07d3ec8a4f566a73c8774ba598b85b62c99d2012",
        "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xef4f69a95f31085edaf699b3d964a275caaedfb631dca9347bf012cd16639f2d"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "3008076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c"
  ],
  "numDeployments": 1,
  "solcInputHash": "5c2e1cb50205ed71a0daeb9fe0a0c667",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fadToken\",\"type\":\"address\"},{\"internalType\":\"contract ISwapFactory\",\"name\":\"_swapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Swap[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Swap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Swap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fadToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Swap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"freezeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathWhitlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFactory\",\"outputs\":[{\"internalType\":\"contract ISwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Swap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updatePathWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address[])\":{\"notice\":\"Collects `msg.sender`'s tokens from pools and transfers them to him \"},\"claimCurrentEpoch(address)\":{\"notice\":\"Collects current epoch `msg.sender`'s tokens from pool and transfers them to him \"},\"claimFrozenEpoch(address)\":{\"notice\":\"Collects frozen epoch `msg.sender`'s tokens from pool and transfers them to him \"},\"freezeEpoch(address)\":{\"notice\":\"Freezes current epoch and creates new as an active one \"},\"trade(address,address[])\":{\"notice\":\"Perform chain swap described by `path`. First element of `path` should match either token of the `Swap`. The last token in chain should always be `FAD` \"},\"updateReward(address,uint256)\":{\"notice\":\"Adds specified `amount` as reward to `receiver` \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralFeeReceiver.sol\":\"ReferralFeeReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ReferralFeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\r\\nimport \\\"./lib/FADERC20.sol\\\";\\r\\nimport \\\"./helpers/Converter.sol\\\";\\r\\n\\r\\n/*\\r\\n* The Referral Fee Collector\\r\\n*/\\r\\ncontract ReferralFeeReceiver is IFeeCollector, Converter, ReentrancyGuard {\\r\\n  using FADERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct UserInfo {\\r\\n    uint256 balance;\\r\\n    mapping(IERC20 => mapping(uint256 => uint256)) share;\\r\\n    mapping(IERC20 => uint256) firstUnprocessedEpoch;\\r\\n  }\\r\\n\\r\\n  struct EpochBalance {\\r\\n    uint256 totalSupply;\\r\\n    uint256 token0Balance;\\r\\n    uint256 token1Balance;\\r\\n    uint256 fadBalance;\\r\\n  }\\r\\n\\r\\n  struct TokenInfo {\\r\\n    mapping(uint256 => EpochBalance) epochBalance;\\r\\n    uint256 firstUnprocessedEpoch;\\r\\n    uint256 currentEpoch;\\r\\n  }\\r\\n\\r\\n  mapping(address => UserInfo) public userInfo;\\r\\n  mapping(IERC20 => TokenInfo) public tokenInfo;\\r\\n\\r\\n  constructor(IERC20 fadToken, ISwapFactory _swapFactory) Converter(fadToken, _swapFactory){}\\r\\n\\r\\n  /// @inheritdoc IFeeCollector\\r\\n  function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override\\r\\n  {\\r\\n    for(uint i = 0; i < receivers.length; i++) {\\r\\n      updateReward(receivers[i], amounts[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IFeeCollector\\r\\n  function updateReward(address referral, uint256 amount) public override\\r\\n  {\\r\\n    Swap swap = Swap(msg.sender);\\r\\n    TokenInfo storage token = tokenInfo[swap];\\r\\n    UserInfo storage user = userInfo[referral];\\r\\n    uint256 currentEpoch = token.currentEpoch;\\r\\n\\r\\n    // Add new reward to current epoch\\r\\n    user.share[swap][currentEpoch] = user.share[swap][currentEpoch].add(amount);\\r\\n    token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.add(amount);\\r\\n\\r\\n    // Collect all processed epochs and advance user token epoch\\r\\n    _collectProcessedEpochs(user, token, swap, currentEpoch);\\r\\n  }\\r\\n\\r\\n  /** Freezes current epoch and creates new as an active one */\\r\\n  function freezeEpoch(Swap swap) external nonReentrant validPool(swap) validSpread(swap) \\r\\n  {\\r\\n    TokenInfo storage token = tokenInfo[swap];\\r\\n    uint256 currentEpoch = token.currentEpoch;\\r\\n    require(token.firstUnprocessedEpoch == currentEpoch, \\\"Previous Epoch Is Not Finalized\\\");\\r\\n    IERC20[] memory tokens = swap.getTokens();\\r\\n    uint256 token0Balance = tokens[0].getBalanceOf(address(this));\\r\\n    uint256 token1Balance = tokens[1].getBalanceOf(address(this));\\r\\n    swap.withdraw(swap.balanceOf(address(this)), new uint256[](0));\\r\\n    token.epochBalance[currentEpoch].token0Balance = tokens[0].getBalanceOf(address(this)).sub(token0Balance);\\r\\n    token.epochBalance[currentEpoch].token1Balance = tokens[1].getBalanceOf(address(this)).sub(token1Balance);\\r\\n    token.currentEpoch = token.currentEpoch.add(1);\\r\\n  }\\r\\n\\r\\n  /** Perform chain swap described by `path`. First element of `path` should match either token of the `Swap`.\\r\\n  * The last token in chain should always be `FAD` \\r\\n  */\\r\\n  function trade(Swap swap, IERC20[] memory path) external nonReentrant validPool(swap) validSpread(swap)\\r\\n  {\\r\\n    TokenInfo storage token = tokenInfo[swap];\\r\\n    uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\r\\n    EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\r\\n    require(firstUnprocessedEpoch.add(1) == token.currentEpoch, \\\"Previous Epoch Already Finalized\\\");\\r\\n    IERC20[] memory tokens = swap.getTokens();\\r\\n    uint256 availableBalance;\\r\\n    if(path[0] == tokens[0]) {\\r\\n      availableBalance = epochBalance.token0Balance;\\r\\n    } else if(path[0] == tokens[1]) {\\r\\n      availableBalance = epochBalance.token1Balance;\\r\\n    } else {\\r\\n      revert(\\\"Invalid first token\\\");\\r\\n    }\\r\\n\\r\\n    (uint256 amount, uint256 returnAmount) = _getMaxAmountForSwap(path, availableBalance);\\r\\n    if(returnAmount == 0) {\\r\\n      // get rid of dust\\r\\n      if(availableBalance > 0) {\\r\\n        require(availableBalance == amount, \\\"Available Balance Is Not Dust\\\");\\r\\n        for(uint256 i = 0; i + 1 < path.length; i += 1) {\\r\\n          Swap _swap = swapFactory.pools(path[i], path[i + 1]);\\r\\n          require(_validateSpread(_swap), \\\"Spread Is Too Hight\\\");\\r\\n        }\\r\\n\\r\\n        if(path[0].isBNB()){\\r\\n          payable(tx.origin).transfer(availableBalance);\\r\\n        } else {\\r\\n          path[0].safeTransfer(address(swap), availableBalance);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      uint256 receivedAmount = _swap(path, amount, payable(address(this)));\\r\\n      epochBalance.fadBalance = epochBalance.fadBalance.add(receivedAmount);\\r\\n    }\\r\\n\\r\\n    if(path[0] == tokens[0]) {\\r\\n      epochBalance.token0Balance = epochBalance.token0Balance.sub(amount);\\r\\n    } else if(path[0] == tokens[1]) {\\r\\n      epochBalance.token1Balance = epochBalance.token1Balance.sub(amount);\\r\\n    }\\r\\n\\r\\n    if(epochBalance.token0Balance == 0 && epochBalance.token1Balance == 0) {\\r\\n      token.firstUnprocessedEpoch = token.firstUnprocessedEpoch.add(1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** Collects `msg.sender`'s tokens from pools and transfers them to him */\\r\\n  function claim(Swap[] memory pools) external {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n    for(uint256 i = 0; i < pools.length; i++) {\\r\\n      Swap swap = pools[i];\\r\\n      TokenInfo storage token = tokenInfo[swap];\\r\\n      _collectProcessedEpochs(user, token, swap, token.currentEpoch);\\r\\n    }\\r\\n\\r\\n    uint256 balance = user.balance;\\r\\n    if(balance > 1) {\\r\\n      // Avoid erasing storage to decrease gas footprint for referral payments\\r\\n      user.balance = 1;\\r\\n      fadToken.transfer(msg.sender, balance - 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** Collects current epoch `msg.sender`'s tokens from pool and transfers them to him */\\r\\n  function claimCurrentEpoch(Swap swap) external nonReentrant validPool(swap) {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n    TokenInfo storage token = tokenInfo[swap];\\r\\n    uint256 currentEpoch = token.currentEpoch;\\r\\n    uint256 balance = user.share[swap][currentEpoch];\\r\\n    if(balance > 0) {\\r\\n      user.share[swap][currentEpoch] = 0;\\r\\n      token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.sub(balance);\\r\\n      swap.transfer(msg.sender, balance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** Collects frozen epoch `msg.sender`'s tokens from pool and transfers them to him */\\r\\n  function claimFrozenEpoch(Swap swap) external nonReentrant validPool(swap) {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n    TokenInfo storage token = tokenInfo[swap];\\r\\n    uint256 currentEpock = token.currentEpoch;\\r\\n    uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\r\\n    require(firstUnprocessedEpoch.add(1) == token.currentEpoch, \\\"Epoch Already Finalized\\\");\\r\\n    require(user.firstUnprocessedEpoch[swap] == firstUnprocessedEpoch, \\\"Epoch Funds Alreaded Claimed\\\");\\r\\n    user.firstUnprocessedEpoch[swap] = currentEpock;\\r\\n    uint256 share = user.share[swap][firstUnprocessedEpoch];\\r\\n    if(share > 0) {\\r\\n      EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\r\\n      uint256 totalSupply = epochBalance.totalSupply;\\r\\n      user.share[swap][firstUnprocessedEpoch] = 0;\\r\\n      epochBalance.totalSupply = totalSupply.sub(share);\\r\\n\\r\\n      IERC20[] memory tokens = swap.getTokens();\\r\\n      epochBalance.token0Balance = _transferTokenShare(tokens[0], epochBalance.token0Balance, share, totalSupply);\\r\\n      epochBalance.token1Balance = _transferTokenShare(tokens[1], epochBalance.token1Balance, share, totalSupply);\\r\\n      epochBalance.fadBalance = _transferTokenShare(fadToken, epochBalance.fadBalance, share, totalSupply);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transferTokenShare(IERC20 token, uint256 balance, uint256 share, uint256 totalSupply) \\r\\n    private \\r\\n    returns(uint256 newBalance)\\r\\n  {\\r\\n    uint256 amount = balance.mul(share).div(totalSupply);\\r\\n    if(amount > 0) {\\r\\n      token.fadTransfer(payable(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n    return balance.sub(amount);\\r\\n  }\\r\\n\\r\\n  function _collectProcessedEpochs(UserInfo storage user, TokenInfo storage token, Swap swap, uint256 currentEpoch) private\\r\\n  {\\r\\n    uint256 userEpoch = user.firstUnprocessedEpoch[swap];\\r\\n\\r\\n    // Early return for the new users\\r\\n    if(user.share[swap][userEpoch] == 0) {\\r\\n      user.firstUnprocessedEpoch[swap] = currentEpoch;\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 tokenEpoch = token.firstUnprocessedEpoch;\\r\\n    if(tokenEpoch <= userEpoch) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 epochCount = Math.min(2, tokenEpoch - userEpoch); // 0, 1 or 2 epochs\\r\\n\\r\\n    // Claim 1 or 2 processed epochs for the user\\r\\n    uint256 collected = _collectEpoch(user, token, swap, userEpoch);\\r\\n    if(epochCount > 1) {\\r\\n      collected = collected.add(_collectEpoch(user, token, swap, userEpoch + 1));\\r\\n    }\\r\\n\\r\\n    user.balance = user.balance.add(collected);\\r\\n\\r\\n    // Update user token epoch counter\\r\\n    bool emptySecondEpoch = user.share[swap][userEpoch + 1] == 0;\\r\\n    user.firstUnprocessedEpoch[swap] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\r\\n  }\\r\\n\\r\\n  function _collectEpoch(UserInfo storage user, TokenInfo storage token, Swap swap, uint256 epoch) \\r\\n    private\\r\\n    returns(uint256 collected)\\r\\n  {\\r\\n    uint256 share = user.share[swap][epoch];\\r\\n    if(share > 0) {\\r\\n      uint256 fabBalance = token.epochBalance[epoch].fadBalance;\\r\\n      uint256 totalSupply = token.epochBalance[epoch].totalSupply;\\r\\n\\r\\n      collected = fabBalance.mul(share).div(totalSupply);\\r\\n      user.share[swap][epoch] = 0;\\r\\n      token.epochBalance[epoch].totalSupply = totalSupply.sub(share);\\r\\n      token.epochBalance[epoch].fadBalance = fabBalance.sub(collected);\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x23430269eaf1495a4764e5d5626eea8b15f79480aa92e032e26d7d70e1e059ec\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\r\\nimport \\\"./lib/FADERC20.sol\\\";\\r\\nimport \\\"./lib/SQRT.sol\\\";\\r\\nimport \\\"./lib/VirtualBalance.sol\\\";\\r\\nimport \\\"./governance/Governance.sol\\\";\\r\\n\\r\\ncontract Swap is Governance {\\r\\n  using SQRT for uint256;\\r\\n  using SafeMath for uint256;\\r\\n  using FADERC20 for IERC20;\\r\\n  using VirtualBalance for VirtualBalance.Data;\\r\\n\\r\\n  struct Balances {\\r\\n    uint256 src;\\r\\n    uint256 dst;\\r\\n  }\\r\\n\\r\\n  struct Volumes {\\r\\n    uint128 confirmed;\\r\\n    uint128 result;\\r\\n  }\\r\\n  \\r\\n  struct Fees {\\r\\n    uint256 fee;\\r\\n    uint256 slippageFee;\\r\\n  }\\r\\n\\r\\n  event Error(string reason);\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Withdrawn(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Swapped(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    address indexed srcToken,\\r\\n    address dstToken,\\r\\n    uint256 amount,\\r\\n    uint256 result,\\r\\n    uint256 srcBalanceAdded,\\r\\n    uint256 dstBalanceRemoved,\\r\\n    address referral\\r\\n  );\\r\\n\\r\\n  event Sync(\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee,\\r\\n    uint256 referralShare,\\r\\n    uint256 governanceShare\\r\\n  );\\r\\n\\r\\n  uint256 private constant _BASE_SUPPLY = 1000; // Total supply on first deposit\\r\\n\\r\\n  IERC20 public immutable token0;\\r\\n  IERC20 public immutable token1;\\r\\n  mapping(IERC20 => Volumes) public volumes;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToAdd;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToRemove;\\r\\n\\r\\n  modifier whenNotShutdown {\\r\\n    require(governanceFactory.isActive(), \\\"Swap: Factory Is Shutdown\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    IERC20 _token0,\\r\\n    IERC20 _token1,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    IGovernanceFactory _governanceFactory\\r\\n  ) \\r\\n    ERC20(name, symbol)\\r\\n    Governance(_governanceFactory)\\r\\n  {\\r\\n    require(bytes(name).length > 0, \\\"Swap: Name Is Empty\\\");\\r\\n    require(bytes(symbol).length > 0, \\\"Swap: Symbol Is Empty\\\");\\r\\n    require(_token0 != _token1, \\\"Swap: Two Tokens Is Same\\\");\\r\\n    token0 = _token0;\\r\\n    token1 = _token1;\\r\\n  }\\r\\n\\r\\n  /** Returns pair of tokens as [token0, token1] */\\r\\n  function getTokens()\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20[] memory tokens)\\r\\n  {\\r\\n    tokens = new IERC20[](2);\\r\\n    tokens[0] = token0;\\r\\n    tokens[1] = token1;\\r\\n  }\\r\\n\\r\\n  function getToken(uint256 position)\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20)\\r\\n  {\\r\\n    if(position == 0 ) {\\r\\n      return token0;\\r\\n    } else if(position == 1){\\r\\n      return token1;\\r\\n    } else {\\r\\n      revert(\\\"Swap: Pool Have Only Two Tokens\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getBalanceToAdd(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.max(virtualBalanceToAdd[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  function getBalanceToRemove(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.min(virtualBalanceToRemove[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  /** Returns how many `dst` tokens will be returned for `amount` of `src` tokens */\\r\\n  function getQuote(IERC20 src, IERC20 dst, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _getQuote(src, dst, amount, getBalanceToAdd(src), getBalanceToRemove(dst), getFee(), getSlippageFee());\\r\\n  }\\r\\n\\r\\n  function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    return depositFor(maxAmounts, minAmounts, msg.sender);\\r\\n  }\\r\\n\\r\\n  function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    require(msg.value == (_tokens[0].isBNB() ? maxAmounts[0] : (_tokens[1].isBNB() ? maxAmounts[1] : 0)), \\\"Swap: Wrong Value Usage\\\");\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    if(totalSupply == 0) {\\r\\n      fairSupply = _BASE_SUPPLY.mul(99);\\r\\n      _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\r\\n\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.max(fairSupply, maxAmounts[i]);\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        require(maxAmounts[i] >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), maxAmounts[i]);\\r\\n        receivedAmounts[i] = maxAmounts[i];\\r\\n      }\\r\\n    } else {\\r\\n      uint256[2] memory realBalances;\\r\\n      for(uint i = 0; i < realBalances.length; i++) {\\r\\n        realBalances[i] = _tokens[i].getBalanceOf(address(this)).sub(_tokens[i].isBNB() ? msg.value : 0);\\r\\n      }\\r\\n\\r\\n      fairSupply = type(uint256).max;\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 fairSupplyCached = fairSupply; \\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        require(maxAmounts[i] > 0, \\\"Swap: Amount Is Zero\\\");\\r\\n        uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\r\\n        require(amount >= minAmounts[i], \\\"Swap: Min Amount Not Reached\\\");\\r\\n        _tokens[i].fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n        receivedAmounts[i] = _tokens[i].getBalanceOf(address(this)).sub(realBalances[i]);\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n\\r\\n      uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        virtualBalanceToRemove[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n        virtualBalanceToAdd[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n      }\\r\\n    }\\r\\n      \\r\\n    require(fairSupply > 0, \\\"Swap: Result Is Not Enough\\\");\\r\\n    _mint(target, fairSupply);\\r\\n\\r\\n    emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount, uint256[] memory minReturns)\\r\\n    external\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    return withdrawFor(amount, minReturns, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /** Withdraws funds from the liquidity pool */\\r\\n  function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target)\\r\\n    public\\r\\n    nonReentrant\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n    _burn(msg.sender, amount);\\r\\n\\r\\n    for(uint i = 0; i < _tokens.length; i++) {\\r\\n      IERC20 token = _tokens[i];\\r\\n      uint256 preBalance = token.getBalanceOf(address(this));\\r\\n      uint256 value = preBalance.mul(amount).div(totalSupply);\\r\\n      token.fadTransfer(target, value);\\r\\n      withdrawnAmounts[i] = value;\\r\\n      require(i >= minReturns.length || value >= minReturns[i], \\\"Swap: Result Is Not Enough\\\");\\r\\n      virtualBalanceToRemove[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n      virtualBalanceToAdd[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n    }\\r\\n\\r\\n    emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    return swapFor(src, dst, amount, minReturn, referral, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    whenNotShutdown\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    require(msg.value == (src.isBNB() ? amount : 0), \\\"Swap: Wrong Value\\\");\\r\\n    Balances memory balances = Balances({\\r\\n      src: src.getBalanceOf(address(this)).sub(src.isBNB() ? msg.value : 0),\\r\\n      dst: dst.getBalanceOf(address(this))\\r\\n    });\\r\\n\\r\\n    uint256 confirmed;\\r\\n    Balances memory virtualBalances;\\r\\n    Fees memory fees = Fees({\\r\\n      fee: getFee(),\\r\\n      slippageFee: getSlippageFee()\\r\\n    });\\r\\n\\r\\n    (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\r\\n    emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\r\\n    \\r\\n    _mintRewards(confirmed, result, referral, balances, fees);\\r\\n\\r\\n    // Overflow of uint128 is desired\\r\\n    volumes[src].confirmed += uint128(confirmed);\\r\\n    volumes[src].result += uint128(result);\\r\\n  }\\r\\n\\r\\n  function _doTransfers(\\r\\n    IERC20 src, \\r\\n    IERC20 dst, \\r\\n    uint256 amount, \\r\\n    uint256 minReturn, \\r\\n    address payable receiver,\\r\\n    Balances memory balances,\\r\\n    Fees memory fees\\r\\n  )\\r\\n    private\\r\\n    returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\r\\n  {\\r\\n    uint256 _decayPeriod = getDecayPeriod();\\r\\n    virtualBalances.src = virtualBalanceToAdd[src].current(_decayPeriod, balances.src);\\r\\n    virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\r\\n    virtualBalances.dst = virtualBalanceToRemove[dst].current(_decayPeriod, balances.dst);\\r\\n    virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\r\\n    src.fadTransferFrom(payable(msg.sender), address(this), amount);\\r\\n    confirmed = src.getBalanceOf(address(this)).sub(balances.src);\\r\\n    result = _getQuote(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\r\\n    require(result > 0 && result >= minReturn, \\\"Swap: Return Is Not Enough\\\");\\r\\n    dst.fadTransfer(receiver, result);\\r\\n\\r\\n    // Update virtual balances to the same direction only at imbalanced state\\r\\n    if(virtualBalances.src != balances.src) {\\r\\n      virtualBalanceToAdd[src].set(virtualBalances.src.add(confirmed));\\r\\n    }\\r\\n\\r\\n    if(virtualBalances.dst != balances.dst) {\\r\\n      virtualBalanceToRemove[dst].set(virtualBalances.dst.sub(result));\\r\\n    }\\r\\n\\r\\n    // Update virtual balances to the opposite direction\\r\\n    virtualBalanceToRemove[src].update(_decayPeriod, balances.src);\\r\\n    virtualBalanceToAdd[dst].update(_decayPeriod, balances.dst);\\r\\n  }\\r\\n\\r\\n  function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees)\\r\\n    private \\r\\n  {\\r\\n    (\\r\\n      uint256 referralShare, \\r\\n      uint256 governanceShare, \\r\\n      address governanceWallet, \\r\\n      address feeCollector\\r\\n    ) = governanceFactory.getShareParameters(); \\r\\n\\r\\n    uint256 referralReward;\\r\\n    uint256 governanceReward;\\r\\n    uint256 invariantRatio = uint256(1e36);\\r\\n    invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\r\\n    invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\r\\n\\r\\n    if(invariantRatio > 1e36){\\r\\n      // calculate share only if invariant increased\\r\\n      invariantRatio = invariantRatio.sqrt();\\r\\n      uint256 invariantIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\r\\n      \\r\\n      referralReward = (referral != address(0)) ? invariantIncrease.mul(referralShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n      governanceReward = (governanceWallet != address(0)) ? invariantIncrease.mul(governanceShare).div(SwapConstants._FEE_DENOMINATOR) : 0;\\r\\n\\r\\n      if(feeCollector == address(0)) {\\r\\n        if(referralReward > 0) {\\r\\n          _mint(referral, referralReward);\\r\\n        }\\r\\n\\r\\n        if(governanceReward > 0) {\\r\\n          _mint(governanceWallet, governanceReward);\\r\\n        }\\r\\n      } else if(referralReward > 0 || governanceReward > 0) {\\r\\n        uint256 length = (referralReward > 0 ? 1 : 0) + (governanceReward > 0 ? 1 : 0);\\r\\n        address[] memory wallets = new address[](length);\\r\\n        uint256[] memory rewards = new uint256[](length);\\r\\n\\r\\n        wallets[0] = referral;\\r\\n        rewards[0] = referralReward;\\r\\n        if(governanceReward > 0) {\\r\\n          wallets[length - 1] = governanceWallet;\\r\\n          rewards[length - 1] = governanceReward;\\r\\n        }\\r\\n\\r\\n        try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\r\\n          _mint(feeCollector, referralReward.add(governanceReward));\\r\\n        } catch {\\r\\n          emit Error(\\\"Update Rewards Failed\\\");\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, referralReward, governanceReward);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    spot_ret = dx * y / x\\r\\n    uni_ret = dx * y / (x + dx)\\r\\n    slippage = (spot_ret - uni_ret) / spot_ret\\r\\n    slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\r\\n    slippage = dx / (x + dx)\\r\\n    ret = uni_ret * (1 - slip_fee * slippage)\\r\\n    ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\r\\n    ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\r\\n\\r\\n    x = amount * denominator\\r\\n    dx = amount * (denominator - fee)\\r\\n   */\\r\\n  function _getQuote(\\r\\n    IERC20 src, \\r\\n    IERC20 dst,\\r\\n    uint256 amount,\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(src > dst){\\r\\n      (src, dst) = (dst, src);\\r\\n    }\\r\\n\\r\\n    if(amount > 0 && src == token0 && dst == token1) {\\r\\n      uint256 taxedAmount = amount.sub(amount.mul(fee).div(SwapConstants._FEE_DENOMINATOR));\\r\\n      uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\r\\n      uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\r\\n      uint256 feeNumerator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\r\\n      uint256 feeDenominator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\r\\n\\r\\n      return ret.mul(feeNumerator).div(feeDenominator);\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /** Allows contract owner to withdraw funds that was send to contract by mistake */\\r\\n  function rescueFunds(IERC20 token, uint256 amount)\\r\\n    external\\r\\n    nonReentrant\\r\\n    onlyOwner\\r\\n  {\\r\\n    uint256 balance0 = token0.getBalanceOf(address(this));\\r\\n    uint256 balance1 = token1.getBalanceOf(address(this));\\r\\n\\r\\n    token.fadTransfer(payable(msg.sender), amount);\\r\\n    require(token0.getBalanceOf(address(this)) >= balance0, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(token1.getBalanceOf(address(this)) >= balance1, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n    require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Swap: Rescue Funds Access Denied\\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0x462612014e6755069fbea373af77255b4c5ad266274973aebbfff5c8d3b1114b\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IGovernanceFactory.sol\\\";\\r\\nimport \\\"../lib/LiquidVoting.sol\\\";\\r\\nimport \\\"../lib/SwapConstants.sol\\\";\\r\\nimport \\\"../lib/SafeCast.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* Swap governance\\r\\n*/\\r\\nabstract contract Governance is ERC20, Ownable, ReentrancyGuard {\\r\\n  using Vote for Vote.Data;\\r\\n  using LiquidVoting for LiquidVoting.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event FeeVoteUpdated(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\r\\n  event SlippageFeeVoteUpdated(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\r\\n  event DecayPeriodUpdated(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\r\\n\\r\\n  IGovernanceFactory public governanceFactory; \\r\\n  LiquidVoting.Data private _fee;\\r\\n  LiquidVoting.Data private _slippageFee;\\r\\n  LiquidVoting.Data private _decayPeriod;\\r\\n\\r\\n  constructor(IGovernanceFactory _governanceFactory)\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    _fee.data.result = _governanceFactory.getDefaultFee().toUint104();\\r\\n    _slippageFee.data.result = _governanceFactory.getDefaultSlippageFee().toUint104();\\r\\n    _decayPeriod.data.result = _governanceFactory.getDefaultDecayPeriod().toUint104();\\r\\n  }\\r\\n\\r\\n  function setGovernanceFactory(IGovernanceFactory _governanceFactory)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    this.discardFeeVote();\\r\\n    this.discardSlippageFeeVote();\\r\\n    this.discardDecayPeriodVote();\\r\\n  }\\r\\n\\r\\n  /** Return the current fee */\\r\\n  function getFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current slippage fee */\\r\\n  function getSlippageFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.data.result;\\r\\n  }\\r\\n\\r\\n  /** Return the current decay period */\\r\\n  function getDecayPeriod()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.data.result;\\r\\n  }\\r\\n\\r\\n  function getVirtualFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualSlippageFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualDecayPeriod()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred fee */\\r\\n  function getUserFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.votes[user].get(governanceFactory.getDefaultFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred slippage fee */\\r\\n  function getUserSlippageFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.votes[user].get(governanceFactory.getDefaultSlippageFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred decay period */\\r\\n  function getUserDecayPeriodVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.votes[user].get(governanceFactory.getDefaultDecayPeriod());\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for fee */\\r\\n  function voteFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_FEE, \\\"Fee Vote Is Too High\\\");\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for slippage fee */\\r\\n  function voteSlippageFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage Fee Vote Is Too High\\\");\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for decay period */\\r\\n  function voteDecayPeriod(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_DECAY_PERIOD, \\\"Decay Period Vote Is Too High\\\");\\r\\n    require(vote >= SwapConstants._MIN_DECAY_PERIOD, \\\"Decay Period Vote Is Too Low\\\");\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for fee */\\r\\n  function discardFeeVote() external\\r\\n  {\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for slippage fee */\\r\\n  function discardSlippageFeeVote() external\\r\\n  {\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for decay period */\\r\\n  function discardDecayPeriodVote() external\\r\\n  {\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _emitVoteFeeUpdate(address user, uint256 fee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit FeeVoteUpdated(user, fee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteSlippageFeeUpdate(address user, uint256 slippageFee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit SlippageFeeVoteUpdated(user, slippageFee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteDecayPeriodUpdate(address user, uint256 decayPeriod, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DecayPeriodUpdated(user, decayPeriod, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n  {\\r\\n    if(from == to) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    IGovernanceFactory _governanceFactory = governanceFactory;\\r\\n    bool updateFrom = !(from == address(0) || _governanceFactory.isFeeCollector(from));\\r\\n    bool updateTo = !(to == address(0) || _governanceFactory.isFeeCollector(to));\\r\\n\\r\\n    if(!updateFrom && !updateTo) {\\r\\n      // mint to feeReceiver or burn from feeReceiver\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\r\\n    uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\r\\n    uint256 newTotalSupply = totalSupply()\\r\\n                              .add(from == address(0) ? amount : 0)\\r\\n                              .sub(to == address(0) ? amount : 0);\\r\\n\\r\\n    ParamsHelper memory params = ParamsHelper({\\r\\n      from: from,\\r\\n      to: to,\\r\\n      updateFrom: updateFrom,\\r\\n      updateTo: updateTo,\\r\\n      amount: amount,\\r\\n      balanceFrom: balanceFrom,\\r\\n      balanceTo: balanceTo,\\r\\n      newTotalSupply: newTotalSupply\\r\\n    });\\r\\n\\r\\n    (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _governanceFactory.defaults();\\r\\n\\r\\n    _updateOntransfer(params, defaultFee, _emitVoteFeeUpdate, _fee);\\r\\n    _updateOntransfer(params, defaultSlippageFee, _emitVoteSlippageFeeUpdate, _slippageFee);\\r\\n    _updateOntransfer(params, defaultDecayPeriod, _emitVoteDecayPeriodUpdate, _decayPeriod);\\r\\n  }\\r\\n\\r\\n  struct ParamsHelper {\\r\\n    address from;\\r\\n    address to;\\r\\n    bool updateFrom;\\r\\n    bool updateTo;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFrom;\\r\\n    uint256 balanceTo;\\r\\n    uint256 newTotalSupply;\\r\\n  }\\r\\n\\r\\n  function _updateOntransfer(\\r\\n    ParamsHelper memory params, \\r\\n    uint256 defaultValue,\\r\\n    function(address, uint256, bool, uint256) internal emitEvent,\\r\\n    LiquidVoting.Data storage votingData\\r\\n  ) private\\r\\n  {\\r\\n    Vote.Data memory voteFrom = votingData.votes[params.from];\\r\\n    Vote.Data memory voteTo = votingData.votes[params.to];\\r\\n    if(voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\r\\n      emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\r\\n      emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if(params.updateFrom) {\\r\\n      votingData.updateBalance(\\r\\n        params.from, \\r\\n        voteFrom, \\r\\n        params.balanceFrom, \\r\\n        params.balanceFrom.sub(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(params.updateTo) {\\r\\n      votingData.updateBalance(\\r\\n        params.to, \\r\\n        voteTo, \\r\\n        params.balanceTo, \\r\\n        params.balanceTo.add(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x72bc135f490c84cd356503165038a42c829306eee41559c83fcab630ef592ade\",\"license\":\"MIT\"},\"contracts/helpers/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/ISwapFactory.sol\\\";\\r\\nimport \\\"../lib/FADERC20.sol\\\";\\r\\nimport \\\"../lib/VirtualBalance.sol\\\";\\r\\nimport \\\"../Swap.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n* Base contract for maintaining tokens whitelist\\r\\n*/\\r\\nabstract contract Converter is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n  using FADERC20 for IERC20;\\r\\n  using VirtualBalance for VirtualBalance.Data;\\r\\n\\r\\n  uint256 private constant _ONE = 1e18;\\r\\n  uint256 private constant _MAX_SPREAD = 0.01e18;\\r\\n  uint256 private constant _MAX_LIQUIDITY_SHARE = 100;\\r\\n  IERC20 public immutable fadToken;\\r\\n  ISwapFactory public immutable swapFactory;\\r\\n  mapping(IERC20 => bool) public pathWhitlist;\\r\\n\\r\\n  constructor(IERC20 _fadToken, ISwapFactory _swapFactory) {\\r\\n    fadToken = _fadToken;\\r\\n    swapFactory = _swapFactory;\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    require(msg.sender != tx.origin, \\\"Transfer forbidden\\\");\\r\\n  }\\r\\n\\r\\n  modifier validSpread(Swap swap){\\r\\n    require(_validateSpread(swap), \\\"Spread Is Too High\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier validPool(Swap swap){\\r\\n    require(swapFactory.isPool(swap), \\\"Invalid pool\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier validPath(IERC20[] memory path){\\r\\n    require(path.length > 0, \\\"Min Path Length Is 1\\\");\\r\\n    require(path.length < 5, \\\"Max Path Length Is 4\\\");\\r\\n    require(path[path.length - 1] == fadToken, \\\"Should Swap To Target Token\\\");\\r\\n\\r\\n    for(uint256 i = 0; i < path.length; i += 1){\\r\\n      require(pathWhitlist[path[i]], \\\"Token Is Not Whitelist\\\");\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function updatePathWhitelist(IERC20 token, bool status)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    pathWhitlist[token] = status;\\r\\n  }\\r\\n\\r\\n  function _validateSpread(Swap swap)\\r\\n    internal\\r\\n    view\\r\\n    returns(bool)\\r\\n  {\\r\\n    IERC20[] memory tokens = swap.getTokens();\\r\\n    uint256 buyPrice;\\r\\n    uint256 sellPrice;\\r\\n    uint256 spotPrice;\\r\\n    {\\r\\n      uint256 token0Balance = tokens[0].getBalanceOf(address(swap));\\r\\n      uint256 token1Balance = tokens[1].getBalanceOf(address(swap));\\r\\n      uint256 decayPeriod = swap.getDecayPeriod();\\r\\n      VirtualBalance.Data memory vb; \\r\\n      (vb.balance, vb.time) = swap.virtualBalanceToAdd(tokens[0]);\\r\\n      uint256 token0BalanceToAdd = Math.max(vb.current(decayPeriod, token0Balance), token0Balance);\\r\\n      (vb.balance, vb.time) = swap.virtualBalanceToAdd(tokens[1]);\\r\\n      uint256 token1BalanceToAdd = Math.max(vb.current(decayPeriod, token1Balance), token1Balance);\\r\\n      (vb.balance, vb.time) = swap.virtualBalanceToRemove(tokens[0]);\\r\\n      uint256 token0BalanceToRemove = Math.min(vb.current(decayPeriod, token0Balance), token0Balance);\\r\\n      (vb.balance, vb.time) = swap.virtualBalanceToRemove(tokens[1]);\\r\\n      uint256 token1BalanceToRemove = Math.min(vb.current(decayPeriod, token1Balance), token1Balance);\\r\\n\\r\\n      buyPrice = _ONE.mul(token1BalanceToAdd).div(token0BalanceToRemove);\\r\\n      sellPrice = _ONE.mul(token1BalanceToRemove).div(token0BalanceToAdd);\\r\\n      spotPrice = _ONE.mul(token1Balance).div(token0Balance);\\r\\n    }\\r\\n\\r\\n    return buyPrice.sub(sellPrice).mul(_ONE) < _MAX_SPREAD.mul(spotPrice);\\r\\n  }\\r\\n\\r\\n  function _getMaxAmountForSwap(IERC20[] memory path, uint256 amount)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256 srcAmount, uint256 dstAmount)\\r\\n  {\\r\\n    srcAmount = amount;\\r\\n    dstAmount = amount;\\r\\n    uint256 pathLength = path.length;\\r\\n    for(uint256 i = 0 ; i < pathLength; i += 1) {\\r\\n      Swap swap = swapFactory.pools(path[i], path[i+1]);\\r\\n      uint256 maxCurrentStepAmount = path[i].getBalanceOf(address(swap)).div(_MAX_LIQUIDITY_SHARE);\\r\\n      if(maxCurrentStepAmount < dstAmount) {\\r\\n        srcAmount = srcAmount.mul(maxCurrentStepAmount).div(dstAmount);\\r\\n        dstAmount = maxCurrentStepAmount;\\r\\n      }\\r\\n      dstAmount = swap.getQuote(path[i], path[i+1], dstAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _swap(IERC20[] memory path, uint256 initialAmount, address payable destination)\\r\\n    internal\\r\\n    returns(uint256 amount)\\r\\n  {\\r\\n    amount = initialAmount;\\r\\n    uint256 pathLength = path.length;\\r\\n    for(uint256 i = 0 ; i < pathLength; i += 1) {\\r\\n      Swap swap = swapFactory.pools(path[i], path[i+1]);\\r\\n      require(_validateSpread(swap), \\\"Spread Is Too High\\\");\\r\\n      uint256 value = amount;\\r\\n      if(!path[i].isBNB()){\\r\\n        path[i].safeApprove(address(swap), amount);\\r\\n        value = 0;\\r\\n      }\\r\\n\\r\\n      if(i + 2 < pathLength) {\\r\\n        amount = swap.swap{value: value}(path[i], path[i+1], amount, 0, address(0));\\r\\n      } else {\\r\\n        amount = swap.swapFor{value: value}(path[i], path[i+1], amount, 0, address(0), destination);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(pathLength == 1) {\\r\\n      path[0].transfer(destination, amount);\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0xab1283226893533200fecb15bd2e278fa61e5221582d0b2612c7e34114fb5030\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IFeeCollector {\\r\\n  \\r\\n  /** Adds specified `amount` as reward to `receiver` */\\r\\n  function updateReward(address receiver, uint256 amount) external;\\r\\n\\r\\n  function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\r\\n}\",\"keccak256\":\"0x8d092bc45bc47f16fa3a0a7bc0dd93039ed4cf5bc95008bc236f09236b2ccf9a\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/** Describes methods that provide all the information about current governance contract state */\\r\\ninterface IGovernanceFactory {\\r\\n  \\r\\n  /** Returns information about mooniswap shares */\\r\\n  function getShareParameters()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, address, address);\\r\\n\\r\\n    /** Initial settings that contract was created */\\r\\n    function defaults()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, uint256);\\r\\n\\r\\n    /** Returns the value of default fee */\\r\\n    function getDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default slippage fee */\\r\\n    function getDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default decay period */\\r\\n    function getDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns previous default fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default slippage fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default decay period that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns the value of referral share */\\r\\n    function getReferralShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance share */\\r\\n    function getGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance wallet address */\\r\\n    function governanceWallet()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Returns the value of fee collector wallet address */\\r\\n    function feeCollector()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Whether the address is current fee collector or was in the past. */\\r\\n    function isFeeCollector(address)\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n\\r\\n    /** Whether the contract is currently working and wasn't stopped. */\\r\\n    function isActive()\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n}\",\"keccak256\":\"0x6d1e8a8b87f0ee7cce4f297f20f5473247f5f3ee9dd5862d0205745f5121f276\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../Swap.sol\\\";\\r\\n\\r\\ninterface ISwapFactory is IGovernanceFactory{\\r\\n  \\r\\n  /** Returns a pool for tokens pair. \\r\\n  * Zero address result means that pool doesn't exist yet \\r\\n  */\\r\\n  function pools(IERC20 token0, IERC20 token1) external view returns(Swap);\\r\\n\\r\\n  /** If address is currently listed as a swap pool. Otherwise, false */\\r\\n  function isPool(Swap swap) external view returns(bool);\\r\\n}\",\"keccak256\":\"0xdea88578a57de43db5edfdd552ad4e650c59d1f1b1a2668d6677470e307108e5\",\"license\":\"MIT\"},\"contracts/lib/FADERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary FADERC20 {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  function isBNB(IERC20 token)\\r\\n    internal\\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return address(token) == address(0);\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(IERC20 token, address account)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return account.balance;\\r\\n    } else {\\r\\n      return token.balanceOf(account);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransfer(IERC20 token, address payable to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        to.transfer(amount);\\r\\n      } else {\\r\\n        token.safeTransfer(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function fadTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isBNB(token)){\\r\\n        require(msg.value >= amount, \\\"Value Is not Enough\\\");\\r\\n        require(from == msg.sender, \\\"From Is Not The Sender\\\");\\r\\n        require(to == address(this), \\\"To Is Not this\\\");\\r\\n        if(msg.value > amount) {\\r\\n          //Return the remaining to user\\r\\n          from.transfer(msg.value.sub(amount));\\r\\n        }\\r\\n      } else {\\r\\n        token.safeTransferFrom(from, to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSymbol(IERC20 token)\\r\\n    internal\\r\\n    view\\r\\n    returns(string memory)\\r\\n  {\\r\\n    if(isBNB(token)){\\r\\n      return \\\"BNB\\\";\\r\\n    }\\r\\n\\r\\n    (bool success, bytes memory data) = address(token).staticcall{ gas: 20000}(\\r\\n      abi.encodeWithSignature(\\\"symbol()\\\")\\r\\n    );\\r\\n\\r\\n    if(!success){\\r\\n      (success, data) =  address(token).staticcall{ gas: 20000}(\\r\\n        abi.encodeWithSignature(\\\"SYMBOL()\\\")\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(success && data.length >= 96) {\\r\\n      (uint256 offset, uint256 length) = abi.decode(data, (uint256, uint256));\\r\\n      if(offset == 0x20 && length > 0 && length <= 256) {\\r\\n        return string(abi.decode(data, (bytes)));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(success && data.length == 32) {\\r\\n      uint length = 0;\\r\\n      while (length < data.length && data[length] >= 0x20 && data[length] <= 0x7E) {\\r\\n        length++;\\r\\n      }\\r\\n\\r\\n      if(length > 0) {\\r\\n        bytes memory result = new bytes(length);\\r\\n        for(uint i = 0; i < length; i++) {\\r\\n          result[i] = data[i];\\r\\n        }\\r\\n        return string(result);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _toHex(address(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(address token)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    return _toHex(abi.encodePacked(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(bytes memory data)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    bytes memory str = new bytes(2 + data.length * 2);\\r\\n    str[0] = \\\"0\\\";\\r\\n    str[1] = \\\"x\\\";\\r\\n    uint j = 2;\\r\\n    for(uint i = 0; i < data.length; i++) {\\r\\n      uint a = uint8(data[i]) >> 4;\\r\\n      uint b = uint8(data[i]) & 0x0f;\\r\\n      str[j++] = bytes1(uint8(a + 48 + (a/10) * 39));\\r\\n      str[j++] = bytes1(uint8(b + 48 + (b/10) * 39));\\r\\n    }\\r\\n\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x4968b4d5b8a96234d531300e80fc0113d3f9dc4c4ea21f58652eafcc62b08002\",\"license\":\"MIT\"},\"contracts/lib/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\nimport \\\"./VirtualVote.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LiquidVoting {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using Vote for Vote.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n\\r\\n  struct Data {\\r\\n    VirtualVote.Data data;\\r\\n    uint256 weightedSum;\\r\\n    uint256 defaultVote;\\r\\n    mapping(address => Vote.Data) votes;\\r\\n  }\\r\\n\\r\\n  function updateVote(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 balance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function updateBalance(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 newTotalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function _update(\\r\\n    LiquidVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    uint256 oldWeightedSum = self.weightedSum;\\r\\n    uint256 newWeightedSum = oldWeightedSum;\\r\\n    uint256 oldDefaultVote = self.defaultVote;\\r\\n    uint256 newDefaultVote = oldDefaultVote;\\r\\n\\r\\n    if(oldVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.sub(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.add(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\r\\n    }\\r\\n\\r\\n    if(newWeightedSum != oldWeightedSum){\\r\\n      self.weightedSum = newWeightedSum;\\r\\n    }\\r\\n\\r\\n    if(newDefaultVote != oldDefaultVote){\\r\\n      self.defaultVote = newDefaultVote;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint256 newResult = totalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVote.mul(defaultVote)).div(totalSupply);\\r\\n      VirtualVote.Data memory data = self.data;\\r\\n      if(newResult != data.result){\\r\\n        VirtualVote.Data memory sdata = self.data;\\r\\n        (sdata.oldResult, sdata.result, sdata.time) = (\\r\\n          data.current().toUint104(),\\r\\n          newResult.toUint104(),\\r\\n          block.timestamp.toUint48()\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(!newVote.eq(oldVote)){\\r\\n      self.votes[user] = newVote;\\r\\n    }\\r\\n\\r\\n    emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6c1e8033140a7fc304e5868ce3c04d79cb24a0e27ed5553f0223fa11805cb683\",\"license\":\"MIT\"},\"contracts/lib/SQRT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SQRT {\\r\\n  \\r\\n  /** https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method */\\r\\n  function sqrt(uint256 y) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(y > 3) {\\r\\n      uint256 z = y;\\r\\n      uint256 x = y / 2 + 1;\\r\\n      while(x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n      return z;\\r\\n    } else if (y != 0){\\r\\n      return 1;\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x37f51446a8f9a8bf3616717d0e8504c750ab43c9ea34a9e38ac66366959af49c\",\"license\":\"MIT\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeCast {\\r\\n  \\r\\n  function toUint216(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint216)\\r\\n  {\\r\\n    require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\r\\n    return uint216(value);\\r\\n  }\\r\\n\\r\\n  function toUint104(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint104)\\r\\n  {\\r\\n    require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\r\\n    return uint104(value);\\r\\n  }\\r\\n\\r\\n  function toUint48(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint48)\\r\\n  {\\r\\n    require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\r\\n    return uint48(value);\\r\\n  }\\r\\n\\r\\n  function toUint40(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint40)\\r\\n  {\\r\\n    require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\r\\n    return uint40(value);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x817ead41a088c9cbc8080e3345811c39c12936e487e5916f37f51a66bfe09ba9\",\"license\":\"MIT\"},\"contracts/lib/SwapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SwapConstants {\\r\\n  \\r\\n  uint256 internal constant _FEE_DENOMINATOR = 1e18;\\r\\n\\r\\n  uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\r\\n  uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n  uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\r\\n  uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\r\\n\\r\\n  uint256 internal constant _DEFAULT_FEE = 0;\\r\\n  uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\r\\n  uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n}\",\"keccak256\":\"0x816802904c9252c8881b9bba8a9003e9b8881a5b04b1f0a3c34e65c242285938\",\"license\":\"MIT\"},\"contracts/lib/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\n\\r\\nlibrary VirtualBalance {\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  struct Data {\\r\\n    uint216 balance;\\r\\n    uint40 time;\\r\\n  }\\r\\n\\r\\n  function set(VirtualBalance.Data storage self, uint256 balance) internal {\\r\\n    (self.balance, self.time) = (\\r\\n      balance.toUint216(),\\r\\n      block.timestamp.toUint40()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance));\\r\\n  }\\r\\n\\r\\n  function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\r\\n  }\\r\\n\\r\\n  function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = decayPeriod.sub(timePassed);\\r\\n    return uint256(self.balance).mul(timeRemain).add(\\r\\n      realBalance.mul(timePassed)\\r\\n    ).div(decayPeriod);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa56c85c352aad2400a9ff7074acace2bed5cada591801e9fd026020c6317556f\",\"license\":\"MIT\"},\"contracts/lib/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary VirtualVote {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint104 oldResult;\\r\\n    uint104 result;\\r\\n    uint48 time;\\r\\n  }\\r\\n\\r\\n  function current(VirtualVote.Data memory self) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\r\\n    return uint256(self.oldResult).mul(timeRemain).add(\\r\\n      uint256(self.result).mul(timePassed)\\r\\n    ).div(_VOTE_DECAY_PERIOD);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x17dfd686239b10ee0b2fec2086cdbaa2365b841bfde0498025c6d2970f76d48c\",\"license\":\"MIT\"},\"contracts/lib/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary Vote {\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  function eq(Vote.Data memory self, Vote.Data memory vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == vote.value;\\r\\n  }\\r\\n\\r\\n  function init() \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: 0\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function init(uint256 vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: vote + 1\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function isDefault(Data memory self) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == 0;\\r\\n  }\\r\\n\\r\\n  function get(Data memory self, uint256 defaultVote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVote; \\r\\n  }\\r\\n\\r\\n  function get(Data memory self, function () external view returns(uint256) defaultVoteFn) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVoteFn();\\r\\n    \\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x9aebbc5fa7099113f837929b5c8221c0c8c7370fc04bcb2ddb43b45fe65fffe7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003611380380620036118339810160408190526200003491620000b7565b8181620000413362000067565b6001600160601b0319606092831b8116608052911b1660a052505060016002556200010e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000ca578182fd5b8251620000d781620000f5565b6020840151909250620000ea81620000f5565b809150509250929050565b6001600160a01b03811681146200010b57600080fd5b50565b60805160601c60a05160601c61349862000179600039600081816102c00152818161070101528181610a9401528181610ea20152818161113b015281816114b0015281816120c101526123a10152600081816101ff015281816105cc0152610a0c01526134986000f3fe6080604052600436106100f75760003560e01c80637944f9441161008a578063f2fde38b11610059578063f2fde38b14610340578063f3aafa8014610360578063f583adbc14610380578063f5dab711146103a057600080fd5b80637944f944146102ae5780638da5cb5b146102e2578063946e1a62146103005780639e96b2ce1461032057600080fd5b80633e065bbc116100c65780633e065bbc146101ed5780633e5000fe14610239578063715018a61461027957806371646f981461028e57600080fd5b80630931753c1461014d5780631959a0021461016d5780631a399125146101ad578063318d9e5d146101cd57600080fd5b3661014857333214156101465760405162461bcd60e51b81526020600482015260126024820152712a3930b739b332b9103337b93134b23232b760711b60448201526064015b60405180910390fd5b005b600080fd5b34801561015957600080fd5b50610146610168366004612e16565b6103ec565b34801561017957600080fd5b5061019a610188366004612dcf565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101b957600080fd5b506101466101c8366004612deb565b610474565b3480156101d957600080fd5b506101466101e8366004612f20565b61051d565b3480156101f957600080fd5b506102217f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a4565b34801561024557600080fd5b50610269610254366004612dcf565b60016020526000908152604090205460ff1681565b60405190151581526020016101a4565b34801561028557600080fd5b50610146610684565b34801561029a57600080fd5b506101466102a9366004612dcf565b6106ba565b3480156102ba57600080fd5b506102217f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ee57600080fd5b506000546001600160a01b0316610221565b34801561030c57600080fd5b5061014661031b366004612dcf565b610a4d565b34801561032c57600080fd5b5061014661033b366004612dcf565b610e5b565b34801561034c57600080fd5b5061014661035b366004612dcf565b611059565b34801561036c57600080fd5b5061014661037b3660046130a4565b6110f4565b34801561038c57600080fd5b5061014661039b366004613050565b611849565b3480156103ac57600080fd5b506103d76103bb366004612dcf565b6004602052600090815260409020600181015460029091015482565b604080519283526020830191909152016101a4565b60005b8381101561046d5761045b85858381811061041a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061042f9190612dcf565b84848481811061044f57634e487b7160e01b600052603260045260246000fd5b90506020020135610474565b80610465816133f8565b9150506103ef565b5050505050565b3360008181526004602090815260408083206001600160a01b038716845260038352818420600282015486865260018201855283862081875290945291909320549091906104c2908661189e565b6001600160a01b0385166000908152600184016020908152604080832085845282528083209390935585905220546104fa908661189e565b600082815260208590526040902055610515828486846118b3565b505050505050565b336000908152600360205260408120905b82518110156105b157600083828151811061055957634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060046000836001600160a01b03166001600160a01b03168152602001908152602001600020905061059c84828484600201546118b3565b505080806105a9906133f8565b91505061052e565b508054600181111561067f5760018083556001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9033906105ff90856133b5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190613034565b505b505050565b6000546001600160a01b031633146106ae5760405162461bcd60e51b815260040161013d9061322a565b6106b86000611a05565b565b6002805414156106dc5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b15801561074557600080fd5b505afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190613034565b6107995760405162461bcd60e51b815260040161013d90613296565b3360009081526003602090815260408083206001600160a01b0386168452600490925290912060028101546001808301549082906107d890839061189e565b146108255760405162461bcd60e51b815260206004820152601760248201527f45706f636820416c72656164792046696e616c697a6564000000000000000000604482015260640161013d565b6001600160a01b0386166000908152600285016020526040902054811461088e5760405162461bcd60e51b815260206004820152601c60248201527f45706f63682046756e647320416c72656164656420436c61696d656400000000604482015260640161013d565b6001600160a01b038616600090815260028501602090815260408083208590556001870182528083208484529091529020548015610a3f5760008281526020858152604080832080546001600160a01b038c16855260018a018452828520878652909352908320929092556109038184611a55565b82600001819055506000896001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109829190810190612e7f565b90506109bc816000815181106109a857634e487b7160e01b600052603260045260246000fd5b602002602001015184600101548685611a61565b83600101819055506109fc816001815181106109e857634e487b7160e01b600052603260045260246000fd5b602002602001015184600201548685611a61565b60028401556003830154610a33907f0000000000000000000000000000000000000000000000000000000000000000908685611a61565b83600301819055505050505b505060016002555050505050565b600280541415610a6f5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b158015610ad857600080fd5b505afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190613034565b610b2c5760405162461bcd60e51b815260040161013d90613296565b81610b3681611aa8565b610b525760405162461bcd60e51b815260040161013d906131fe565b6001600160a01b0383166000908152600460205260409020600281015460018201548114610bc25760405162461bcd60e51b815260206004820152601f60248201527f50726576696f75732045706f6368204973204e6f742046696e616c697a656400604482015260640161013d565b6000856001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610bfd57600080fd5b505afa158015610c11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190612e7f565b90506000610c813083600081518110610c6257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661200b90919063ffffffff16565b90506000610caa3084600181518110610c6257634e487b7160e01b600052603260045260246000fd5b6040516370a0823160e01b81523060048201529091506001600160a01b03891690635915d8069082906370a082319060240160206040518083038186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c9190613197565b604080516000815260208101918290526001600160e01b031960e085901b16909152610d5c9190602481016132bc565b6040805180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190612fb0565b50610ddd82610dd73086600081518110610c6257634e487b7160e01b600052603260045260246000fd5b90611a55565b85600001600086815260200190815260200160002060010181905550610e2281610dd73086600181518110610c6257634e487b7160e01b600052603260045260246000fd5b6000858152602087905260409020600290810191909155850154610e4790600161189e565b600295860155505060019092555050505050565b600280541415610e7d5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e9190613034565b610f3a5760405162461bcd60e51b815260040161013d90613296565b3360009081526003602090815260408083206001600160a01b03861684526004835281842060028101546001830185528386208187529094529190932054909190801561104c576001600160a01b03861660009081526001850160209081526040808320858452825280832083905590859052902054610fba9082611a55565b60008381526020859052604090819020919091555163a9059cbb60e01b8152336004820152602481018290526001600160a01b0387169063a9059cbb90604401602060405180830381600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190613034565b5050600160025550505050565b6000546001600160a01b031633146110835760405162461bcd60e51b815260040161013d9061322a565b6001600160a01b0381166110e85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013d565b6110f181611a05565b50565b6002805414156111165760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808416600483015283917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b15801561117f57600080fd5b505afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b79190613034565b6111d35760405162461bcd60e51b815260040161013d90613296565b826111dd81611aa8565b6111f95760405162461bcd60e51b815260040161013d906131fe565b6001600160a01b038416600090815260046020908152604080832060018082015480865293829052919093206002840154909161123790849061189e565b146112845760405162461bcd60e51b815260206004820181905260248201527f50726576696f75732045706f636820416c72656164792046696e616c697a6564604482015260640161013d565b6000876001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112fb9190810190612e7f565b905060008160008151811061132057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168860008151811061135257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561137457506001820154611427565b8160018151811061139557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316886000815181106113c757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156113e957506002820154611427565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103334b939ba103a37b5b2b760691b604482015260640161013d565b6000806114348a846120ac565b9150915080600014156116e15782156116dc578183146114965760405162461bcd60e51b815260206004820152601d60248201527f417661696c61626c652042616c616e6365204973204e6f742044757374000000604482015260640161013d565b60005b8a516114a682600161335e565b101561161b5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d84815181106114fd57634e487b7160e01b600052603260045260246000fd5b60200260200101518e856001611513919061335e565b8151811061153157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161156b9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190613088565b90506115c681611aa8565b6116085760405162461bcd60e51b815260206004820152601360248201527214dc1c99585908125cc8151bdbc8121a59da1d606a1b604482015260640161013d565b5061161460018261335e565b9050611499565b5061165e8a60008151811061164057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03161590565b1561169657604051329084156108fc029085906000818181858888f19350505050158015611690573d6000803e3d6000fd5b50611707565b6116dc8b848c6000815181106116bc57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661232b9092919063ffffffff16565b611707565b60006116ee8b843061238e565b6003870154909150611700908261189e565b6003870155505b8360008151811061172857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168a60008151811061175a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561178a5760018501546117809083611a55565b6001860155611809565b836001815181106117ab57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168a6000815181106117dd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156118095760028501546118039083611a55565b60028601555b600185015415801561181d57506002850154155b15611837576001878101546118319161189e565b60018801555b50506001600255505050505050505050565b6000546001600160a01b031633146118735760405162461bcd60e51b815260040161013d9061322a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b60006118aa828461335e565b90505b92915050565b6001600160a01b03821660009081526002850160209081526040808320546001880183528184208185529092529091205461190b57506001600160a01b0382166000908152600285016020526040902081905561067d565b600184015481811161191e57505061067d565b6000611934600261192f85856133b5565b61284d565b9050600061194488888887612863565b905060018211156119725761196f61196889898961196389600161335e565b612863565b829061189e565b90505b875461197e908261189e565b88556001600160a01b03861660009081526001808a01602052604082209082906119a990889061335e565b815260200190815260200160002054600014905082600214806119c95750805b6119dd576119d885600161335e565b6119df565b855b6001600160a01b038816600090815260028b016020526040902055505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006118aa82846133b5565b600080611a7883611a72878761291b565b90612927565b90508015611a9457611a946001600160a01b0387163383612933565b611a9e8582611a55565b9695505050505050565b600080826001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015611ae457600080fd5b505afa158015611af8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b209190810190612e7f565b9050600080600080611b4d8786600081518110610c6257634e487b7160e01b600052603260045260246000fd5b90506000611b768887600181518110610c6257634e487b7160e01b600052603260045260246000fd5b90506000886001600160a01b031663728c769a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb357600080fd5b505afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613197565b6040805180820190915260008082526020820152909150896001600160a01b031663ee5d185989600081518110611c3257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611c6591906001600160a01b0391909116815260200190565b604080518083038186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190613155565b64ffffffffff1660208301526001600160d81b031681526000611ce1611cdb838588612991565b866129fe565b90508a6001600160a01b031663ee5d18598a600181518110611d1357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611d4691906001600160a01b0391909116815260200190565b604080518083038186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190613155565b64ffffffffff1660208401526001600160d81b031682526000611dbc611cdb848688612991565b90508b6001600160a01b031663ac9d6f958b600081518110611dee57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611e2191906001600160a01b0391909116815260200190565b604080518083038186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190613155565b64ffffffffff1660208501526001600160d81b031683526000611e9d611e9785878a612991565b8861284d565b90508c6001600160a01b031663ac9d6f958c600181518110611ecf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611f0291906001600160a01b0391909116815260200190565b604080518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190613155565b64ffffffffff1660208601526001600160d81b031684526000611f78611e9786888a612991565b9050611f9082611a72670de0b6b3a76400008661291b565b9a50611fa884611a72670de0b6b3a76400008461291b565b9950611fc088611a72670de0b6b3a76400008a61291b565b98505050505050505050611fe481662386f26fc1000061291b90919063ffffffff16565b612000670de0b6b3a7640000611ffa8686611a55565b9061291b565b109695505050505050565b60006001600160a01b03831661202c57506001600160a01b038116316118ad565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b15801561206d57600080fd5b505afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a59190613197565b90506118ad565b81518190819060005b818110156123225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d788848151811061210e57634e487b7160e01b600052603260045260246000fd5b602002602001015189856001612124919061335e565b8151811061214257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161217c9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc9190613088565b905060006121f96064611a72848b8781518110610c6257634e487b7160e01b600052603260045260246000fd5b9050848110156122175761221185611a72888461291b565b95508094505b816001600160a01b031663c515ee2389858151811061224657634e487b7160e01b600052603260045260246000fd5b60200260200101518a86600161225c919061335e565b8151811061227a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044810188905260640160206040518083038186803b1580156122d257600080fd5b505afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a9190613197565b9450505060018161231b919061335e565b90506120b5565b50509250929050565b6040516001600160a01b03831660248201526044810182905261067f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a0e565b8251829060005b8181101561278a5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78884815181106123ee57634e487b7160e01b600052603260045260246000fd5b602002602001015189856001612404919061335e565b8151811061242257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161245c9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561247457600080fd5b505afa158015612488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ac9190613088565b90506124b781611aa8565b6124d35760405162461bcd60e51b815260040161013d906131fe565b60008490506124fb88848151811061164057634e487b7160e01b600052603260045260246000fd5b6125485761254482868a868151811061252457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316612ae09092919063ffffffff16565b5060005b8361255484600261335e565b101561266557816001600160a01b031663d5bcb9b5828a868151811061258a57634e487b7160e01b600052603260045260246000fd5b60200260200101518b8760016125a0919061335e565b815181106125be57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529116602482015260448101899052600060648201819052608482015260a4016020604051808303818588803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061265e9190613197565b9450612775565b816001600160a01b031663e331d039828a868151811061269557634e487b7160e01b600052603260045260246000fd5b60200260200101518b8760016126ab919061335e565b815181106126c957634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529082166024820152604481018a90526000606482018190526084820152908a1660a482015260c4016020604051808303818588803b15801561273957600080fd5b505af115801561274d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906127729190613197565b94505b50612783905060018261335e565b9050612395565b50806001141561284557846000815181106127b557634e487b7160e01b600052603260045260246000fd5b602090810291909101015160405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561280b57600080fd5b505af115801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128439190613034565b505b509392505050565b600081831061285c57816118aa565b5090919050565b6001600160a01b038216600090815260018501602090815260408083208484529091528120548015612912576000838152602086905260409020600381015490546128b281611a72848661291b565b6001600160a01b038716600090815260018a016020908152604080832089845290915281205593506128e48184611a55565b6000868152602089905260409020556128fd8285611a55565b60008681526020899052604090206003015550505b50949350505050565b60006118aa8284613396565b60006118aa8284613376565b801561067f576001600160a01b03831661297d576040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561067d573d6000803e3d6000fd5b61067f6001600160a01b038416838361232b565b6000806129b68461192f876020015164ffffffffff1642611a5590919063ffffffff16565b905060006129c48583611a55565b90506129f285611a726129d7878661291b565b89516129ec906001600160d81b03168661291b565b9061189e565b925050505b9392505050565b60008183101561285c57816118aa565b6000612a63826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c049092919063ffffffff16565b80519091501561067f5780806020019051810190612a819190613034565b61067f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161013d565b801580612b695750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b2f57600080fd5b505afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b679190613197565b155b612bd45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161013d565b6040516001600160a01b03831660248201526044810182905261067f90849063095ea7b360e01b90606401612357565b6060612c138484600085612c1b565b949350505050565b606082471015612c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161013d565b6001600160a01b0385163b612cd35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b600080866001600160a01b03168587604051612cef91906131af565b60006040518083038185875af1925050503d8060008114612d2c576040519150601f19603f3d011682016040523d82523d6000602084013e612d31565b606091505b5091509150612d41828286612d4c565b979650505050505050565b60608315612d5b5750816129f7565b825115612d6b5782518084602001fd5b8160405162461bcd60e51b815260040161013d91906131cb565b60008083601f840112612d96578182fd5b50813567ffffffffffffffff811115612dad578182fd5b6020830191508360208260051b8501011115612dc857600080fd5b9250929050565b600060208284031215612de0578081fd5b81356129f78161343f565b60008060408385031215612dfd578081fd5b8235612e088161343f565b946020939093013593505050565b60008060008060408587031215612e2b578182fd5b843567ffffffffffffffff80821115612e42578384fd5b612e4e88838901612d85565b90965094506020870135915080821115612e66578384fd5b50612e7387828801612d85565b95989497509550505050565b60006020808385031215612e91578182fd5b825167ffffffffffffffff811115612ea7578283fd5b8301601f81018513612eb7578283fd5b8051612eca612ec58261333a565b613309565b80828252848201915084840188868560051b8701011115612ee9578687fd5b8694505b83851015612f14578051612f008161343f565b835260019490940193918501918501612eed565b50979650505050505050565b60006020808385031215612f32578182fd5b823567ffffffffffffffff811115612f48578283fd5b8301601f81018513612f58578283fd5b8035612f66612ec58261333a565b80828252848201915084840188868560051b8701011115612f85578687fd5b8694505b83851015612f14578035612f9c8161343f565b835260019490940193918501918501612f89565b600060408284031215612fc1578081fd5b82601f830112612fcf578081fd5b6040516040810181811067ffffffffffffffff82111715612ff257612ff2613429565b8060405250808385604086011115613008578384fd5b835b600281101561302957815183526020928301929091019060010161300a565b509195945050505050565b600060208284031215613045578081fd5b81516129f781613454565b60008060408385031215613062578182fd5b823561306d8161343f565b9150602083013561307d81613454565b809150509250929050565b600060208284031215613099578081fd5b81516129f78161343f565b600080604083850312156130b6578182fd5b82356130c18161343f565b915060208381013567ffffffffffffffff8111156130dd578283fd5b8401601f810186136130ed578283fd5b80356130fb612ec58261333a565b80828252848201915084840189868560051b870101111561311a578687fd5b8694505b838510156131455780356131318161343f565b83526001949094019391850191850161311e565b5080955050505050509250929050565b60008060408385031215613167578182fd5b82516001600160d81b038116811461317d578283fd5b602084015190925064ffffffffff8116811461307d578182fd5b6000602082840312156131a8578081fd5b5051919050565b600082516131c18184602087016133cc565b9190910192915050565b60208152600082518060208401526131ea8160408501602087016133cc565b601f01601f19169190910160400192915050565b6020808252601290820152710a6e0e4cac2c84092e640a8dede4090d2ced60731b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600c908201526b125b9d985b1a59081c1bdbdb60a21b604082015260600190565b60006040820184835260206040818501528185518084526060860191508287019350845b818110156132fc578451835293830193918301916001016132e0565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561333257613332613429565b604052919050565b600067ffffffffffffffff82111561335457613354613429565b5060051b60200190565b6000821982111561337157613371613413565b500190565b60008261339157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156133b0576133b0613413565b500290565b6000828210156133c7576133c7613413565b500390565b60005b838110156133e75781810151838201526020016133cf565b8381111561067d5750506000910152565b600060001982141561340c5761340c613413565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146110f157600080fd5b80151581146110f157600080fdfea264697066735822122011a69e06d1fa102f713011b9e67d4d35010fa542fd35613eba1cd9b032b13d0564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80637944f9441161008a578063f2fde38b11610059578063f2fde38b14610340578063f3aafa8014610360578063f583adbc14610380578063f5dab711146103a057600080fd5b80637944f944146102ae5780638da5cb5b146102e2578063946e1a62146103005780639e96b2ce1461032057600080fd5b80633e065bbc116100c65780633e065bbc146101ed5780633e5000fe14610239578063715018a61461027957806371646f981461028e57600080fd5b80630931753c1461014d5780631959a0021461016d5780631a399125146101ad578063318d9e5d146101cd57600080fd5b3661014857333214156101465760405162461bcd60e51b81526020600482015260126024820152712a3930b739b332b9103337b93134b23232b760711b60448201526064015b60405180910390fd5b005b600080fd5b34801561015957600080fd5b50610146610168366004612e16565b6103ec565b34801561017957600080fd5b5061019a610188366004612dcf565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101b957600080fd5b506101466101c8366004612deb565b610474565b3480156101d957600080fd5b506101466101e8366004612f20565b61051d565b3480156101f957600080fd5b506102217f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a4565b34801561024557600080fd5b50610269610254366004612dcf565b60016020526000908152604090205460ff1681565b60405190151581526020016101a4565b34801561028557600080fd5b50610146610684565b34801561029a57600080fd5b506101466102a9366004612dcf565b6106ba565b3480156102ba57600080fd5b506102217f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ee57600080fd5b506000546001600160a01b0316610221565b34801561030c57600080fd5b5061014661031b366004612dcf565b610a4d565b34801561032c57600080fd5b5061014661033b366004612dcf565b610e5b565b34801561034c57600080fd5b5061014661035b366004612dcf565b611059565b34801561036c57600080fd5b5061014661037b3660046130a4565b6110f4565b34801561038c57600080fd5b5061014661039b366004613050565b611849565b3480156103ac57600080fd5b506103d76103bb366004612dcf565b6004602052600090815260409020600181015460029091015482565b604080519283526020830191909152016101a4565b60005b8381101561046d5761045b85858381811061041a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061042f9190612dcf565b84848481811061044f57634e487b7160e01b600052603260045260246000fd5b90506020020135610474565b80610465816133f8565b9150506103ef565b5050505050565b3360008181526004602090815260408083206001600160a01b038716845260038352818420600282015486865260018201855283862081875290945291909320549091906104c2908661189e565b6001600160a01b0385166000908152600184016020908152604080832085845282528083209390935585905220546104fa908661189e565b600082815260208590526040902055610515828486846118b3565b505050505050565b336000908152600360205260408120905b82518110156105b157600083828151811061055957634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060046000836001600160a01b03166001600160a01b03168152602001908152602001600020905061059c84828484600201546118b3565b505080806105a9906133f8565b91505061052e565b508054600181111561067f5760018083556001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9033906105ff90856133b5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190613034565b505b505050565b6000546001600160a01b031633146106ae5760405162461bcd60e51b815260040161013d9061322a565b6106b86000611a05565b565b6002805414156106dc5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b15801561074557600080fd5b505afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190613034565b6107995760405162461bcd60e51b815260040161013d90613296565b3360009081526003602090815260408083206001600160a01b0386168452600490925290912060028101546001808301549082906107d890839061189e565b146108255760405162461bcd60e51b815260206004820152601760248201527f45706f636820416c72656164792046696e616c697a6564000000000000000000604482015260640161013d565b6001600160a01b0386166000908152600285016020526040902054811461088e5760405162461bcd60e51b815260206004820152601c60248201527f45706f63682046756e647320416c72656164656420436c61696d656400000000604482015260640161013d565b6001600160a01b038616600090815260028501602090815260408083208590556001870182528083208484529091529020548015610a3f5760008281526020858152604080832080546001600160a01b038c16855260018a018452828520878652909352908320929092556109038184611a55565b82600001819055506000896001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109829190810190612e7f565b90506109bc816000815181106109a857634e487b7160e01b600052603260045260246000fd5b602002602001015184600101548685611a61565b83600101819055506109fc816001815181106109e857634e487b7160e01b600052603260045260246000fd5b602002602001015184600201548685611a61565b60028401556003830154610a33907f0000000000000000000000000000000000000000000000000000000000000000908685611a61565b83600301819055505050505b505060016002555050505050565b600280541415610a6f5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b158015610ad857600080fd5b505afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190613034565b610b2c5760405162461bcd60e51b815260040161013d90613296565b81610b3681611aa8565b610b525760405162461bcd60e51b815260040161013d906131fe565b6001600160a01b0383166000908152600460205260409020600281015460018201548114610bc25760405162461bcd60e51b815260206004820152601f60248201527f50726576696f75732045706f6368204973204e6f742046696e616c697a656400604482015260640161013d565b6000856001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610bfd57600080fd5b505afa158015610c11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190612e7f565b90506000610c813083600081518110610c6257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661200b90919063ffffffff16565b90506000610caa3084600181518110610c6257634e487b7160e01b600052603260045260246000fd5b6040516370a0823160e01b81523060048201529091506001600160a01b03891690635915d8069082906370a082319060240160206040518083038186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c9190613197565b604080516000815260208101918290526001600160e01b031960e085901b16909152610d5c9190602481016132bc565b6040805180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190612fb0565b50610ddd82610dd73086600081518110610c6257634e487b7160e01b600052603260045260246000fd5b90611a55565b85600001600086815260200190815260200160002060010181905550610e2281610dd73086600181518110610c6257634e487b7160e01b600052603260045260246000fd5b6000858152602087905260409020600290810191909155850154610e4790600161189e565b600295860155505060019092555050505050565b600280541415610e7d5760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e9190613034565b610f3a5760405162461bcd60e51b815260040161013d90613296565b3360009081526003602090815260408083206001600160a01b03861684526004835281842060028101546001830185528386208187529094529190932054909190801561104c576001600160a01b03861660009081526001850160209081526040808320858452825280832083905590859052902054610fba9082611a55565b60008381526020859052604090819020919091555163a9059cbb60e01b8152336004820152602481018290526001600160a01b0387169063a9059cbb90604401602060405180830381600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190613034565b5050600160025550505050565b6000546001600160a01b031633146110835760405162461bcd60e51b815260040161013d9061322a565b6001600160a01b0381166110e85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013d565b6110f181611a05565b50565b6002805414156111165760405162461bcd60e51b815260040161013d9061325f565b60028055604051635b16ebb760e01b81526001600160a01b03808416600483015283917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb79060240160206040518083038186803b15801561117f57600080fd5b505afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b79190613034565b6111d35760405162461bcd60e51b815260040161013d90613296565b826111dd81611aa8565b6111f95760405162461bcd60e51b815260040161013d906131fe565b6001600160a01b038416600090815260046020908152604080832060018082015480865293829052919093206002840154909161123790849061189e565b146112845760405162461bcd60e51b815260206004820181905260248201527f50726576696f75732045706f636820416c72656164792046696e616c697a6564604482015260640161013d565b6000876001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112fb9190810190612e7f565b905060008160008151811061132057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168860008151811061135257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561137457506001820154611427565b8160018151811061139557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316886000815181106113c757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156113e957506002820154611427565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103334b939ba103a37b5b2b760691b604482015260640161013d565b6000806114348a846120ac565b9150915080600014156116e15782156116dc578183146114965760405162461bcd60e51b815260206004820152601d60248201527f417661696c61626c652042616c616e6365204973204e6f742044757374000000604482015260640161013d565b60005b8a516114a682600161335e565b101561161b5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d84815181106114fd57634e487b7160e01b600052603260045260246000fd5b60200260200101518e856001611513919061335e565b8151811061153157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161156b9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190613088565b90506115c681611aa8565b6116085760405162461bcd60e51b815260206004820152601360248201527214dc1c99585908125cc8151bdbc8121a59da1d606a1b604482015260640161013d565b5061161460018261335e565b9050611499565b5061165e8a60008151811061164057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03161590565b1561169657604051329084156108fc029085906000818181858888f19350505050158015611690573d6000803e3d6000fd5b50611707565b6116dc8b848c6000815181106116bc57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031661232b9092919063ffffffff16565b611707565b60006116ee8b843061238e565b6003870154909150611700908261189e565b6003870155505b8360008151811061172857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168a60008151811061175a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141561178a5760018501546117809083611a55565b6001860155611809565b836001815181106117ab57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168a6000815181106117dd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156118095760028501546118039083611a55565b60028601555b600185015415801561181d57506002850154155b15611837576001878101546118319161189e565b60018801555b50506001600255505050505050505050565b6000546001600160a01b031633146118735760405162461bcd60e51b815260040161013d9061322a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b60006118aa828461335e565b90505b92915050565b6001600160a01b03821660009081526002850160209081526040808320546001880183528184208185529092529091205461190b57506001600160a01b0382166000908152600285016020526040902081905561067d565b600184015481811161191e57505061067d565b6000611934600261192f85856133b5565b61284d565b9050600061194488888887612863565b905060018211156119725761196f61196889898961196389600161335e565b612863565b829061189e565b90505b875461197e908261189e565b88556001600160a01b03861660009081526001808a01602052604082209082906119a990889061335e565b815260200190815260200160002054600014905082600214806119c95750805b6119dd576119d885600161335e565b6119df565b855b6001600160a01b038816600090815260028b016020526040902055505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006118aa82846133b5565b600080611a7883611a72878761291b565b90612927565b90508015611a9457611a946001600160a01b0387163383612933565b611a9e8582611a55565b9695505050505050565b600080826001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015611ae457600080fd5b505afa158015611af8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b209190810190612e7f565b9050600080600080611b4d8786600081518110610c6257634e487b7160e01b600052603260045260246000fd5b90506000611b768887600181518110610c6257634e487b7160e01b600052603260045260246000fd5b90506000886001600160a01b031663728c769a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb357600080fd5b505afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613197565b6040805180820190915260008082526020820152909150896001600160a01b031663ee5d185989600081518110611c3257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611c6591906001600160a01b0391909116815260200190565b604080518083038186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190613155565b64ffffffffff1660208301526001600160d81b031681526000611ce1611cdb838588612991565b866129fe565b90508a6001600160a01b031663ee5d18598a600181518110611d1357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611d4691906001600160a01b0391909116815260200190565b604080518083038186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190613155565b64ffffffffff1660208401526001600160d81b031682526000611dbc611cdb848688612991565b90508b6001600160a01b031663ac9d6f958b600081518110611dee57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611e2191906001600160a01b0391909116815260200190565b604080518083038186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190613155565b64ffffffffff1660208501526001600160d81b031683526000611e9d611e9785878a612991565b8861284d565b90508c6001600160a01b031663ac9d6f958c600181518110611ecf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611f0291906001600160a01b0391909116815260200190565b604080518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190613155565b64ffffffffff1660208601526001600160d81b031684526000611f78611e9786888a612991565b9050611f9082611a72670de0b6b3a76400008661291b565b9a50611fa884611a72670de0b6b3a76400008461291b565b9950611fc088611a72670de0b6b3a76400008a61291b565b98505050505050505050611fe481662386f26fc1000061291b90919063ffffffff16565b612000670de0b6b3a7640000611ffa8686611a55565b9061291b565b109695505050505050565b60006001600160a01b03831661202c57506001600160a01b038116316118ad565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b15801561206d57600080fd5b505afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a59190613197565b90506118ad565b81518190819060005b818110156123225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d788848151811061210e57634e487b7160e01b600052603260045260246000fd5b602002602001015189856001612124919061335e565b8151811061214257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161217c9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc9190613088565b905060006121f96064611a72848b8781518110610c6257634e487b7160e01b600052603260045260246000fd5b9050848110156122175761221185611a72888461291b565b95508094505b816001600160a01b031663c515ee2389858151811061224657634e487b7160e01b600052603260045260246000fd5b60200260200101518a86600161225c919061335e565b8151811061227a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044810188905260640160206040518083038186803b1580156122d257600080fd5b505afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a9190613197565b9450505060018161231b919061335e565b90506120b5565b50509250929050565b6040516001600160a01b03831660248201526044810182905261067f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a0e565b8251829060005b8181101561278a5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78884815181106123ee57634e487b7160e01b600052603260045260246000fd5b602002602001015189856001612404919061335e565b8151811061242257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161245c9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561247457600080fd5b505afa158015612488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ac9190613088565b90506124b781611aa8565b6124d35760405162461bcd60e51b815260040161013d906131fe565b60008490506124fb88848151811061164057634e487b7160e01b600052603260045260246000fd5b6125485761254482868a868151811061252457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316612ae09092919063ffffffff16565b5060005b8361255484600261335e565b101561266557816001600160a01b031663d5bcb9b5828a868151811061258a57634e487b7160e01b600052603260045260246000fd5b60200260200101518b8760016125a0919061335e565b815181106125be57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529116602482015260448101899052600060648201819052608482015260a4016020604051808303818588803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061265e9190613197565b9450612775565b816001600160a01b031663e331d039828a868151811061269557634e487b7160e01b600052603260045260246000fd5b60200260200101518b8760016126ab919061335e565b815181106126c957634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0392831660048201529082166024820152604481018a90526000606482018190526084820152908a1660a482015260c4016020604051808303818588803b15801561273957600080fd5b505af115801561274d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906127729190613197565b94505b50612783905060018261335e565b9050612395565b50806001141561284557846000815181106127b557634e487b7160e01b600052603260045260246000fd5b602090810291909101015160405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561280b57600080fd5b505af115801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128439190613034565b505b509392505050565b600081831061285c57816118aa565b5090919050565b6001600160a01b038216600090815260018501602090815260408083208484529091528120548015612912576000838152602086905260409020600381015490546128b281611a72848661291b565b6001600160a01b038716600090815260018a016020908152604080832089845290915281205593506128e48184611a55565b6000868152602089905260409020556128fd8285611a55565b60008681526020899052604090206003015550505b50949350505050565b60006118aa8284613396565b60006118aa8284613376565b801561067f576001600160a01b03831661297d576040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561067d573d6000803e3d6000fd5b61067f6001600160a01b038416838361232b565b6000806129b68461192f876020015164ffffffffff1642611a5590919063ffffffff16565b905060006129c48583611a55565b90506129f285611a726129d7878661291b565b89516129ec906001600160d81b03168661291b565b9061189e565b925050505b9392505050565b60008183101561285c57816118aa565b6000612a63826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c049092919063ffffffff16565b80519091501561067f5780806020019051810190612a819190613034565b61067f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161013d565b801580612b695750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b2f57600080fd5b505afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b679190613197565b155b612bd45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161013d565b6040516001600160a01b03831660248201526044810182905261067f90849063095ea7b360e01b90606401612357565b6060612c138484600085612c1b565b949350505050565b606082471015612c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161013d565b6001600160a01b0385163b612cd35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b600080866001600160a01b03168587604051612cef91906131af565b60006040518083038185875af1925050503d8060008114612d2c576040519150601f19603f3d011682016040523d82523d6000602084013e612d31565b606091505b5091509150612d41828286612d4c565b979650505050505050565b60608315612d5b5750816129f7565b825115612d6b5782518084602001fd5b8160405162461bcd60e51b815260040161013d91906131cb565b60008083601f840112612d96578182fd5b50813567ffffffffffffffff811115612dad578182fd5b6020830191508360208260051b8501011115612dc857600080fd5b9250929050565b600060208284031215612de0578081fd5b81356129f78161343f565b60008060408385031215612dfd578081fd5b8235612e088161343f565b946020939093013593505050565b60008060008060408587031215612e2b578182fd5b843567ffffffffffffffff80821115612e42578384fd5b612e4e88838901612d85565b90965094506020870135915080821115612e66578384fd5b50612e7387828801612d85565b95989497509550505050565b60006020808385031215612e91578182fd5b825167ffffffffffffffff811115612ea7578283fd5b8301601f81018513612eb7578283fd5b8051612eca612ec58261333a565b613309565b80828252848201915084840188868560051b8701011115612ee9578687fd5b8694505b83851015612f14578051612f008161343f565b835260019490940193918501918501612eed565b50979650505050505050565b60006020808385031215612f32578182fd5b823567ffffffffffffffff811115612f48578283fd5b8301601f81018513612f58578283fd5b8035612f66612ec58261333a565b80828252848201915084840188868560051b8701011115612f85578687fd5b8694505b83851015612f14578035612f9c8161343f565b835260019490940193918501918501612f89565b600060408284031215612fc1578081fd5b82601f830112612fcf578081fd5b6040516040810181811067ffffffffffffffff82111715612ff257612ff2613429565b8060405250808385604086011115613008578384fd5b835b600281101561302957815183526020928301929091019060010161300a565b509195945050505050565b600060208284031215613045578081fd5b81516129f781613454565b60008060408385031215613062578182fd5b823561306d8161343f565b9150602083013561307d81613454565b809150509250929050565b600060208284031215613099578081fd5b81516129f78161343f565b600080604083850312156130b6578182fd5b82356130c18161343f565b915060208381013567ffffffffffffffff8111156130dd578283fd5b8401601f810186136130ed578283fd5b80356130fb612ec58261333a565b80828252848201915084840189868560051b870101111561311a578687fd5b8694505b838510156131455780356131318161343f565b83526001949094019391850191850161311e565b5080955050505050509250929050565b60008060408385031215613167578182fd5b82516001600160d81b038116811461317d578283fd5b602084015190925064ffffffffff8116811461307d578182fd5b6000602082840312156131a8578081fd5b5051919050565b600082516131c18184602087016133cc565b9190910192915050565b60208152600082518060208401526131ea8160408501602087016133cc565b601f01601f19169190910160400192915050565b6020808252601290820152710a6e0e4cac2c84092e640a8dede4090d2ced60731b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600c908201526b125b9d985b1a59081c1bdbdb60a21b604082015260600190565b60006040820184835260206040818501528185518084526060860191508287019350845b818110156132fc578451835293830193918301916001016132e0565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561333257613332613429565b604052919050565b600067ffffffffffffffff82111561335457613354613429565b5060051b60200190565b6000821982111561337157613371613413565b500190565b60008261339157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156133b0576133b0613413565b500290565b6000828210156133c7576133c7613413565b500390565b60005b838110156133e75781810151838201526020016133cf565b8381111561067d5750506000910152565b600060001982141561340c5761340c613413565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146110f157600080fd5b80151581146110f157600080fdfea264697066735822122011a69e06d1fa102f713011b9e67d4d35010fa542fd35613eba1cd9b032b13d0564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address[])": {
        "notice": "Collects `msg.sender`'s tokens from pools and transfers them to him "
      },
      "claimCurrentEpoch(address)": {
        "notice": "Collects current epoch `msg.sender`'s tokens from pool and transfers them to him "
      },
      "claimFrozenEpoch(address)": {
        "notice": "Collects frozen epoch `msg.sender`'s tokens from pool and transfers them to him "
      },
      "freezeEpoch(address)": {
        "notice": "Freezes current epoch and creates new as an active one "
      },
      "trade(address,address[])": {
        "notice": "Perform chain swap described by `path`. First element of `path` should match either token of the `Swap`. The last token in chain should always be `FAD` "
      },
      "updateReward(address,uint256)": {
        "notice": "Adds specified `amount` as reward to `receiver` "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9160,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "pathWhitlist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)902,t_bool)"
      },
      {
        "astId": 207,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1978,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)1954_storage)"
      },
      {
        "astId": 1984,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)902,t_struct(TokenInfo)1973_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)902": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1954_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReferralFeeReceiver.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1954_storage"
      },
      "t_mapping(t_contract(IERC20)902,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)902,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)902,t_struct(TokenInfo)1973_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => struct ReferralFeeReceiver.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)1973_storage"
      },
      "t_mapping(t_contract(IERC20)902,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)902",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(EpochBalance)1963_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReferralFeeReceiver.EpochBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochBalance)1963_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EpochBalance)1963_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.EpochBalance",
        "members": [
          {
            "astId": 1956,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1958,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token0Balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1960,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token1Balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1962,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "fadBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)1973_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.TokenInfo",
        "members": [
          {
            "astId": 1968,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "epochBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(EpochBalance)1963_storage)"
          },
          {
            "astId": 1970,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1972,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)1954_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.UserInfo",
        "members": [
          {
            "astId": 1941,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1948,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20)902,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 1953,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IERC20)902,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}